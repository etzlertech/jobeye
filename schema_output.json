{
  "swagger": "2.0",
  "info": {
    "description": "",
    "title": "standard public schema",
    "version": "12.2.12 (cd3cf9e)"
  },
  "host": "rtwigjwqufozqfwozpvo.supabase.co:443",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json",
    "application/vnd.pgrst.object+json;nulls=stripped",
    "application/vnd.pgrst.object+json",
    "text/csv"
  ],
  "produces": [
    "application/json",
    "application/vnd.pgrst.object+json;nulls=stripped",
    "application/vnd.pgrst.object+json",
    "text/csv"
  ],
  "paths": {
    "/": {
      "get": {
        "produces": [
          "application/openapi+json",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "OpenAPI description (this document)",
        "tags": [
          "Introspection"
        ]
      }
    },
    "/active_jobs_view": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.id"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.job_number"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.template_id"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.property_id"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.title"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.description"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.status"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.scheduled_start"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.scheduled_end"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.actual_start"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.actual_end"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.assigned_to"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.assigned_team"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.estimated_duration"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.actual_duration"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.completion_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.voice_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.voice_created"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.voice_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.checklist_items"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.materials_used"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.equipment_used"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.photos_before"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.photos_after"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.signature_required"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.signature_data"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.billing_info"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.customer_name"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.customer_phone"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.property_name"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.property_address"
          },
          {
            "$ref": "#/parameters/rowFilter.active_jobs_view.assigned_to_name"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/active_jobs_view"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "active_jobs_view"
        ]
      }
    },
    "/vendors": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.vendors.id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.name"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.intake_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.tenant_id"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/vendors"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "vendors"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.vendors"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "vendors"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.vendors.id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.name"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.intake_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.tenant_id"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "vendors"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.vendors.id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.name"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.intake_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendors.tenant_id"
          },
          {
            "$ref": "#/parameters/body.vendors"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "vendors"
        ]
      }
    },
    "/auth_audit_log": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.id"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.event_type"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.user_email"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.ip_address"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.user_agent"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.device_type"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.location"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.success"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.reason"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.error_code"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.risk_score"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.details"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.voice_command"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.voice_confidence"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/auth_audit_log"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Authentication and authorization event audit trail",
        "tags": [
          "auth_audit_log"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.auth_audit_log"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Authentication and authorization event audit trail",
        "tags": [
          "auth_audit_log"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.id"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.event_type"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.user_email"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.ip_address"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.user_agent"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.device_type"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.location"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.success"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.reason"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.error_code"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.risk_score"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.details"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.voice_command"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.voice_confidence"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Authentication and authorization event audit trail",
        "tags": [
          "auth_audit_log"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.id"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.event_type"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.user_email"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.ip_address"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.user_agent"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.device_type"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.location"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.success"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.reason"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.error_code"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.risk_score"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.details"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.voice_command"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.voice_confidence"
          },
          {
            "$ref": "#/parameters/rowFilter.auth_audit_log.created_at"
          },
          {
            "$ref": "#/parameters/body.auth_audit_log"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Authentication and authorization event audit trail",
        "tags": [
          "auth_audit_log"
        ]
      }
    },
    "/invoices": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.invoices.id"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.invoice_number"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.amount"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.tax_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.total_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.status"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.due_date"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.paid_date"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.payment_method"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/invoices"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "invoices"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.invoices"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "invoices"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.invoices.id"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.invoice_number"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.amount"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.tax_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.total_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.status"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.due_date"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.paid_date"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.payment_method"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "invoices"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.invoices.id"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.invoice_number"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.amount"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.tax_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.total_amount"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.status"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.due_date"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.paid_date"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.payment_method"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.invoices.updated_at"
          },
          {
            "$ref": "#/parameters/body.invoices"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "invoices"
        ]
      }
    },
    "/gps_tracking_records": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.id"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.latitude"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.longitude"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.accuracy_meters"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.altitude_meters"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.speed_mps"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.heading_degrees"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.recorded_at"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.accuracy"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.altitude"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.speed"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.heading"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.timestamp"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/gps_tracking_records"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "gps_tracking_records"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.gps_tracking_records"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "gps_tracking_records"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.id"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.latitude"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.longitude"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.accuracy_meters"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.altitude_meters"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.speed_mps"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.heading_degrees"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.recorded_at"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.accuracy"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.altitude"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.speed"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.heading"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.timestamp"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "gps_tracking_records"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.id"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.latitude"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.longitude"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.accuracy_meters"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.altitude_meters"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.speed_mps"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.heading_degrees"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.recorded_at"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.accuracy"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.altitude"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.speed"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.heading"
          },
          {
            "$ref": "#/parameters/rowFilter.gps_tracking_records.timestamp"
          },
          {
            "$ref": "#/parameters/body.gps_tracking_records"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "gps_tracking_records"
        ]
      }
    },
    "/tenant_assignments": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.role"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.is_primary"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.assigned_by"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.assigned_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.access_level"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.permissions_override"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.last_accessed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.access_count"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/tenant_assignments"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Multi-tenant user access assignments",
        "tags": [
          "tenant_assignments"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.tenant_assignments"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Multi-tenant user access assignments",
        "tags": [
          "tenant_assignments"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.role"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.is_primary"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.assigned_by"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.assigned_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.access_level"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.permissions_override"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.last_accessed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.access_count"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Multi-tenant user access assignments",
        "tags": [
          "tenant_assignments"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.role"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.is_primary"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.assigned_by"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.assigned_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.access_level"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.permissions_override"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.last_accessed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_assignments.access_count"
          },
          {
            "$ref": "#/parameters/body.tenant_assignments"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Multi-tenant user access assignments",
        "tags": [
          "tenant_assignments"
        ]
      }
    },
    "/vendor_aliases": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.vendor_aliases.id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_aliases.vendor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_aliases.alias"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_aliases.tenant_id"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/vendor_aliases"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "vendor_aliases"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.vendor_aliases"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "vendor_aliases"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.vendor_aliases.id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_aliases.vendor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_aliases.alias"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_aliases.tenant_id"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "vendor_aliases"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.vendor_aliases.id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_aliases.vendor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_aliases.alias"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_aliases.tenant_id"
          },
          {
            "$ref": "#/parameters/body.vendor_aliases"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "vendor_aliases"
        ]
      }
    },
    "/code_pattern_violations": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.id"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.file_path"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.line_number"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.column_number"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.pattern_type"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.violation_text"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.suggested_fix"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.is_fixed"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.fixed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/code_pattern_violations"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "code_pattern_violations"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.code_pattern_violations"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "code_pattern_violations"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.id"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.file_path"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.line_number"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.column_number"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.pattern_type"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.violation_text"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.suggested_fix"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.is_fixed"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.fixed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "code_pattern_violations"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.id"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.file_path"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.line_number"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.column_number"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.pattern_type"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.violation_text"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.suggested_fix"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.is_fixed"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.fixed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.code_pattern_violations.created_at"
          },
          {
            "$ref": "#/parameters/body.code_pattern_violations"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "code_pattern_violations"
        ]
      }
    },
    "/geofence_events": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.geofence_events.id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.geofence_id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.event_type"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.latitude"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.longitude"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.timestamp"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/geofence_events"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "geofence_events"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.geofence_events"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "geofence_events"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.geofence_events.id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.geofence_id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.event_type"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.latitude"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.longitude"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.timestamp"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "geofence_events"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.geofence_events.id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.geofence_id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.event_type"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.latitude"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.longitude"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.timestamp"
          },
          {
            "$ref": "#/parameters/rowFilter.geofence_events.created_at"
          },
          {
            "$ref": "#/parameters/body.geofence_events"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "geofence_events"
        ]
      }
    },
    "/role_permissions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.role_permissions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.role"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.permission_id"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.granted_by"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.granted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.conditions"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/role_permissions"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Permission assignments to user roles",
        "tags": [
          "role_permissions"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.role_permissions"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Permission assignments to user roles",
        "tags": [
          "role_permissions"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.role_permissions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.role"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.permission_id"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.granted_by"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.granted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.conditions"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Permission assignments to user roles",
        "tags": [
          "role_permissions"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.role_permissions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.role"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.permission_id"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.granted_by"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.granted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.role_permissions.conditions"
          },
          {
            "$ref": "#/parameters/body.role_permissions"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Permission assignments to user roles",
        "tags": [
          "role_permissions"
        ]
      }
    },
    "/user_invitations": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_invitations.id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.email"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.role"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.invitation_code"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.invited_by"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.invited_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.accepted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.accepted_by"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.is_used"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.welcome_message"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.permissions_preset"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.voice_onboarding_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.metadata"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/user_invitations"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Invitation-based user registration system",
        "tags": [
          "user_invitations"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.user_invitations"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Invitation-based user registration system",
        "tags": [
          "user_invitations"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_invitations.id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.email"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.role"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.invitation_code"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.invited_by"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.invited_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.accepted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.accepted_by"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.is_used"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.welcome_message"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.permissions_preset"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.voice_onboarding_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.metadata"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Invitation-based user registration system",
        "tags": [
          "user_invitations"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_invitations.id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.email"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.role"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.invitation_code"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.invited_by"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.invited_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.accepted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.accepted_by"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.is_used"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.welcome_message"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.permissions_preset"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.voice_onboarding_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.user_invitations.metadata"
          },
          {
            "$ref": "#/parameters/body.user_invitations"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Invitation-based user registration system",
        "tags": [
          "user_invitations"
        ]
      }
    },
    "/user_assignments": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_assignments.id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.role"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/user_assignments"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "user_assignments"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.user_assignments"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "user_assignments"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_assignments.id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.role"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "user_assignments"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_assignments.id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.role"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_assignments.updated_at"
          },
          {
            "$ref": "#/parameters/body.user_assignments"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "user_assignments"
        ]
      }
    },
    "/voice_profiles": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.id"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.wake_word"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.speech_rate"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_pitch"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.preferred_voice"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.language_code"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_feedback_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_feedback_level"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.preferred_tts_provider"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_pattern_hash"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.confidence_threshold"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_samples_collected"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.last_voice_training_at"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_recognition_provider"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.noise_cancellation_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_commands_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.accessibility_voice_navigation"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.onboarding_completed"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_analytics"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/voice_profiles"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Voice preferences and biometric patterns",
        "tags": [
          "voice_profiles"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.voice_profiles"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Voice preferences and biometric patterns",
        "tags": [
          "voice_profiles"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.id"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.wake_word"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.speech_rate"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_pitch"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.preferred_voice"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.language_code"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_feedback_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_feedback_level"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.preferred_tts_provider"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_pattern_hash"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.confidence_threshold"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_samples_collected"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.last_voice_training_at"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_recognition_provider"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.noise_cancellation_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_commands_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.accessibility_voice_navigation"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.onboarding_completed"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_analytics"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Voice preferences and biometric patterns",
        "tags": [
          "voice_profiles"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.id"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.wake_word"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.speech_rate"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_pitch"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.preferred_voice"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.language_code"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_feedback_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_feedback_level"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.preferred_tts_provider"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_pattern_hash"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.confidence_threshold"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_samples_collected"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.last_voice_training_at"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_recognition_provider"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.noise_cancellation_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_commands_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.accessibility_voice_navigation"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.onboarding_completed"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.voice_analytics"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.voice_profiles.updated_at"
          },
          {
            "$ref": "#/parameters/body.voice_profiles"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Voice preferences and biometric patterns",
        "tags": [
          "voice_profiles"
        ]
      }
    },
    "/notifications": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.notifications.id"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.notification_type"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.title"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.message"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.related_entity_type"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.related_entity_id"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.read_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.tenant_id"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/notifications"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "notifications"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.notifications"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "notifications"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.notifications.id"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.notification_type"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.title"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.message"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.related_entity_type"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.related_entity_id"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.read_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.tenant_id"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "notifications"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.notifications.id"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.notification_type"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.title"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.message"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.related_entity_type"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.related_entity_id"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.read_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notifications.tenant_id"
          },
          {
            "$ref": "#/parameters/body.notifications"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "notifications"
        ]
      }
    },
    "/customer_feedback": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.feedback_type"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.severity"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.description"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.reported_by"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.status"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.escalated_to"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.escalation_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.resolved_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.resolution_notes"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/customer_feedback"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "customer_feedback"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.customer_feedback"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "customer_feedback"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.feedback_type"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.severity"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.description"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.reported_by"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.status"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.escalated_to"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.escalation_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.resolved_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.resolution_notes"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "customer_feedback"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.feedback_type"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.severity"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.description"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.reported_by"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.status"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.escalated_to"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.escalation_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.resolved_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customer_feedback.resolution_notes"
          },
          {
            "$ref": "#/parameters/body.customer_feedback"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "customer_feedback"
        ]
      }
    },
    "/geofences": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.geofences.id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.name"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.center_latitude"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.center_longitude"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.radius_meters"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.active"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/geofences"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "geofences"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.geofences"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "geofences"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.geofences.id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.name"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.center_latitude"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.center_longitude"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.radius_meters"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.active"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "geofences"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.geofences.id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.name"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.center_latitude"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.center_longitude"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.radius_meters"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.active"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.geofences.updated_at"
          },
          {
            "$ref": "#/parameters/body.geofences"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "geofences"
        ]
      }
    },
    "/dev_project_standards": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.id"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.document_title"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.document_content"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.version"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.last_updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.updated_by"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.category"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.tags"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/dev_project_standards"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Stores project standards documentation for the Control Tower dashboard",
        "tags": [
          "dev_project_standards"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.dev_project_standards"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Stores project standards documentation for the Control Tower dashboard",
        "tags": [
          "dev_project_standards"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.id"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.document_title"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.document_content"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.version"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.last_updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.updated_by"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.category"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.tags"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Stores project standards documentation for the Control Tower dashboard",
        "tags": [
          "dev_project_standards"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.id"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.document_title"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.document_content"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.version"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.last_updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.updated_by"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.category"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_project_standards.tags"
          },
          {
            "$ref": "#/parameters/body.dev_project_standards"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Stores project standards documentation for the Control Tower dashboard",
        "tags": [
          "dev_project_standards"
        ]
      }
    },
    "/users_extended": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.users_extended.id"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.role"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.display_name"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.first_name"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.last_name"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.phone"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.avatar_url"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.timezone"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.preferred_language"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.email_verified_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.phone_verified_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.last_login_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.password_changed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.terms_accepted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.privacy_policy_accepted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.marketing_consent"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.two_factor_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.failed_login_attempts"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.locked_until"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/users_extended"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Extended user profiles with tenant and role information",
        "tags": [
          "users_extended"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.users_extended"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Extended user profiles with tenant and role information",
        "tags": [
          "users_extended"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.users_extended.id"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.role"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.display_name"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.first_name"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.last_name"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.phone"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.avatar_url"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.timezone"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.preferred_language"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.email_verified_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.phone_verified_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.last_login_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.password_changed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.terms_accepted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.privacy_policy_accepted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.marketing_consent"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.two_factor_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.failed_login_attempts"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.locked_until"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Extended user profiles with tenant and role information",
        "tags": [
          "users_extended"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.users_extended.id"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.role"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.display_name"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.first_name"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.last_name"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.phone"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.avatar_url"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.timezone"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.preferred_language"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.email_verified_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.phone_verified_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.last_login_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.password_changed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.terms_accepted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.privacy_policy_accepted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.marketing_consent"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.two_factor_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.failed_login_attempts"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.locked_until"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.users_extended.updated_at"
          },
          {
            "$ref": "#/parameters/body.users_extended"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Extended user profiles with tenant and role information",
        "tags": [
          "users_extended"
        ]
      }
    },
    "/ocr_note_entities": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.ocr_note_entities.id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_note_entities.ocr_document_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_note_entities.label"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_note_entities.value"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_note_entities.tenant_id"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/ocr_note_entities"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "ocr_note_entities"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.ocr_note_entities"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "ocr_note_entities"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.ocr_note_entities.id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_note_entities.ocr_document_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_note_entities.label"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_note_entities.value"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_note_entities.tenant_id"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "ocr_note_entities"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.ocr_note_entities.id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_note_entities.ocr_document_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_note_entities.label"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_note_entities.value"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_note_entities.tenant_id"
          },
          {
            "$ref": "#/parameters/body.ocr_note_entities"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "ocr_note_entities"
        ]
      }
    },
    "/safety_checklists": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.checklist_items"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.completion_status"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.completed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.supervisor_approved"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.supervisor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.supervisor_notes"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/safety_checklists"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "safety_checklists"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.safety_checklists"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "safety_checklists"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.checklist_items"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.completion_status"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.completed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.supervisor_approved"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.supervisor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.supervisor_notes"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "safety_checklists"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.checklist_items"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.completion_status"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.completed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.supervisor_approved"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.supervisor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklists.supervisor_notes"
          },
          {
            "$ref": "#/parameters/body.safety_checklists"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "safety_checklists"
        ]
      }
    },
    "/customers": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.customers.id"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.customer_number"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.name"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.email"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.phone"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.mobile_phone"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.billing_address"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.service_address"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.tags"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.voice_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.version"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.intake_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.thumbnail_url"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.medium_url"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.primary_image_url"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/customers"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "customers"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.customers"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "customers"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.customers.id"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.customer_number"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.name"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.email"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.phone"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.mobile_phone"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.billing_address"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.service_address"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.tags"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.voice_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.version"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.intake_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.thumbnail_url"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.medium_url"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.primary_image_url"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "customers"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.customers.id"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.customer_number"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.name"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.email"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.phone"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.mobile_phone"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.billing_address"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.service_address"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.tags"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.voice_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.version"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.intake_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.thumbnail_url"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.medium_url"
          },
          {
            "$ref": "#/parameters/rowFilter.customers.primary_image_url"
          },
          {
            "$ref": "#/parameters/body.customers"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/geometry_columns": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_catalog"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_schema"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_name"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_geometry_column"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.coord_dimension"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.srid"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.type"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/geometry_columns"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "geometry_columns"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.geometry_columns"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "geometry_columns"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_catalog"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_schema"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_name"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_geometry_column"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.coord_dimension"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.srid"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.type"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "geometry_columns"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_catalog"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_schema"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_table_name"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.f_geometry_column"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.coord_dimension"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.srid"
          },
          {
            "$ref": "#/parameters/rowFilter.geometry_columns.type"
          },
          {
            "$ref": "#/parameters/body.geometry_columns"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "geometry_columns"
        ]
      }
    },
    "/kit_variants": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.kit_variants.id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.kit_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.variant_code"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.name"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.is_default"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/kit_variants"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "kit_variants"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.kit_variants"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "kit_variants"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.kit_variants.id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.kit_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.variant_code"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.name"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.is_default"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "kit_variants"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.kit_variants.id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.kit_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.variant_code"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.name"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.is_default"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_variants.updated_at"
          },
          {
            "$ref": "#/parameters/body.kit_variants"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "kit_variants"
        ]
      }
    },
    "/tenant_members": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.tenant_members.id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.role"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.status"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.joined_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.invited_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.invited_by"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/tenant_members"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "tenant_members"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.tenant_members"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "tenant_members"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.tenant_members.id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.role"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.status"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.joined_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.invited_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.invited_by"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "tenant_members"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.tenant_members.id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.role"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.status"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.joined_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.invited_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.invited_by"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_members.updated_at"
          },
          {
            "$ref": "#/parameters/body.tenant_members"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "tenant_members"
        ]
      }
    },
    "/tenant_invitations": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.email"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.role"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.status"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.token"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.accepted_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/tenant_invitations"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "tenant_invitations"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.tenant_invitations"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "tenant_invitations"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.email"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.role"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.status"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.token"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.accepted_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "tenant_invitations"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.email"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.role"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.status"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.token"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.tenant_invitations.accepted_at"
          },
          {
            "$ref": "#/parameters/body.tenant_invitations"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "tenant_invitations"
        ]
      }
    },
    "/vendor_locations": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.vendor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.address"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.city"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.state"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.postal_code"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.country"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.tenant_id"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/vendor_locations"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "vendor_locations"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.vendor_locations"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "vendor_locations"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.vendor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.address"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.city"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.state"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.postal_code"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.country"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.tenant_id"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "vendor_locations"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.vendor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.address"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.city"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.state"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.postal_code"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.country"
          },
          {
            "$ref": "#/parameters/rowFilter.vendor_locations.tenant_id"
          },
          {
            "$ref": "#/parameters/body.vendor_locations"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "vendor_locations"
        ]
      }
    },
    "/audit_logs": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.audit_logs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.entity_type"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.entity_id"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.action"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.performed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.details"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.ip_address"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.user_agent"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/audit_logs"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "audit_logs"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.audit_logs"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "audit_logs"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.audit_logs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.entity_type"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.entity_id"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.action"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.performed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.details"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.ip_address"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.user_agent"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "audit_logs"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.audit_logs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.entity_type"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.entity_id"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.action"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.performed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.details"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.ip_address"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.user_agent"
          },
          {
            "$ref": "#/parameters/rowFilter.audit_logs.created_at"
          },
          {
            "$ref": "#/parameters/body.audit_logs"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "audit_logs"
        ]
      }
    },
    "/daily_reports": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.daily_reports.id"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.report_date"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.technician_count"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.jobs_assigned"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.equipment_audit_id"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.summary_text"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.tenant_id"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/daily_reports"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "daily_reports"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.daily_reports"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "daily_reports"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.daily_reports.id"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.report_date"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.technician_count"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.jobs_assigned"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.equipment_audit_id"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.summary_text"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.tenant_id"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "daily_reports"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.daily_reports.id"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.report_date"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.technician_count"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.jobs_assigned"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.equipment_audit_id"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.summary_text"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.daily_reports.tenant_id"
          },
          {
            "$ref": "#/parameters/body.daily_reports"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "daily_reports"
        ]
      }
    },
    "/intake_requests": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.intake_requests.id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.customer_name"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.customer_email"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.customer_phone"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.service_type"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.description"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.status"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.converted_to_job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.assigned_to"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.lead_score"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.converted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.request_source"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.source"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/intake_requests"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "intake_requests"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.intake_requests"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "intake_requests"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.intake_requests.id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.customer_name"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.customer_email"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.customer_phone"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.service_type"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.description"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.status"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.converted_to_job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.assigned_to"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.lead_score"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.converted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.request_source"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.source"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "intake_requests"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.intake_requests.id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.customer_name"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.customer_email"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.customer_phone"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.service_type"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.description"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.status"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.converted_to_job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.assigned_to"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.lead_score"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.converted_at"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.request_source"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_requests.source"
          },
          {
            "$ref": "#/parameters/body.intake_requests"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "intake_requests"
        ]
      }
    },
    "/kit_assignments": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.kit_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.variant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.external_ref"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.tenant_id"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/kit_assignments"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "kit_assignments"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.kit_assignments"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "kit_assignments"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.kit_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.variant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.external_ref"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.tenant_id"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "kit_assignments"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.kit_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.variant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.external_ref"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_assignments.tenant_id"
          },
          {
            "$ref": "#/parameters/body.kit_assignments"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "kit_assignments"
        ]
      }
    },
    "/equipment_maintenance": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.equipment_id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.performed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.maintenance_type"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.maintenance_date"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.actions_performed"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.pre_maintenance_verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.post_maintenance_verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.status"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.completion_date"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.tenant_id"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/equipment_maintenance"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "equipment_maintenance"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.equipment_maintenance"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "equipment_maintenance"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.equipment_id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.performed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.maintenance_type"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.maintenance_date"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.actions_performed"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.pre_maintenance_verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.post_maintenance_verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.status"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.completion_date"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.tenant_id"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "equipment_maintenance"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.equipment_id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.performed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.maintenance_type"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.maintenance_date"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.actions_performed"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.pre_maintenance_verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.post_maintenance_verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.status"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.completion_date"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_maintenance.tenant_id"
          },
          {
            "$ref": "#/parameters/body.equipment_maintenance"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "equipment_maintenance"
        ]
      }
    },
    "/repository_inventory": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.id"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.domain"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.repository_name"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.file_path"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.pattern_type"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.target_pattern"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.migration_status"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.dependencies_count"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.migrated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/repository_inventory"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "repository_inventory"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.repository_inventory"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "repository_inventory"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.id"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.domain"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.repository_name"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.file_path"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.pattern_type"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.target_pattern"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.migration_status"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.dependencies_count"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.migrated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "repository_inventory"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.id"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.domain"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.repository_name"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.file_path"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.pattern_type"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.target_pattern"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.migration_status"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.dependencies_count"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.repository_inventory.migrated_at"
          },
          {
            "$ref": "#/parameters/body.repository_inventory"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "repository_inventory"
        ]
      }
    },
    "/training_certificates": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.training_certificates.id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.training_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.trainee_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.certificate_type"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.issued_date"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.score"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.status"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/training_certificates"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "training_certificates"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.training_certificates"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "training_certificates"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.training_certificates.id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.training_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.trainee_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.certificate_type"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.issued_date"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.score"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.status"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "training_certificates"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.training_certificates.id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.training_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.trainee_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.certificate_type"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.issued_date"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.score"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.status"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.training_certificates.created_at"
          },
          {
            "$ref": "#/parameters/body.training_certificates"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "training_certificates"
        ]
      }
    },
    "/item_availability": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.item_availability.id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.item_type"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.category"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.tracking_mode"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.name"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.description"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.manufacturer"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.model"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.serial_number"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.sku"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.barcode"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.current_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.unit_of_measure"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.min_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.max_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.reorder_point"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.current_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.home_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.assigned_to_user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.assigned_to_job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.status"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.condition"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.last_maintenance_date"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.next_maintenance_date"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.purchase_date"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.purchase_price"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.current_value"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.depreciation_method"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.attributes"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.tags"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.custom_fields"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.primary_image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.image_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.updated_by"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.availability_status"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/item_availability"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "item_availability"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.item_availability"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "item_availability"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.item_availability.id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.item_type"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.category"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.tracking_mode"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.name"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.description"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.manufacturer"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.model"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.serial_number"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.sku"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.barcode"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.current_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.unit_of_measure"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.min_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.max_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.reorder_point"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.current_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.home_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.assigned_to_user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.assigned_to_job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.status"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.condition"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.last_maintenance_date"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.next_maintenance_date"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.purchase_date"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.purchase_price"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.current_value"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.depreciation_method"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.attributes"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.tags"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.custom_fields"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.primary_image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.image_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.updated_by"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.availability_status"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "item_availability"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.item_availability.id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.item_type"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.category"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.tracking_mode"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.name"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.description"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.manufacturer"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.model"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.serial_number"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.sku"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.barcode"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.current_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.unit_of_measure"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.min_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.max_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.reorder_point"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.current_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.home_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.assigned_to_user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.assigned_to_job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.status"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.condition"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.last_maintenance_date"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.next_maintenance_date"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.purchase_date"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.purchase_price"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.current_value"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.depreciation_method"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.attributes"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.tags"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.custom_fields"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.primary_image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.image_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.updated_by"
          },
          {
            "$ref": "#/parameters/rowFilter.item_availability.availability_status"
          },
          {
            "$ref": "#/parameters/body.item_availability"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "item_availability"
        ]
      }
    },
    "/user_activity_logs": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.activity_date"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.jobs_completed"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.equipment_return_verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.summary"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/user_activity_logs"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "user_activity_logs"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.user_activity_logs"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "user_activity_logs"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.activity_date"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.jobs_completed"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.equipment_return_verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.summary"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "user_activity_logs"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.activity_date"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.jobs_completed"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.equipment_return_verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.summary"
          },
          {
            "$ref": "#/parameters/rowFilter.user_activity_logs.created_at"
          },
          {
            "$ref": "#/parameters/body.user_activity_logs"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "user_activity_logs"
        ]
      }
    },
    "/ocr_documents": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.ocr_job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.file_path"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.page_count"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/ocr_documents"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "ocr_documents"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.ocr_documents"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "ocr_documents"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.ocr_job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.file_path"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.page_count"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "ocr_documents"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.ocr_job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.file_path"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.page_count"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_documents.created_at"
          },
          {
            "$ref": "#/parameters/body.ocr_documents"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "ocr_documents"
        ]
      }
    },
    "/quality_audits": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.quality_audits.id"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.auditor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.audit_date"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.jobs_audited"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.site_inspection_verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.quality_score"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.issues_found"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.status"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/quality_audits"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "quality_audits"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.quality_audits"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "quality_audits"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.quality_audits.id"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.auditor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.audit_date"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.jobs_audited"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.site_inspection_verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.quality_score"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.issues_found"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.status"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "quality_audits"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.quality_audits.id"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.auditor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.audit_date"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.jobs_audited"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.site_inspection_verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.quality_score"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.issues_found"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.status"
          },
          {
            "$ref": "#/parameters/rowFilter.quality_audits.created_at"
          },
          {
            "$ref": "#/parameters/body.quality_audits"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "quality_audits"
        ]
      }
    },
    "/admin_audit_log": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.id"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.target_id"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.target_type"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.action"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.actor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.actor_email"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.actor_roles"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.reason"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.comment"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/admin_audit_log"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "admin_audit_log"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.admin_audit_log"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "admin_audit_log"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.id"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.target_id"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.target_type"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.action"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.actor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.actor_email"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.actor_roles"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.reason"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.comment"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "admin_audit_log"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.id"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.target_id"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.target_type"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.action"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.actor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.actor_email"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.actor_roles"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.reason"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.comment"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.admin_audit_log.created_at"
          },
          {
            "$ref": "#/parameters/body.admin_audit_log"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "admin_audit_log"
        ]
      }
    },
    "/training_sessions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.training_sessions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.trainer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.training_type"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.session_date"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.demo_verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.equipment_demo_score"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.status"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.completion_date"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/training_sessions"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "training_sessions"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.training_sessions"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "training_sessions"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.training_sessions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.trainer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.training_type"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.session_date"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.demo_verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.equipment_demo_score"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.status"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.completion_date"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "training_sessions"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.training_sessions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.trainer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.training_type"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.session_date"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.demo_verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.equipment_demo_score"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.status"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.completion_date"
          },
          {
            "$ref": "#/parameters/rowFilter.training_sessions.created_at"
          },
          {
            "$ref": "#/parameters/body.training_sessions"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "training_sessions"
        ]
      }
    },
    "/geography_columns": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.geography_columns.f_table_catalog"
          },
          {
            "$ref": "#/parameters/rowFilter.geography_columns.f_table_schema"
          },
          {
            "$ref": "#/parameters/rowFilter.geography_columns.f_table_name"
          },
          {
            "$ref": "#/parameters/rowFilter.geography_columns.f_geography_column"
          },
          {
            "$ref": "#/parameters/rowFilter.geography_columns.coord_dimension"
          },
          {
            "$ref": "#/parameters/rowFilter.geography_columns.srid"
          },
          {
            "$ref": "#/parameters/rowFilter.geography_columns.type"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/geography_columns"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "geography_columns"
        ]
      }
    },
    "/kits": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.kits.id"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.kit_code"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.name"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.description"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.category"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/kits"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "kits"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.kits"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "kits"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.kits.id"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.kit_code"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.name"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.description"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.category"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "kits"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.kits.id"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.kit_code"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.name"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.description"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.category"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.kits.updated_at"
          },
          {
            "$ref": "#/parameters/body.kits"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "kits"
        ]
      }
    },
    "/jobs": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.jobs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.job_number"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.template_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.property_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.title"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.description"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.status"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.scheduled_start"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.scheduled_end"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.actual_start"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.actual_end"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.assigned_to"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.assigned_team"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.estimated_duration"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.actual_duration"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.completion_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.voice_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.voice_created"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.voice_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.checklist_items"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.materials_used"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.equipment_used"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.photos_before"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.photos_after"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.signature_required"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.signature_data"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.billing_info"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_photo_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_confirmed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.completion_quality_score"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.requires_supervisor_review"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_timestamp"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_gps_coords"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_method"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_confidence"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.completion_timestamp"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.completion_photo_url"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.tool_reload_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.offline_modified_at"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.offline_modified_by"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.special_instructions_audio"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.estimated_duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.actual_duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.completion_photo_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.thumbnail_url"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.medium_url"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.primary_image_url"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/jobs"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "jobs"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.jobs"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "jobs"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.jobs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.job_number"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.template_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.property_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.title"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.description"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.status"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.scheduled_start"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.scheduled_end"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.actual_start"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.actual_end"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.assigned_to"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.assigned_team"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.estimated_duration"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.actual_duration"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.completion_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.voice_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.voice_created"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.voice_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.checklist_items"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.materials_used"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.equipment_used"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.photos_before"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.photos_after"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.signature_required"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.signature_data"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.billing_info"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_photo_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_confirmed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.completion_quality_score"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.requires_supervisor_review"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_timestamp"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_gps_coords"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_method"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_confidence"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.completion_timestamp"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.completion_photo_url"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.tool_reload_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.offline_modified_at"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.offline_modified_by"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.special_instructions_audio"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.estimated_duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.actual_duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.completion_photo_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.thumbnail_url"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.medium_url"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.primary_image_url"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "jobs"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.jobs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.job_number"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.template_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.property_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.title"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.description"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.status"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.scheduled_start"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.scheduled_end"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.actual_start"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.actual_end"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.assigned_to"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.assigned_team"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.estimated_duration"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.actual_duration"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.completion_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.voice_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.voice_created"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.voice_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.checklist_items"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.materials_used"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.equipment_used"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.photos_before"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.photos_after"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.signature_required"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.signature_data"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.billing_info"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_photo_id"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_confirmed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.completion_quality_score"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.requires_supervisor_review"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_timestamp"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_gps_coords"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_method"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.arrival_confidence"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.completion_timestamp"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.completion_photo_url"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.tool_reload_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.offline_modified_at"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.offline_modified_by"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.special_instructions_audio"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.estimated_duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.actual_duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.completion_photo_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.thumbnail_url"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.medium_url"
          },
          {
            "$ref": "#/parameters/rowFilter.jobs.primary_image_url"
          },
          {
            "$ref": "#/parameters/body.jobs"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "jobs"
        ]
      }
    },
    "/maintenance_schedule": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.equipment_id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.scheduled_date"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.maintenance_type"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.assigned_to"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.status"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/maintenance_schedule"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "maintenance_schedule"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.maintenance_schedule"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "maintenance_schedule"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.equipment_id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.scheduled_date"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.maintenance_type"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.assigned_to"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.status"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "maintenance_schedule"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.equipment_id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.scheduled_date"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.maintenance_type"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.assigned_to"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.status"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_schedule.created_at"
          },
          {
            "$ref": "#/parameters/body.maintenance_schedule"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "maintenance_schedule"
        ]
      }
    },
    "/conflict_logs": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.entity_type"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.entity_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.conflict_type"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.field_name"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user1_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user1_role"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user1_changes"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user1_timestamp"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user2_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user2_role"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user2_changes"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user2_timestamp"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.resolution_strategy"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.merged_result"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.winning_user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.requires_supervisor_review"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.reviewed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.reviewed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.review_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.detected_at"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.resolved_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/conflict_logs"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "conflict_logs"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.conflict_logs"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "conflict_logs"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.entity_type"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.entity_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.conflict_type"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.field_name"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user1_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user1_role"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user1_changes"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user1_timestamp"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user2_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user2_role"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user2_changes"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user2_timestamp"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.resolution_strategy"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.merged_result"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.winning_user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.requires_supervisor_review"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.reviewed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.reviewed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.review_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.detected_at"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.resolved_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "conflict_logs"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.entity_type"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.entity_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.conflict_type"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.field_name"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user1_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user1_role"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user1_changes"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user1_timestamp"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user2_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user2_role"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user2_changes"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.user2_timestamp"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.resolution_strategy"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.merged_result"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.winning_user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.requires_supervisor_review"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.reviewed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.reviewed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.review_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.detected_at"
          },
          {
            "$ref": "#/parameters/rowFilter.conflict_logs.resolved_at"
          },
          {
            "$ref": "#/parameters/body.conflict_logs"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "conflict_logs"
        ]
      }
    },
    "/intake_documents": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.intake_documents.id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.intake_request_id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.document_url"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.document_type"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.ocr_text"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.ocr_confidence"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.ocr_metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.intake_id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.storage_path"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.file_size_bytes"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.uploaded_at"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.processed_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/intake_documents"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "intake_documents"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.intake_documents"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "intake_documents"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.intake_documents.id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.intake_request_id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.document_url"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.document_type"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.ocr_text"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.ocr_confidence"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.ocr_metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.intake_id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.storage_path"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.file_size_bytes"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.uploaded_at"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.processed_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "intake_documents"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.intake_documents.id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.intake_request_id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.document_url"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.document_type"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.ocr_text"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.ocr_confidence"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.ocr_metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.intake_id"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.storage_path"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.file_size_bytes"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.uploaded_at"
          },
          {
            "$ref": "#/parameters/rowFilter.intake_documents.processed_at"
          },
          {
            "$ref": "#/parameters/body.intake_documents"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "intake_documents"
        ]
      }
    },
    "/travel_logs": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.travel_logs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.from_property_id"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.to_property_id"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.departure_time"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.arrival_time"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.distance_km"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.equipment_cleaned"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/travel_logs"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "travel_logs"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.travel_logs"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "travel_logs"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.travel_logs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.from_property_id"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.to_property_id"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.departure_time"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.arrival_time"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.distance_km"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.equipment_cleaned"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "travel_logs"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.travel_logs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.from_property_id"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.to_property_id"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.departure_time"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.arrival_time"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.distance_km"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.equipment_cleaned"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.travel_logs.created_at"
          },
          {
            "$ref": "#/parameters/body.travel_logs"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "travel_logs"
        ]
      }
    },
    "/day_plans": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.day_plans.id"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.plan_date"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.status"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.route_data"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.total_distance_miles"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.estimated_duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.actual_start_time"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.actual_end_time"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.voice_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.auto_schedule_breaks"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/day_plans"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "day_plans"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.day_plans"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "day_plans"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.day_plans.id"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.plan_date"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.status"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.route_data"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.total_distance_miles"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.estimated_duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.actual_start_time"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.actual_end_time"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.voice_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.auto_schedule_breaks"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "day_plans"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.day_plans.id"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.plan_date"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.status"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.route_data"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.total_distance_miles"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.estimated_duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.actual_start_time"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.actual_end_time"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.voice_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.auto_schedule_breaks"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.day_plans.updated_at"
          },
          {
            "$ref": "#/parameters/body.day_plans"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "day_plans"
        ]
      }
    },
    "/dev_manifest_history": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.id"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.manifest_content"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.file_count"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.generated_by"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.branch_name"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.commit_hash"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.completion_percentage"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.voice_coverage_percentage"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/dev_manifest_history"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Stores historical project progress manifests generated by the Control Tower",
        "tags": [
          "dev_manifest_history"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.dev_manifest_history"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Stores historical project progress manifests generated by the Control Tower",
        "tags": [
          "dev_manifest_history"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.id"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.manifest_content"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.file_count"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.generated_by"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.branch_name"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.commit_hash"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.completion_percentage"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.voice_coverage_percentage"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Stores historical project progress manifests generated by the Control Tower",
        "tags": [
          "dev_manifest_history"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.id"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.manifest_content"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.file_count"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.generated_by"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.branch_name"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.commit_hash"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.completion_percentage"
          },
          {
            "$ref": "#/parameters/rowFilter.dev_manifest_history.voice_coverage_percentage"
          },
          {
            "$ref": "#/parameters/body.dev_manifest_history"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Stores historical project progress manifests generated by the Control Tower",
        "tags": [
          "dev_manifest_history"
        ]
      }
    },
    "/properties": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.properties.id"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.property_number"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.name"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.address"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.location"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.property_type"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.size_sqft"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.lot_size_acres"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.zones"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.access_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.gate_code"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.special_instructions"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.voice_navigation_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.photos"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.intake_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.reference_image_id"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.thumbnail_url"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.medium_url"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.primary_image_url"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/properties"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "properties"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.properties"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "properties"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.properties.id"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.property_number"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.name"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.address"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.location"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.property_type"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.size_sqft"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.lot_size_acres"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.zones"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.access_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.gate_code"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.special_instructions"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.voice_navigation_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.photos"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.intake_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.reference_image_id"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.thumbnail_url"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.medium_url"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.primary_image_url"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "properties"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.properties.id"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.customer_id"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.property_number"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.name"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.address"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.location"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.property_type"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.size_sqft"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.lot_size_acres"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.zones"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.access_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.gate_code"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.special_instructions"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.voice_navigation_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.photos"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.is_active"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.intake_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.reference_image_id"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.thumbnail_url"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.medium_url"
          },
          {
            "$ref": "#/parameters/rowFilter.properties.primary_image_url"
          },
          {
            "$ref": "#/parameters/body.properties"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "properties"
        ]
      }
    },
    "/maintenance_tickets": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.equipment_id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.reported_by"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.issue_type"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.severity"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.description"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.status"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.assigned_to"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.resolution_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.resolved_at"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.estimated_cost"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.actual_cost"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/maintenance_tickets"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "maintenance_tickets"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.maintenance_tickets"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "maintenance_tickets"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.equipment_id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.reported_by"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.issue_type"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.severity"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.description"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.status"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.assigned_to"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.resolution_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.resolved_at"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.estimated_cost"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.actual_cost"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "maintenance_tickets"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.equipment_id"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.reported_by"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.issue_type"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.severity"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.description"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.status"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.assigned_to"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.resolution_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.resolved_at"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.estimated_cost"
          },
          {
            "$ref": "#/parameters/rowFilter.maintenance_tickets.actual_cost"
          },
          {
            "$ref": "#/parameters/body.maintenance_tickets"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "maintenance_tickets"
        ]
      }
    },
    "/safety_checklist_completions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.checklist_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.completed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.items_completed"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.location"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.signature"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/safety_checklist_completions"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "safety_checklist_completions"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.safety_checklist_completions"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "safety_checklist_completions"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.checklist_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.completed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.items_completed"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.location"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.signature"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "safety_checklist_completions"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.checklist_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.completed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.items_completed"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.location"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.signature"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.safety_checklist_completions.created_at"
          },
          {
            "$ref": "#/parameters/body.safety_checklist_completions"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "safety_checklist_completions"
        ]
      }
    },
    "/material_requests": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.material_requests.id"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.requested_by"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.status"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.items_needed"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.reason"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.fulfilled_at"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.fulfilled_by"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.notes"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/material_requests"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "material_requests"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.material_requests"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "material_requests"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.material_requests.id"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.requested_by"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.status"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.items_needed"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.reason"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.fulfilled_at"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.fulfilled_by"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.notes"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "material_requests"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.material_requests.id"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.requested_by"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.status"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.items_needed"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.reason"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.fulfilled_at"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.fulfilled_by"
          },
          {
            "$ref": "#/parameters/rowFilter.material_requests.notes"
          },
          {
            "$ref": "#/parameters/body.material_requests"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "material_requests"
        ]
      }
    },
    "/tenants": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.tenants.id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.name"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.slug"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.status"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.plan"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.settings"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.created_by"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/tenants"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "tenants"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.tenants"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "tenants"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.tenants.id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.name"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.slug"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.status"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.plan"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.settings"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.created_by"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "tenants"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.tenants.id"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.name"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.slug"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.status"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.plan"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.settings"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.tenants.created_by"
          },
          {
            "$ref": "#/parameters/body.tenants"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "tenants"
        ]
      }
    },
    "/spatial_ref_sys": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.srid"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.auth_name"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.auth_srid"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.srtext"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.proj4text"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/spatial_ref_sys"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "spatial_ref_sys"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.spatial_ref_sys"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "spatial_ref_sys"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.srid"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.auth_name"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.auth_srid"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.srtext"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.proj4text"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "spatial_ref_sys"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.srid"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.auth_name"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.auth_srid"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.srtext"
          },
          {
            "$ref": "#/parameters/rowFilter.spatial_ref_sys.proj4text"
          },
          {
            "$ref": "#/parameters/body.spatial_ref_sys"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "spatial_ref_sys"
        ]
      }
    },
    "/job_checklist_items": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.sequence_number"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.item_type"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.item_id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.item_name"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.container_id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.status"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.vlm_prompt"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.acceptance_criteria"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/job_checklist_items"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "job_checklist_items"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.job_checklist_items"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "job_checklist_items"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.sequence_number"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.item_type"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.item_id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.item_name"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.container_id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.status"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.vlm_prompt"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.acceptance_criteria"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "job_checklist_items"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.sequence_number"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.item_type"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.item_id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.item_name"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.container_id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.status"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.vlm_prompt"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.acceptance_criteria"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.job_checklist_items.updated_at"
          },
          {
            "$ref": "#/parameters/body.job_checklist_items"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "job_checklist_items"
        ]
      }
    },
    "/mfa_settings": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.id"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.primary_method"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.backup_methods"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.totp_secret"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.totp_backup_codes"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.sms_phone"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.email_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.voice_biometric_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.voice_pattern_samples"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.recovery_codes_generated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.last_used_at"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.failed_attempts"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.locked_until"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.settings"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/mfa_settings"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Multi-factor authentication configuration",
        "tags": [
          "mfa_settings"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.mfa_settings"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Multi-factor authentication configuration",
        "tags": [
          "mfa_settings"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.id"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.primary_method"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.backup_methods"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.totp_secret"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.totp_backup_codes"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.sms_phone"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.email_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.voice_biometric_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.voice_pattern_samples"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.recovery_codes_generated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.last_used_at"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.failed_attempts"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.locked_until"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.settings"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Multi-factor authentication configuration",
        "tags": [
          "mfa_settings"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.id"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.primary_method"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.backup_methods"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.totp_secret"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.totp_backup_codes"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.sms_phone"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.email_verified"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.voice_biometric_enabled"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.voice_pattern_samples"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.recovery_codes_generated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.last_used_at"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.failed_attempts"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.locked_until"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.settings"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_settings.updated_at"
          },
          {
            "$ref": "#/parameters/body.mfa_settings"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Multi-factor authentication configuration",
        "tags": [
          "mfa_settings"
        ]
      }
    },
    "/kit_items": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.kit_items.id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.kit_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.item_type"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.unit"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.is_required"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/kit_items"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "kit_items"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.kit_items"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "kit_items"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.kit_items.id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.kit_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.item_type"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.unit"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.is_required"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "kit_items"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.kit_items.id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.kit_id"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.item_type"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.unit"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.is_required"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.kit_items.updated_at"
          },
          {
            "$ref": "#/parameters/body.kit_items"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "kit_items"
        ]
      }
    },
    "/routing_schedules": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.id"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.scheduled_date"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.job_ids"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.total_distance_meters"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.total_duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.route_geometry"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.optimization_status"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.mapbox_route_geometry"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.error_message"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.start_location_lat"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.start_location_lng"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.total_duration_seconds"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.waypoints"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/routing_schedules"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "routing_schedules"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.routing_schedules"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "routing_schedules"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.id"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.scheduled_date"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.job_ids"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.total_distance_meters"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.total_duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.route_geometry"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.optimization_status"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.mapbox_route_geometry"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.error_message"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.start_location_lat"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.start_location_lng"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.total_duration_seconds"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.waypoints"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "routing_schedules"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.id"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.scheduled_date"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.job_ids"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.total_distance_meters"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.total_duration_minutes"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.route_geometry"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.optimization_status"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.mapbox_route_geometry"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.error_message"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.start_location_lat"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.start_location_lng"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.total_duration_seconds"
          },
          {
            "$ref": "#/parameters/rowFilter.routing_schedules.waypoints"
          },
          {
            "$ref": "#/parameters/body.routing_schedules"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "routing_schedules"
        ]
      }
    },
    "/inventory_images": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.inventory_images.id"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.item_type"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.item_id"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.thumbnail_url"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.is_primary"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.angle"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.aspect_ratio"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.original_width"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.original_height"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.crop_box"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.captured_by"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.captured_at"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/inventory_images"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Stores reference images for inventory items (equipment and materials)",
        "tags": [
          "inventory_images"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.inventory_images"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Stores reference images for inventory items (equipment and materials)",
        "tags": [
          "inventory_images"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.inventory_images.id"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.item_type"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.item_id"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.thumbnail_url"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.is_primary"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.angle"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.aspect_ratio"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.original_width"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.original_height"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.crop_box"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.captured_by"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.captured_at"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Stores reference images for inventory items (equipment and materials)",
        "tags": [
          "inventory_images"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.inventory_images.id"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.item_type"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.item_id"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.thumbnail_url"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.is_primary"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.angle"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.aspect_ratio"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.original_width"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.original_height"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.crop_box"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.captured_by"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.captured_at"
          },
          {
            "$ref": "#/parameters/rowFilter.inventory_images.created_at"
          },
          {
            "$ref": "#/parameters/body.inventory_images"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Stores reference images for inventory items (equipment and materials)",
        "tags": [
          "inventory_images"
        ]
      }
    },
    "/equipment_incidents": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.reported_by"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.incident_type"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.equipment_item"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.description"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.severity"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.status"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/equipment_incidents"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "equipment_incidents"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.equipment_incidents"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "equipment_incidents"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.reported_by"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.incident_type"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.equipment_item"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.description"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.severity"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.status"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "equipment_incidents"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.reported_by"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.incident_type"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.equipment_item"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.description"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.verification_id"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.severity"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.status"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.equipment_incidents.updated_at"
          },
          {
            "$ref": "#/parameters/body.equipment_incidents"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "equipment_incidents"
        ]
      }
    },
    "/notification_queue": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.notification_queue.id"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.recipient_id"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.type"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.message"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.data"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.method"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.status"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.attempts"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.last_attempt_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.delivered_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.error"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/notification_queue"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "notification_queue"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.notification_queue"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "notification_queue"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.notification_queue.id"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.recipient_id"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.type"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.message"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.data"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.method"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.status"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.attempts"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.last_attempt_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.delivered_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.error"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "notification_queue"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.notification_queue.id"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.recipient_id"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.type"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.priority"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.message"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.data"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.method"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.status"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.attempts"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.last_attempt_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.delivered_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.error"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.notification_queue.updated_at"
          },
          {
            "$ref": "#/parameters/body.notification_queue"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "notification_queue"
        ]
      }
    },
    "/mfa_challenges": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.id"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.challenge_id"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.method"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.challenge_data"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.attempts"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.max_attempts"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.completed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.success"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.ip_address"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.user_agent"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.created_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/mfa_challenges"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Active MFA challenges and verification attempts",
        "tags": [
          "mfa_challenges"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.mfa_challenges"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Active MFA challenges and verification attempts",
        "tags": [
          "mfa_challenges"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.id"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.challenge_id"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.method"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.challenge_data"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.attempts"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.max_attempts"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.completed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.success"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.ip_address"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.user_agent"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.created_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Active MFA challenges and verification attempts",
        "tags": [
          "mfa_challenges"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.id"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.challenge_id"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.method"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.challenge_data"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.attempts"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.max_attempts"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.completed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.success"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.ip_address"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.user_agent"
          },
          {
            "$ref": "#/parameters/rowFilter.mfa_challenges.created_at"
          },
          {
            "$ref": "#/parameters/body.mfa_challenges"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Active MFA challenges and verification attempts",
        "tags": [
          "mfa_challenges"
        ]
      }
    },
    "/user_sessions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_sessions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.session_token"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.refresh_token_hash"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.device_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.device_name"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.device_type"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.device_fingerprint"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.ip_address"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.user_agent"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.location"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.voice_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.voice_session_active"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.voice_session_expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.wake_word_active"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.conversation_context"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.status"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.last_activity_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.security_flags"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.refresh_count"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.ended_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.voice_session_terminated"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/user_sessions"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "Active user sessions with device tracking and voice support",
        "tags": [
          "user_sessions"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.user_sessions"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "Active user sessions with device tracking and voice support",
        "tags": [
          "user_sessions"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_sessions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.session_token"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.refresh_token_hash"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.device_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.device_name"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.device_type"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.device_fingerprint"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.ip_address"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.user_agent"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.location"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.voice_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.voice_session_active"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.voice_session_expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.wake_word_active"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.conversation_context"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.status"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.last_activity_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.security_flags"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.refresh_count"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.ended_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.voice_session_terminated"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Active user sessions with device tracking and voice support",
        "tags": [
          "user_sessions"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.user_sessions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.session_token"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.refresh_token_hash"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.device_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.device_name"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.device_type"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.device_fingerprint"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.ip_address"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.user_agent"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.location"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.voice_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.voice_session_active"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.voice_session_expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.wake_word_active"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.conversation_context"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.status"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.expires_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.last_activity_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.security_flags"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.refresh_count"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.ended_at"
          },
          {
            "$ref": "#/parameters/rowFilter.user_sessions.voice_session_terminated"
          },
          {
            "$ref": "#/parameters/body.user_sessions"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Active user sessions with device tracking and voice support",
        "tags": [
          "user_sessions"
        ]
      }
    },
    "/item_transactions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.item_transactions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.transaction_type"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.item_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.from_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.to_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.from_user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.to_user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.purchase_order_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.work_order_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.cost"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.reason"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.voice_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.detection_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.confidence_score"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.created_by"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/item_transactions"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "item_transactions"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.item_transactions"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "item_transactions"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.item_transactions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.transaction_type"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.item_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.from_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.to_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.from_user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.to_user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.purchase_order_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.work_order_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.cost"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.reason"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.voice_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.detection_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.confidence_score"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.created_by"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "item_transactions"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.item_transactions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.transaction_type"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.item_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.from_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.to_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.from_user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.to_user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.purchase_order_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.work_order_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.cost"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.notes"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.reason"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.voice_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.detection_session_id"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.confidence_score"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.metadata"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.item_transactions.created_by"
          },
          {
            "$ref": "#/parameters/body.item_transactions"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "item_transactions"
        ]
      }
    },
    "/ocr_jobs": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.vendor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.status"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.completed_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/ocr_jobs"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "ocr_jobs"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.ocr_jobs"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "ocr_jobs"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.vendor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.status"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.completed_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "ocr_jobs"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.vendor_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.status"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_jobs.completed_at"
          },
          {
            "$ref": "#/parameters/body.ocr_jobs"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "ocr_jobs"
        ]
      }
    },
    "/permissions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.permissions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.name"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.resource"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.action"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.description"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.voice_commands"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.requires_confirmation"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.risk_level"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.updated_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/permissions"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "summary": "System permissions for role-based access control",
        "tags": [
          "permissions"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.permissions"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "summary": "System permissions for role-based access control",
        "tags": [
          "permissions"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.permissions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.name"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.resource"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.action"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.description"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.voice_commands"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.requires_confirmation"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.risk_level"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.updated_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "System permissions for role-based access control",
        "tags": [
          "permissions"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.permissions.id"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.name"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.resource"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.action"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.description"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.voice_commands"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.requires_confirmation"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.risk_level"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.permissions.updated_at"
          },
          {
            "$ref": "#/parameters/body.permissions"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "System permissions for role-based access control",
        "tags": [
          "permissions"
        ]
      }
    },
    "/ocr_line_items": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.ocr_document_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.line_index"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.sku"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.description"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.qty"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.unit_price"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.total"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/ocr_line_items"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "ocr_line_items"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.ocr_line_items"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "ocr_line_items"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.ocr_document_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.line_index"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.sku"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.description"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.qty"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.unit_price"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.total"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "ocr_line_items"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.ocr_document_id"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.line_index"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.sku"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.description"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.qty"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.unit_price"
          },
          {
            "$ref": "#/parameters/rowFilter.ocr_line_items.total"
          },
          {
            "$ref": "#/parameters/body.ocr_line_items"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "ocr_line_items"
        ]
      }
    },
    "/job_reschedules": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.original_job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.original_date"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.new_date"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.reason"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.rescheduled_by"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.status"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.customer_notified"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.confirmed_at"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/job_reschedules"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "job_reschedules"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.job_reschedules"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "job_reschedules"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.original_job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.original_date"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.new_date"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.reason"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.rescheduled_by"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.status"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.customer_notified"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.confirmed_at"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "job_reschedules"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.original_job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.original_date"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.new_date"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.reason"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.rescheduled_by"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.status"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.customer_notified"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.job_reschedules.confirmed_at"
          },
          {
            "$ref": "#/parameters/body.job_reschedules"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "job_reschedules"
        ]
      }
    },
    "/companies": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.companies.id"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.name"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.domain"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.is_active"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/companies"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "companies"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.companies"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "companies"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.companies.id"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.name"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.domain"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.is_active"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "companies"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.companies.id"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.name"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.domain"
          },
          {
            "$ref": "#/parameters/rowFilter.companies.is_active"
          },
          {
            "$ref": "#/parameters/body.companies"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "companies"
        ]
      }
    },
    "/items": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.items.id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.item_type"
          },
          {
            "$ref": "#/parameters/rowFilter.items.category"
          },
          {
            "$ref": "#/parameters/rowFilter.items.tracking_mode"
          },
          {
            "$ref": "#/parameters/rowFilter.items.name"
          },
          {
            "$ref": "#/parameters/rowFilter.items.description"
          },
          {
            "$ref": "#/parameters/rowFilter.items.manufacturer"
          },
          {
            "$ref": "#/parameters/rowFilter.items.model"
          },
          {
            "$ref": "#/parameters/rowFilter.items.serial_number"
          },
          {
            "$ref": "#/parameters/rowFilter.items.sku"
          },
          {
            "$ref": "#/parameters/rowFilter.items.barcode"
          },
          {
            "$ref": "#/parameters/rowFilter.items.current_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.items.unit_of_measure"
          },
          {
            "$ref": "#/parameters/rowFilter.items.min_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.items.max_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.items.reorder_point"
          },
          {
            "$ref": "#/parameters/rowFilter.items.current_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.home_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.assigned_to_user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.assigned_to_job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.status"
          },
          {
            "$ref": "#/parameters/rowFilter.items.condition"
          },
          {
            "$ref": "#/parameters/rowFilter.items.last_maintenance_date"
          },
          {
            "$ref": "#/parameters/rowFilter.items.next_maintenance_date"
          },
          {
            "$ref": "#/parameters/rowFilter.items.purchase_date"
          },
          {
            "$ref": "#/parameters/rowFilter.items.purchase_price"
          },
          {
            "$ref": "#/parameters/rowFilter.items.current_value"
          },
          {
            "$ref": "#/parameters/rowFilter.items.depreciation_method"
          },
          {
            "$ref": "#/parameters/rowFilter.items.attributes"
          },
          {
            "$ref": "#/parameters/rowFilter.items.tags"
          },
          {
            "$ref": "#/parameters/rowFilter.items.custom_fields"
          },
          {
            "$ref": "#/parameters/rowFilter.items.primary_image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.items.image_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.items.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.items.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.items.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.items.updated_by"
          },
          {
            "$ref": "#/parameters/rowFilter.items.thumbnail_url"
          },
          {
            "$ref": "#/parameters/rowFilter.items.medium_url"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/items"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "items"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.items"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "items"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.items.id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.item_type"
          },
          {
            "$ref": "#/parameters/rowFilter.items.category"
          },
          {
            "$ref": "#/parameters/rowFilter.items.tracking_mode"
          },
          {
            "$ref": "#/parameters/rowFilter.items.name"
          },
          {
            "$ref": "#/parameters/rowFilter.items.description"
          },
          {
            "$ref": "#/parameters/rowFilter.items.manufacturer"
          },
          {
            "$ref": "#/parameters/rowFilter.items.model"
          },
          {
            "$ref": "#/parameters/rowFilter.items.serial_number"
          },
          {
            "$ref": "#/parameters/rowFilter.items.sku"
          },
          {
            "$ref": "#/parameters/rowFilter.items.barcode"
          },
          {
            "$ref": "#/parameters/rowFilter.items.current_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.items.unit_of_measure"
          },
          {
            "$ref": "#/parameters/rowFilter.items.min_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.items.max_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.items.reorder_point"
          },
          {
            "$ref": "#/parameters/rowFilter.items.current_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.home_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.assigned_to_user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.assigned_to_job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.status"
          },
          {
            "$ref": "#/parameters/rowFilter.items.condition"
          },
          {
            "$ref": "#/parameters/rowFilter.items.last_maintenance_date"
          },
          {
            "$ref": "#/parameters/rowFilter.items.next_maintenance_date"
          },
          {
            "$ref": "#/parameters/rowFilter.items.purchase_date"
          },
          {
            "$ref": "#/parameters/rowFilter.items.purchase_price"
          },
          {
            "$ref": "#/parameters/rowFilter.items.current_value"
          },
          {
            "$ref": "#/parameters/rowFilter.items.depreciation_method"
          },
          {
            "$ref": "#/parameters/rowFilter.items.attributes"
          },
          {
            "$ref": "#/parameters/rowFilter.items.tags"
          },
          {
            "$ref": "#/parameters/rowFilter.items.custom_fields"
          },
          {
            "$ref": "#/parameters/rowFilter.items.primary_image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.items.image_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.items.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.items.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.items.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.items.updated_by"
          },
          {
            "$ref": "#/parameters/rowFilter.items.thumbnail_url"
          },
          {
            "$ref": "#/parameters/rowFilter.items.medium_url"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "items"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.items.id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.item_type"
          },
          {
            "$ref": "#/parameters/rowFilter.items.category"
          },
          {
            "$ref": "#/parameters/rowFilter.items.tracking_mode"
          },
          {
            "$ref": "#/parameters/rowFilter.items.name"
          },
          {
            "$ref": "#/parameters/rowFilter.items.description"
          },
          {
            "$ref": "#/parameters/rowFilter.items.manufacturer"
          },
          {
            "$ref": "#/parameters/rowFilter.items.model"
          },
          {
            "$ref": "#/parameters/rowFilter.items.serial_number"
          },
          {
            "$ref": "#/parameters/rowFilter.items.sku"
          },
          {
            "$ref": "#/parameters/rowFilter.items.barcode"
          },
          {
            "$ref": "#/parameters/rowFilter.items.current_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.items.unit_of_measure"
          },
          {
            "$ref": "#/parameters/rowFilter.items.min_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.items.max_quantity"
          },
          {
            "$ref": "#/parameters/rowFilter.items.reorder_point"
          },
          {
            "$ref": "#/parameters/rowFilter.items.current_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.home_location_id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.assigned_to_user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.assigned_to_job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.items.status"
          },
          {
            "$ref": "#/parameters/rowFilter.items.condition"
          },
          {
            "$ref": "#/parameters/rowFilter.items.last_maintenance_date"
          },
          {
            "$ref": "#/parameters/rowFilter.items.next_maintenance_date"
          },
          {
            "$ref": "#/parameters/rowFilter.items.purchase_date"
          },
          {
            "$ref": "#/parameters/rowFilter.items.purchase_price"
          },
          {
            "$ref": "#/parameters/rowFilter.items.current_value"
          },
          {
            "$ref": "#/parameters/rowFilter.items.depreciation_method"
          },
          {
            "$ref": "#/parameters/rowFilter.items.attributes"
          },
          {
            "$ref": "#/parameters/rowFilter.items.tags"
          },
          {
            "$ref": "#/parameters/rowFilter.items.custom_fields"
          },
          {
            "$ref": "#/parameters/rowFilter.items.primary_image_url"
          },
          {
            "$ref": "#/parameters/rowFilter.items.image_urls"
          },
          {
            "$ref": "#/parameters/rowFilter.items.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.items.created_by"
          },
          {
            "$ref": "#/parameters/rowFilter.items.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.items.updated_by"
          },
          {
            "$ref": "#/parameters/rowFilter.items.thumbnail_url"
          },
          {
            "$ref": "#/parameters/rowFilter.items.medium_url"
          },
          {
            "$ref": "#/parameters/body.items"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "items"
        ]
      }
    },
    "/workflow_tasks": {
      "get": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.id"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.task_description"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.task_order"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.status"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.completed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.completed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.verification_photo_url"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.ai_confidence"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.requires_supervisor_review"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.supervisor_approved"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.supervisor_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.verification_method"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.verification_data"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.requires_supervisor_approval"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.task_type"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.supervisor_id"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/order"
          },
          {
            "$ref": "#/parameters/range"
          },
          {
            "$ref": "#/parameters/rangeUnit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/preferCount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/workflow_tasks"
              },
              "type": "array"
            }
          },
          "206": {
            "description": "Partial Content"
          }
        },
        "tags": [
          "workflow_tasks"
        ]
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/body.workflow_tasks"
          },
          {
            "$ref": "#/parameters/select"
          },
          {
            "$ref": "#/parameters/preferPost"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "tags": [
          "workflow_tasks"
        ]
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.id"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.task_description"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.task_order"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.status"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.completed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.completed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.verification_photo_url"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.ai_confidence"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.requires_supervisor_review"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.supervisor_approved"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.supervisor_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.verification_method"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.verification_data"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.requires_supervisor_approval"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.task_type"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.supervisor_id"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "workflow_tasks"
        ]
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.id"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.tenant_id"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.job_id"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.task_description"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.task_order"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.status"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.completed_by"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.completed_at"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.verification_photo_url"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.ai_confidence"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.requires_supervisor_review"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.supervisor_approved"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.supervisor_notes"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.created_at"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.updated_at"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.verification_method"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.verification_data"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.requires_supervisor_approval"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.user_id"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.task_type"
          },
          {
            "$ref": "#/parameters/rowFilter.workflow_tasks.supervisor_id"
          },
          {
            "$ref": "#/parameters/body.workflow_tasks"
          },
          {
            "$ref": "#/parameters/preferReturn"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "workflow_tasks"
        ]
      }
    },
    "/rpc/_st_dwithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": true,
            "type": "number"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_spheroid",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_dwithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geog1": {
                  "format": "public.geography",
                  "type": "string"
                },
                "geog2": {
                  "format": "public.geography",
                  "type": "string"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                },
                "use_spheroid": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geog1",
                "geog2",
                "tolerance"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_dwithin"
        ]
      }
    },
    "/rpc/st_covers": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_covers"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_covers"
        ]
      }
    },
    "/rpc/st_asmvtgeom": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.box2d",
            "in": "query",
            "name": "bounds",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "extent",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "buffer",
            "required": false,
            "type": "integer"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "clip_geom",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asmvtgeom"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "bounds": {
                  "format": "public.box2d",
                  "type": "string"
                },
                "buffer": {
                  "format": "integer",
                  "type": "integer"
                },
                "clip_geom": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "extent": {
                  "format": "integer",
                  "type": "integer"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom",
                "bounds"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asmvtgeom"
        ]
      }
    },
    "/rpc/postgis_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns PostGIS version number and compile-time options.",
        "tags": [
          "(rpc) postgis_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns PostGIS version number and compile-time options.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns PostGIS version number and compile-time options.",
        "tags": [
          "(rpc) postgis_version"
        ]
      }
    },
    "/rpc/st_forcesfs": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, version - Force the geometries to use SFS 1.1 geometry types only.",
        "tags": [
          "(rpc) st_forcesfs"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, version - Force the geometries to use SFS 1.1 geometry types only.",
              "properties": {
                "": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "version": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "",
                "version"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, version - Force the geometries to use SFS 1.1 geometry types only.",
        "tags": [
          "(rpc) st_forcesfs"
        ]
      }
    },
    "/rpc/postgis_svn_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_svn_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_svn_version"
        ]
      }
    },
    "/rpc/geometry_lt": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_lt"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_lt"
        ]
      }
    },
    "/rpc/st_split": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: input, blade - Returns a collection of geometries created by splitting a geometry by another geometry.",
        "tags": [
          "(rpc) st_split"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: input, blade - Returns a collection of geometries created by splitting a geometry by another geometry.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: input, blade - Returns a collection of geometries created by splitting a geometry by another geometry.",
        "tags": [
          "(rpc) st_split"
        ]
      }
    },
    "/rpc/enablelongtransactions": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Enables long transaction support.",
        "tags": [
          "(rpc) enablelongtransactions"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Enables long transaction support.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Enables long transaction support.",
        "tags": [
          "(rpc) enablelongtransactions"
        ]
      }
    },
    "/rpc/st_within": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_within"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_within"
        ]
      }
    },
    "/rpc/st_aslatlontext": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "tmpl",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_aslatlontext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "tmpl": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_aslatlontext"
        ]
      }
    },
    "/rpc/st_3ddwithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_3ddwithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_3ddwithin"
        ]
      }
    },
    "/rpc/postgis_lib_build_date": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns build date of the PostGIS library.",
        "tags": [
          "(rpc) postgis_lib_build_date"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns build date of the PostGIS library.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns build date of the PostGIS library.",
        "tags": [
          "(rpc) postgis_lib_build_date"
        ]
      }
    },
    "/rpc/st_geomfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromwkb"
        ]
      }
    },
    "/rpc/st_3dlongestline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D longest line between two geometries",
        "tags": [
          "(rpc) st_3dlongestline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Returns the 3D longest line between two geometries",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D longest line between two geometries",
        "tags": [
          "(rpc) st_3dlongestline"
        ]
      }
    },
    "/rpc/postgis_type_name": {
      "get": {
        "parameters": [
          {
            "format": "character varying",
            "in": "query",
            "name": "geomname",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "coord_dimension",
            "required": true,
            "type": "integer"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_new_name",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_type_name"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "coord_dimension": {
                  "format": "integer",
                  "type": "integer"
                },
                "geomname": {
                  "format": "character varying",
                  "type": "string"
                },
                "use_new_name": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geomname",
                "coord_dimension"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_type_name"
        ]
      }
    },
    "/rpc/st_linestringfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linestringfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linestringfromwkb"
        ]
      }
    },
    "/rpc/addauth": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: auth_token - Adds an authorization token to be used in the current transaction.",
        "tags": [
          "(rpc) addauth"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: auth_token - Adds an authorization token to be used in the current transaction.",
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: auth_token - Adds an authorization token to be used in the current transaction.",
        "tags": [
          "(rpc) addauth"
        ]
      }
    },
    "/rpc/st_minimumboundingradius": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Returns the center point and radius of the smallest circle that contains a geometry.",
        "tags": [
          "(rpc) st_minimumboundingradius"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom - Returns the center point and radius of the smallest circle that contains a geometry.",
              "properties": {
                "": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Returns the center point and radius of the smallest circle that contains a geometry.",
        "tags": [
          "(rpc) st_minimumboundingradius"
        ]
      }
    },
    "/rpc/st_distancesphere": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "radius",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomlonlatA, geomlonlatB, radius=6371008 - Returns minimum distance in meters between two lon/lat geometries using a spherical earth model.",
        "tags": [
          "(rpc) st_distancesphere"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomlonlatA, geomlonlatB, radius=6371008 - Returns minimum distance in meters between two lon/lat geometries using a spherical earth model.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "radius": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom1",
                "geom2",
                "radius"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomlonlatA, geomlonlatB, radius=6371008 - Returns minimum distance in meters between two lon/lat geometries using a spherical earth model.",
        "tags": [
          "(rpc) st_distancesphere"
        ]
      }
    },
    "/rpc/st_distancespheroid": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.spheroid",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomlonlatA, geomlonlatB, measurement_spheroid=WGS84 - Returns the minimum distance between two lon/lat geometries using a spheroidal earth model.",
        "tags": [
          "(rpc) st_distancespheroid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomlonlatA, geomlonlatB, measurement_spheroid=WGS84 - Returns the minimum distance between two lon/lat geometries using a spheroidal earth model.",
              "properties": {
                "": {
                  "format": "public.spheroid",
                  "type": "string"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomlonlatA, geomlonlatB, measurement_spheroid=WGS84 - Returns the minimum distance between two lon/lat geometries using a spheroidal earth model.",
        "tags": [
          "(rpc) st_distancespheroid"
        ]
      }
    },
    "/rpc/st_mlinefromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mlinefromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mlinefromtext"
        ]
      }
    },
    "/rpc/st_srid": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1 - Returns the spatial reference identifier for a geometry.",
        "tags": [
          "(rpc) st_srid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1 - Returns the spatial reference identifier for a geometry.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1 - Returns the spatial reference identifier for a geometry.",
        "tags": [
          "(rpc) st_srid"
        ]
      }
    },
    "/rpc/_postgis_stats": {
      "get": {
        "parameters": [
          {
            "format": "regclass",
            "in": "query",
            "name": "tbl",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "att_name",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_stats"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                },
                "att_name": {
                  "format": "text",
                  "type": "string"
                },
                "tbl": {
                  "format": "regclass",
                  "type": "string"
                }
              },
              "required": [
                "tbl",
                "att_name"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_stats"
        ]
      }
    },
    "/rpc/geometry_distance_centroid": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_distance_centroid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_distance_centroid"
        ]
      }
    },
    "/rpc/st_project": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "distance",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "azimuth",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, distance, azimuth - Returns a point projected from a start point by a distance and bearing (azimuth).",
        "tags": [
          "(rpc) st_project"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, distance, azimuth - Returns a point projected from a start point by a distance and bearing (azimuth).",
              "properties": {
                "azimuth": {
                  "format": "double precision",
                  "type": "number"
                },
                "distance": {
                  "format": "double precision",
                  "type": "number"
                },
                "geog": {
                  "format": "public.geography",
                  "type": "string"
                }
              },
              "required": [
                "geog",
                "distance",
                "azimuth"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, distance, azimuth - Returns a point projected from a start point by a distance and bearing (azimuth).",
        "tags": [
          "(rpc) st_project"
        ]
      }
    },
    "/rpc/st_asencodedpolyline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "nprecision",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asencodedpolyline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "nprecision": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asencodedpolyline"
        ]
      }
    },
    "/rpc/st_linefromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linefromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linefromwkb"
        ]
      }
    },
    "/rpc/archive_old_audit_logs": {
      "get": {
        "parameters": [
          {
            "format": "integer",
            "in": "query",
            "name": "p_archive_days",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) archive_old_audit_logs"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_archive_days": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) archive_old_audit_logs"
        ]
      }
    },
    "/rpc/st_geomfromewkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromewkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromewkb"
        ]
      }
    },
    "/rpc/st_voronoilines": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g1",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": false,
            "type": "number"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "extend_to",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, tolerance, extend_to - Returns the boundaries of the Voronoi diagram of the vertices of a geometry.",
        "tags": [
          "(rpc) st_voronoilines"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, tolerance, extend_to - Returns the boundaries of the Voronoi diagram of the vertices of a geometry.",
              "properties": {
                "extend_to": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "g1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "g1"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, tolerance, extend_to - Returns the boundaries of the Voronoi diagram of the vertices of a geometry.",
        "tags": [
          "(rpc) st_voronoilines"
        ]
      }
    },
    "/rpc/addgeometrycolumn": {
      "get": {
        "parameters": [
          {
            "format": "character varying",
            "in": "query",
            "name": "catalog_name",
            "required": true,
            "type": "string"
          },
          {
            "format": "character varying",
            "in": "query",
            "name": "schema_name",
            "required": true,
            "type": "string"
          },
          {
            "format": "character varying",
            "in": "query",
            "name": "table_name",
            "required": true,
            "type": "string"
          },
          {
            "format": "character varying",
            "in": "query",
            "name": "column_name",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "new_srid_in",
            "required": true,
            "type": "integer"
          },
          {
            "format": "character varying",
            "in": "query",
            "name": "new_type",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "new_dim",
            "required": true,
            "type": "integer"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_typmod",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: catalog_name, schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table.",
        "tags": [
          "(rpc) addgeometrycolumn"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: catalog_name, schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table.",
              "properties": {
                "catalog_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "column_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "new_dim": {
                  "format": "integer",
                  "type": "integer"
                },
                "new_srid_in": {
                  "format": "integer",
                  "type": "integer"
                },
                "new_type": {
                  "format": "character varying",
                  "type": "string"
                },
                "schema_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "table_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "use_typmod": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "catalog_name",
                "schema_name",
                "table_name",
                "column_name",
                "new_srid_in",
                "new_type",
                "new_dim"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: catalog_name, schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table.",
        "tags": [
          "(rpc) addgeometrycolumn"
        ]
      }
    },
    "/rpc/st_hasarc": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geometry",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA - Tests if a geometry contains a circular arc",
        "tags": [
          "(rpc) st_hasarc"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA - Tests if a geometry contains a circular arc",
              "properties": {
                "geometry": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geometry"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA - Tests if a geometry contains a circular arc",
        "tags": [
          "(rpc) st_hasarc"
        ]
      }
    },
    "/rpc/st_mpointfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpointfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpointfromwkb"
        ]
      }
    },
    "/rpc/updategeometrysrid": {
      "get": {
        "parameters": [
          {
            "format": "character varying",
            "in": "query",
            "name": "catalogn_name",
            "required": true,
            "type": "string"
          },
          {
            "format": "character varying",
            "in": "query",
            "name": "schema_name",
            "required": true,
            "type": "string"
          },
          {
            "format": "character varying",
            "in": "query",
            "name": "table_name",
            "required": true,
            "type": "string"
          },
          {
            "format": "character varying",
            "in": "query",
            "name": "column_name",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "new_srid_in",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, and the table metadata.",
        "tags": [
          "(rpc) updategeometrysrid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, and the table metadata.",
              "properties": {
                "catalogn_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "column_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "new_srid_in": {
                  "format": "integer",
                  "type": "integer"
                },
                "schema_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "table_name": {
                  "format": "character varying",
                  "type": "string"
                }
              },
              "required": [
                "catalogn_name",
                "schema_name",
                "table_name",
                "column_name",
                "new_srid_in"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, and the table metadata.",
        "tags": [
          "(rpc) updategeometrysrid"
        ]
      }
    },
    "/rpc/calculate_session_risk_score": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_user_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "inet",
            "in": "query",
            "name": "p_ip_address",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "p_device_fingerprint",
            "required": false,
            "type": "string"
          },
          {
            "format": "jsonb",
            "in": "query",
            "name": "p_location",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Calculates security risk score for user sessions based on behavior patterns",
        "tags": [
          "(rpc) calculate_session_risk_score"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Calculates security risk score for user sessions based on behavior patterns",
              "properties": {
                "p_device_fingerprint": {
                  "format": "text",
                  "type": "string"
                },
                "p_ip_address": {
                  "format": "inet",
                  "type": "string"
                },
                "p_location": {
                  "format": "jsonb"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id",
                "p_ip_address"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Calculates security risk score for user sessions based on behavior patterns",
        "tags": [
          "(rpc) calculate_session_risk_score"
        ]
      }
    },
    "/rpc/st_removerepeatedpoints": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, tolerance - Returns a version of a geometry with duplicate points removed.",
        "tags": [
          "(rpc) st_removerepeatedpoints"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, tolerance - Returns a version of a geometry with duplicate points removed.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, tolerance - Returns a version of a geometry with duplicate points removed.",
        "tags": [
          "(rpc) st_removerepeatedpoints"
        ]
      }
    },
    "/rpc/st_geomfromgml": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromgml"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromgml"
        ]
      }
    },
    "/rpc/st_interpolatepoint": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "line",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "point",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: linear_geom_with_measure, point - Returns the interpolated measure of a geometry closest to a point.",
        "tags": [
          "(rpc) st_interpolatepoint"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: linear_geom_with_measure, point - Returns the interpolated measure of a geometry closest to a point.",
              "properties": {
                "line": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "point": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "line",
                "point"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: linear_geom_with_measure, point - Returns the interpolated measure of a geometry closest to a point.",
        "tags": [
          "(rpc) st_interpolatepoint"
        ]
      }
    },
    "/rpc/geometry_ge": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_ge"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_ge"
        ]
      }
    },
    "/rpc/st_linefromencodedpolyline": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "txtin",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "nprecision",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linefromencodedpolyline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "nprecision": {
                  "format": "integer",
                  "type": "integer"
                },
                "txtin": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "txtin"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linefromencodedpolyline"
        ]
      }
    },
    "/rpc/geometry_contains_3d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_contains_3d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_contains_3d"
        ]
      }
    },
    "/rpc/st_distance": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog2",
            "required": true,
            "type": "string"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_spheroid",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog1, geog2, use_spheroid=true - Returns the distance between two geometry or geography values.",
        "tags": [
          "(rpc) st_distance"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geog1, geog2, use_spheroid=true - Returns the distance between two geometry or geography values.",
              "properties": {
                "geog1": {
                  "format": "public.geography",
                  "type": "string"
                },
                "geog2": {
                  "format": "public.geography",
                  "type": "string"
                },
                "use_spheroid": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geog1",
                "geog2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog1, geog2, use_spheroid=true - Returns the distance between two geometry or geography values.",
        "tags": [
          "(rpc) st_distance"
        ]
      }
    },
    "/rpc/geometry_overabove": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overabove"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overabove"
        ]
      }
    },
    "/rpc/geography": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geography"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geography"
        ]
      }
    },
    "/rpc/st_squaregrid": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "size",
            "required": true,
            "type": "number"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "bounds",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, bounds - Returns a set of grid squares and cell indices that completely cover the bounds of the geometry argument.",
        "tags": [
          "(rpc) st_squaregrid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: size, bounds - Returns a set of grid squares and cell indices that completely cover the bounds of the geometry argument.",
              "properties": {
                "bounds": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "size": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "size",
                "bounds"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, bounds - Returns a set of grid squares and cell indices that completely cover the bounds of the geometry argument.",
        "tags": [
          "(rpc) st_squaregrid"
        ]
      }
    },
    "/rpc/st_crosses": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_crosses"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_crosses"
        ]
      }
    },
    "/rpc/st_multipointfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipointfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipointfromwkb"
        ]
      }
    },
    "/rpc/st_subdivide": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "maxvertices",
            "required": false,
            "type": "integer"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "gridsize",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, max_vertices=256, gridSize = -1 - Computes a rectilinear subdivision of a geometry.",
        "tags": [
          "(rpc) st_subdivide"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, max_vertices=256, gridSize = -1 - Computes a rectilinear subdivision of a geometry.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "gridsize": {
                  "format": "double precision",
                  "type": "number"
                },
                "maxvertices": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, max_vertices=256, gridSize = -1 - Computes a rectilinear subdivision of a geometry.",
        "tags": [
          "(rpc) st_subdivide"
        ]
      }
    },
    "/rpc/st_polyfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polyfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polyfromwkb"
        ]
      }
    },
    "/rpc/is_system_admin": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) is_system_admin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) is_system_admin"
        ]
      }
    },
    "/rpc/st_polygonfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polygonfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polygonfromwkb"
        ]
      }
    },
    "/rpc/st_coveredby": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_coveredby"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_coveredby"
        ]
      }
    },
    "/rpc/longtransactionsenabled": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) longtransactionsenabled"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) longtransactionsenabled"
        ]
      }
    },
    "/rpc/st_offsetcurve": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "line",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "distance",
            "required": true,
            "type": "number"
          },
          {
            "format": "text",
            "in": "query",
            "name": "params",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: line, signed_distance, style_parameters=' - Returns an offset line at a given distance and side from an input line.",
        "tags": [
          "(rpc) st_offsetcurve"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: line, signed_distance, style_parameters=' - Returns an offset line at a given distance and side from an input line.",
              "properties": {
                "distance": {
                  "format": "double precision",
                  "type": "number"
                },
                "line": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "params": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "line",
                "distance"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: line, signed_distance, style_parameters=' - Returns an offset line at a given distance and side from an input line.",
        "tags": [
          "(rpc) st_offsetcurve"
        ]
      }
    },
    "/rpc/st_expand": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "dx",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "dy",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "dz",
            "required": false,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "dm",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, dx, dy, dz=0, dm=0 - Returns a bounding box expanded from another bounding box or a geometry.",
        "tags": [
          "(rpc) st_expand"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, dx, dy, dz=0, dm=0 - Returns a bounding box expanded from another bounding box or a geometry.",
              "properties": {
                "dm": {
                  "format": "double precision",
                  "type": "number"
                },
                "dx": {
                  "format": "double precision",
                  "type": "number"
                },
                "dy": {
                  "format": "double precision",
                  "type": "number"
                },
                "dz": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom",
                "dx",
                "dy"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, dx, dy, dz=0, dm=0 - Returns a bounding box expanded from another bounding box or a geometry.",
        "tags": [
          "(rpc) st_expand"
        ]
      }
    },
    "/rpc/st_buffer": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "radius",
            "required": true,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "quadsegs",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, radius_of_buffer, num_seg_quarter_circle - Computes a geometry covering all points within a given distance from a geometry.",
        "tags": [
          "(rpc) st_buffer"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, radius_of_buffer, num_seg_quarter_circle - Computes a geometry covering all points within a given distance from a geometry.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "quadsegs": {
                  "format": "integer",
                  "type": "integer"
                },
                "radius": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom",
                "radius",
                "quadsegs"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, radius_of_buffer, num_seg_quarter_circle - Computes a geometry covering all points within a given distance from a geometry.",
        "tags": [
          "(rpc) st_buffer"
        ]
      }
    },
    "/rpc/_st_contains": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_contains"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_contains"
        ]
      }
    },
    "/rpc/equals": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) equals"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) equals"
        ]
      }
    },
    "/rpc/dropgeometrycolumn": {
      "get": {
        "parameters": [
          {
            "format": "character varying",
            "in": "query",
            "name": "catalog_name",
            "required": true,
            "type": "string"
          },
          {
            "format": "character varying",
            "in": "query",
            "name": "schema_name",
            "required": true,
            "type": "string"
          },
          {
            "format": "character varying",
            "in": "query",
            "name": "table_name",
            "required": true,
            "type": "string"
          },
          {
            "format": "character varying",
            "in": "query",
            "name": "column_name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table.",
        "tags": [
          "(rpc) dropgeometrycolumn"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table.",
              "properties": {
                "catalog_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "column_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "schema_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "table_name": {
                  "format": "character varying",
                  "type": "string"
                }
              },
              "required": [
                "catalog_name",
                "schema_name",
                "table_name",
                "column_name"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table.",
        "tags": [
          "(rpc) dropgeometrycolumn"
        ]
      }
    },
    "/rpc/st_geohash": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "maxchars",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geohash"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "maxchars": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geohash"
        ]
      }
    },
    "/rpc/postgis_extensions_upgrade": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Packages and upgrades PostGIS extensions (e.g. postgis_raster,postgis_topology, postgis_sfcgal) to latest available version.",
        "tags": [
          "(rpc) postgis_extensions_upgrade"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Packages and upgrades PostGIS extensions (e.g. postgis_raster,postgis_topology, postgis_sfcgal) to latest available version.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Packages and upgrades PostGIS extensions (e.g. postgis_raster,postgis_topology, postgis_sfcgal) to latest available version.",
        "tags": [
          "(rpc) postgis_extensions_upgrade"
        ]
      }
    },
    "/rpc/_st_dfullywithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_dfullywithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_dfullywithin"
        ]
      }
    },
    "/rpc/populate_geometry_columns": {
      "get": {
        "parameters": [
          {
            "format": "oid",
            "in": "query",
            "name": "tbl_oid",
            "required": true,
            "type": "string"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_typmod",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: relation_oid, use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints.",
        "tags": [
          "(rpc) populate_geometry_columns"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: relation_oid, use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints.",
              "properties": {
                "tbl_oid": {
                  "format": "oid",
                  "type": "string"
                },
                "use_typmod": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "tbl_oid"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: relation_oid, use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints.",
        "tags": [
          "(rpc) populate_geometry_columns"
        ]
      }
    },
    "/rpc/st_normalize": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Return the geometry in its canonical form.",
        "tags": [
          "(rpc) st_normalize"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom - Return the geometry in its canonical form.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Return the geometry in its canonical form.",
        "tags": [
          "(rpc) st_normalize"
        ]
      }
    },
    "/rpc/st_containsproperly": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_containsproperly"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_containsproperly"
        ]
      }
    },
    "/rpc/st_sharedpaths": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: lineal1, lineal2 - Returns a collection containing paths shared by the two input linestrings/multilinestrings.",
        "tags": [
          "(rpc) st_sharedpaths"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: lineal1, lineal2 - Returns a collection containing paths shared by the two input linestrings/multilinestrings.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: lineal1, lineal2 - Returns a collection containing paths shared by the two input linestrings/multilinestrings.",
        "tags": [
          "(rpc) st_sharedpaths"
        ]
      }
    },
    "/rpc/postgis_geos_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the GEOS library.",
        "tags": [
          "(rpc) postgis_geos_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns the version number of the GEOS library.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the GEOS library.",
        "tags": [
          "(rpc) postgis_geos_version"
        ]
      }
    },
    "/rpc/geometry_right": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_right"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_right"
        ]
      }
    },
    "/rpc/st_makebox2d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: pointLowLeft, pointUpRight - Creates a BOX2D defined by two 2D point geometries.",
        "tags": [
          "(rpc) st_makebox2d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: pointLowLeft, pointUpRight - Creates a BOX2D defined by two 2D point geometries.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: pointLowLeft, pointUpRight - Creates a BOX2D defined by two 2D point geometries.",
        "tags": [
          "(rpc) st_makebox2d"
        ]
      }
    },
    "/rpc/st_area": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog",
            "required": true,
            "type": "string"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_spheroid",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, use_spheroid=true - Returns the area of a polygonal geometry.",
        "tags": [
          "(rpc) st_area"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geog, use_spheroid=true - Returns the area of a polygonal geometry.",
              "properties": {
                "geog": {
                  "format": "public.geography",
                  "type": "string"
                },
                "use_spheroid": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geog"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, use_spheroid=true - Returns the area of a polygonal geometry.",
        "tags": [
          "(rpc) st_area"
        ]
      }
    },
    "/rpc/st_concavehull": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "param_geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "param_pctconvex",
            "required": true,
            "type": "number"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "param_allow_holes",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: param_geom, param_pctconvex, param_allow_holes = false - Computes a possibly concave geometry that encloses all input geometry vertices",
        "tags": [
          "(rpc) st_concavehull"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: param_geom, param_pctconvex, param_allow_holes = false - Computes a possibly concave geometry that encloses all input geometry vertices",
              "properties": {
                "param_allow_holes": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "param_geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "param_pctconvex": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "param_geom",
                "param_pctconvex"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: param_geom, param_pctconvex, param_allow_holes = false - Computes a possibly concave geometry that encloses all input geometry vertices",
        "tags": [
          "(rpc) st_concavehull"
        ]
      }
    },
    "/rpc/st_transform": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "from_proj",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "to_srid",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, from_proj, to_srid - Return a new geometry with coordinates transformed to a different spatial reference system.",
        "tags": [
          "(rpc) st_transform"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, from_proj, to_srid - Return a new geometry with coordinates transformed to a different spatial reference system.",
              "properties": {
                "from_proj": {
                  "format": "text",
                  "type": "string"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "to_srid": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom",
                "from_proj",
                "to_srid"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, from_proj, to_srid - Return a new geometry with coordinates transformed to a different spatial reference system.",
        "tags": [
          "(rpc) st_transform"
        ]
      }
    },
    "/rpc/postgis_transform_geometry": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_transform_geometry"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "integer",
                  "type": "integer"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom",
                "",
                "",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_transform_geometry"
        ]
      }
    },
    "/rpc/_st_orderingequals": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_orderingequals"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_orderingequals"
        ]
      }
    },
    "/rpc/st_generatepoints": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "area",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "npoints",
            "required": true,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "seed",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g, npoints, seed - Generates random points contained in a Polygon or MultiPolygon.",
        "tags": [
          "(rpc) st_generatepoints"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g, npoints, seed - Generates random points contained in a Polygon or MultiPolygon.",
              "properties": {
                "area": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "npoints": {
                  "format": "integer",
                  "type": "integer"
                },
                "seed": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "area",
                "npoints",
                "seed"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g, npoints, seed - Generates random points contained in a Polygon or MultiPolygon.",
        "tags": [
          "(rpc) st_generatepoints"
        ]
      }
    },
    "/rpc/postgis_libprotobuf_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_libprotobuf_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_libprotobuf_version"
        ]
      }
    },
    "/rpc/_st_intersects": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_intersects"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_intersects"
        ]
      }
    },
    "/rpc/st_3dshortestline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D shortest line between two geometries",
        "tags": [
          "(rpc) st_3dshortestline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Returns the 3D shortest line between two geometries",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D shortest line between two geometries",
        "tags": [
          "(rpc) st_3dshortestline"
        ]
      }
    },
    "/rpc/st_linelocatepoint": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: a_linestring, a_point - Returns the fractional location of the closest point on a line to a point.",
        "tags": [
          "(rpc) st_linelocatepoint"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: a_linestring, a_point - Returns the fractional location of the closest point on a line to a point.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: a_linestring, a_point - Returns the fractional location of the closest point on a line to a point.",
        "tags": [
          "(rpc) st_linelocatepoint"
        ]
      }
    },
    "/rpc/st_multipolyfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipolyfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipolyfromwkb"
        ]
      }
    },
    "/rpc/geometry_gt": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_gt"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_gt"
        ]
      }
    },
    "/rpc/get_rls_policies": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "p_table_name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_rls_policies"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_table_name": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "p_table_name"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_rls_policies"
        ]
      }
    },
    "/rpc/st_force3dz": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "zvalue",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode.",
        "tags": [
          "(rpc) st_force3dz"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "zvalue": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode.",
        "tags": [
          "(rpc) st_force3dz"
        ]
      }
    },
    "/rpc/st_makevalid": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "params",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: input, params - Attempts to make an invalid geometry valid without losing vertices.",
        "tags": [
          "(rpc) st_makevalid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: input, params - Attempts to make an invalid geometry valid without losing vertices.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "params": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "geom",
                "params"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: input, params - Attempts to make an invalid geometry valid without losing vertices.",
        "tags": [
          "(rpc) st_makevalid"
        ]
      }
    },
    "/rpc/st_collect": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Creates a GeometryCollection or Multi* geometry from a set of geometries.",
        "tags": [
          "(rpc) st_collect"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Creates a GeometryCollection or Multi* geometry from a set of geometries.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Creates a GeometryCollection or Multi* geometry from a set of geometries.",
        "tags": [
          "(rpc) st_collect"
        ]
      }
    },
    "/rpc/to_uuid": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "label",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) to_uuid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "label": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "label"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) to_uuid"
        ]
      }
    },
    "/rpc/geometry_within": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_within"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_within"
        ]
      }
    },
    "/rpc/st_boundingdiagonal": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "fits",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, fits=false - Returns the diagonal of a geometrys bounding box.",
        "tags": [
          "(rpc) st_boundingdiagonal"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, fits=false - Returns the diagonal of a geometrys bounding box.",
              "properties": {
                "fits": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, fits=false - Returns the diagonal of a geometrys bounding box.",
        "tags": [
          "(rpc) st_boundingdiagonal"
        ]
      }
    },
    "/rpc/st_asewkt": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asewkt"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asewkt"
        ]
      }
    },
    "/rpc/st_multipolygonfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipolygonfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipolygonfromtext"
        ]
      }
    },
    "/rpc/_st_coveredby": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_coveredby"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_coveredby"
        ]
      }
    },
    "/rpc/_postgis_scripts_pgsql_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_scripts_pgsql_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_scripts_pgsql_version"
        ]
      }
    },
    "/rpc/geometry_overright": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overright"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overright"
        ]
      }
    },
    "/rpc/st_linetocurve": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geometry",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomANoncircular - Converts a linear geometry to a curved geometry.",
        "tags": [
          "(rpc) st_linetocurve"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomANoncircular - Converts a linear geometry to a curved geometry.",
              "properties": {
                "geometry": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geometry"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomANoncircular - Converts a linear geometry to a curved geometry.",
        "tags": [
          "(rpc) st_linetocurve"
        ]
      }
    },
    "/rpc/st_maximuminscribedcircle": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Computes the largest circle contained within a geometry.",
        "tags": [
          "(rpc) st_maximuminscribedcircle"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom - Computes the largest circle contained within a geometry.",
              "properties": {
                "": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Computes the largest circle contained within a geometry.",
        "tags": [
          "(rpc) st_maximuminscribedcircle"
        ]
      }
    },
    "/rpc/postgis_constraint_srid": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "geomschema",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "geomtable",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "geomcolumn",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_constraint_srid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geomcolumn": {
                  "format": "text",
                  "type": "string"
                },
                "geomschema": {
                  "format": "text",
                  "type": "string"
                },
                "geomtable": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "geomschema",
                "geomtable",
                "geomcolumn"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_constraint_srid"
        ]
      }
    },
    "/rpc/postgis_lib_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the PostGIS library.",
        "tags": [
          "(rpc) postgis_lib_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns the version number of the PostGIS library.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the PostGIS library.",
        "tags": [
          "(rpc) postgis_lib_version"
        ]
      }
    },
    "/rpc/_st_longestline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_longestline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_longestline"
        ]
      }
    },
    "/rpc/st_pointzm": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "xcoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "ycoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "zcoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "mcoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "srid",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, z, m, srid=unknown - Creates a Point with X, Y, Z, M and SRID values.",
        "tags": [
          "(rpc) st_pointzm"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: x, y, z, m, srid=unknown - Creates a Point with X, Y, Z, M and SRID values.",
              "properties": {
                "mcoordinate": {
                  "format": "double precision",
                  "type": "number"
                },
                "srid": {
                  "format": "integer",
                  "type": "integer"
                },
                "xcoordinate": {
                  "format": "double precision",
                  "type": "number"
                },
                "ycoordinate": {
                  "format": "double precision",
                  "type": "number"
                },
                "zcoordinate": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "xcoordinate",
                "ycoordinate",
                "zcoordinate",
                "mcoordinate"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, z, m, srid=unknown - Creates a Point with X, Y, Z, M and SRID values.",
        "tags": [
          "(rpc) st_pointzm"
        ]
      }
    },
    "/rpc/geometry_cmp": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_cmp"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_cmp"
        ]
      }
    },
    "/rpc/get_foreign_keys": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "p_table_name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_foreign_keys"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_table_name": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "p_table_name"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_foreign_keys"
        ]
      }
    },
    "/rpc/st_force4d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "zvalue",
            "required": false,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "mvalue",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Zvalue = 0.0, Mvalue = 0.0 - Force the geometries into XYZM mode.",
        "tags": [
          "(rpc) st_force4d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, Zvalue = 0.0, Mvalue = 0.0 - Force the geometries into XYZM mode.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "mvalue": {
                  "format": "double precision",
                  "type": "number"
                },
                "zvalue": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Zvalue = 0.0, Mvalue = 0.0 - Force the geometries into XYZM mode.",
        "tags": [
          "(rpc) st_force4d"
        ]
      }
    },
    "/rpc/gettransactionid": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) gettransactionid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) gettransactionid"
        ]
      }
    },
    "/rpc/st_reduceprecision": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "gridsize",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g, gridsize - Returns a valid geometry with points rounded to a grid tolerance.",
        "tags": [
          "(rpc) st_reduceprecision"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g, gridsize - Returns a valid geometry with points rounded to a grid tolerance.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "gridsize": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom",
                "gridsize"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g, gridsize - Returns a valid geometry with points rounded to a grid tolerance.",
        "tags": [
          "(rpc) st_reduceprecision"
        ]
      }
    },
    "/rpc/st_clipbybox2d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.box2d",
            "in": "query",
            "name": "box",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, box - Computes the portion of a geometry falling within a rectangle.",
        "tags": [
          "(rpc) st_clipbybox2d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, box - Computes the portion of a geometry falling within a rectangle.",
              "properties": {
                "box": {
                  "format": "public.box2d",
                  "type": "string"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom",
                "box"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, box - Computes the portion of a geometry falling within a rectangle.",
        "tags": [
          "(rpc) st_clipbybox2d"
        ]
      }
    },
    "/rpc/query_rls_policies": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) query_rls_policies"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) query_rls_policies"
        ]
      }
    },
    "/rpc/_st_equals": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_equals"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_equals"
        ]
      }
    },
    "/rpc/geometry_overlaps_3d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overlaps_3d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overlaps_3d"
        ]
      }
    },
    "/rpc/st_isvaliddetail": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "flags",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, flags - Returns a valid_detail row stating if a geometry is valid or if not a reason and a location.",
        "tags": [
          "(rpc) st_isvaliddetail"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, flags - Returns a valid_detail row stating if a geometry is valid or if not a reason and a location.",
              "properties": {
                "flags": {
                  "format": "integer",
                  "type": "integer"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, flags - Returns a valid_detail row stating if a geometry is valid or if not a reason and a location.",
        "tags": [
          "(rpc) st_isvaliddetail"
        ]
      }
    },
    "/rpc/st_simplifypolygonhull": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "vertex_fraction",
            "required": true,
            "type": "number"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "is_outer",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: param_geom, vertex_fraction, is_outer = true - Computes a simplifed topology-preserving outer or inner hull of a polygonal geometry.",
        "tags": [
          "(rpc) st_simplifypolygonhull"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: param_geom, vertex_fraction, is_outer = true - Computes a simplifed topology-preserving outer or inner hull of a polygonal geometry.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "is_outer": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "vertex_fraction": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom",
                "vertex_fraction"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: param_geom, vertex_fraction, is_outer = true - Computes a simplifed topology-preserving outer or inner hull of a polygonal geometry.",
        "tags": [
          "(rpc) st_simplifypolygonhull"
        ]
      }
    },
    "/rpc/st_linefromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linefromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linefromtext"
        ]
      }
    },
    "/rpc/user_has_permission": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "user_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "character varying",
            "in": "query",
            "name": "permission_name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) user_has_permission"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "permission_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "user_id",
                "permission_name"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) user_has_permission"
        ]
      }
    },
    "/rpc/st_3dclosestpoint": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D point on g1 that is closest to g2. This is the first point of the 3D shortest line.",
        "tags": [
          "(rpc) st_3dclosestpoint"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Returns the 3D point on g1 that is closest to g2. This is the first point of the 3D shortest line.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D point on g1 that is closest to g2. This is the first point of the 3D shortest line.",
        "tags": [
          "(rpc) st_3dclosestpoint"
        ]
      }
    },
    "/rpc/st_wkttosql": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_wkttosql"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_wkttosql"
        ]
      }
    },
    "/rpc/check_user_permission": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_user_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "p_resource",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "p_action",
            "required": true,
            "type": "string"
          },
          {
            "format": "uuid",
            "in": "query",
            "name": "p_tenant_id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) check_user_permission"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_action": {
                  "format": "text",
                  "type": "string"
                },
                "p_resource": {
                  "format": "text",
                  "type": "string"
                },
                "p_tenant_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id",
                "p_resource",
                "p_action"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) check_user_permission"
        ]
      }
    },
    "/rpc/geometry_left": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_left"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_left"
        ]
      }
    },
    "/rpc/_postgis_selectivity": {
      "get": {
        "parameters": [
          {
            "format": "regclass",
            "in": "query",
            "name": "tbl",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "att_name",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "mode",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_selectivity"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "att_name": {
                  "format": "text",
                  "type": "string"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "mode": {
                  "format": "text",
                  "type": "string"
                },
                "tbl": {
                  "format": "regclass",
                  "type": "string"
                }
              },
              "required": [
                "tbl",
                "att_name",
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_selectivity"
        ]
      }
    },
    "/rpc/st_geogfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geogfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geogfromtext"
        ]
      }
    },
    "/rpc/st_pointm": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "xcoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "ycoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "mcoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "srid",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, m, srid=unknown - Creates a Point with X, Y, M and SRID values.",
        "tags": [
          "(rpc) st_pointm"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: x, y, m, srid=unknown - Creates a Point with X, Y, M and SRID values.",
              "properties": {
                "mcoordinate": {
                  "format": "double precision",
                  "type": "number"
                },
                "srid": {
                  "format": "integer",
                  "type": "integer"
                },
                "xcoordinate": {
                  "format": "double precision",
                  "type": "number"
                },
                "ycoordinate": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "xcoordinate",
                "ycoordinate",
                "mcoordinate"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, m, srid=unknown - Creates a Point with X, Y, M and SRID values.",
        "tags": [
          "(rpc) st_pointm"
        ]
      }
    },
    "/rpc/geometry_contained_3d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_contained_3d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_contained_3d"
        ]
      }
    },
    "/rpc/st_azimuth": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: origin, target - Returns the north-based azimuth of a line between two points.",
        "tags": [
          "(rpc) st_azimuth"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: origin, target - Returns the north-based azimuth of a line between two points.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: origin, target - Returns the north-based azimuth of a line between two points.",
        "tags": [
          "(rpc) st_azimuth"
        ]
      }
    },
    "/rpc/get_table_policies": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "table_name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_table_policies"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "table_name": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "table_name"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_table_policies"
        ]
      }
    },
    "/rpc/st_symmetricdifference": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_symmetricdifference"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_symmetricdifference"
        ]
      }
    },
    "/rpc/get_user_tenant_id": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_user_tenant_id"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "user_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_user_tenant_id"
        ]
      }
    },
    "/rpc/geometry_contains": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_contains"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_contains"
        ]
      }
    },
    "/rpc/st_snap": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: input, reference, tolerance - Snap segments and vertices of input geometry to vertices of a reference geometry.",
        "tags": [
          "(rpc) st_snap"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: input, reference, tolerance - Snap segments and vertices of input geometry to vertices of a reference geometry.",
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: input, reference, tolerance - Snap segments and vertices of input geometry to vertices of a reference geometry.",
        "tags": [
          "(rpc) st_snap"
        ]
      }
    },
    "/rpc/_st_3dintersects": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_3dintersects"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_3dintersects"
        ]
      }
    },
    "/rpc/generate_invitation_code": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) generate_invitation_code"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) generate_invitation_code"
        ]
      }
    },
    "/rpc/st_3ddfullywithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_3ddfullywithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_3ddfullywithin"
        ]
      }
    },
    "/rpc/postgis_liblwgeom_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the liblwgeom library. This should match the version of PostGIS.",
        "tags": [
          "(rpc) postgis_liblwgeom_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns the version number of the liblwgeom library. This should match the version of PostGIS.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the liblwgeom library. This should match the version of PostGIS.",
        "tags": [
          "(rpc) postgis_liblwgeom_version"
        ]
      }
    },
    "/rpc/st_locatebetween": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geometry",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "frommeasure",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tomeasure",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "leftrightoffset",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, measure_start, measure_end, offset = 0 - Returns the portions of a geometry that match a measure range.",
        "tags": [
          "(rpc) st_locatebetween"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, measure_start, measure_end, offset = 0 - Returns the portions of a geometry that match a measure range.",
              "properties": {
                "frommeasure": {
                  "format": "double precision",
                  "type": "number"
                },
                "geometry": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "leftrightoffset": {
                  "format": "double precision",
                  "type": "number"
                },
                "tomeasure": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geometry",
                "frommeasure",
                "tomeasure"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, measure_start, measure_end, offset = 0 - Returns the portions of a geometry that match a measure range.",
        "tags": [
          "(rpc) st_locatebetween"
        ]
      }
    },
    "/rpc/increment_refresh_count": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "session_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) increment_refresh_count"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "session_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "session_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) increment_refresh_count"
        ]
      }
    },
    "/rpc/st_pointfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_pointfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_pointfromwkb"
        ]
      }
    },
    "/rpc/geometry_overbelow": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overbelow"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overbelow"
        ]
      }
    },
    "/rpc/st_segmentize": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "max_segment_length",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance.",
        "tags": [
          "(rpc) st_segmentize"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geog, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance.",
              "properties": {
                "geog": {
                  "format": "public.geography",
                  "type": "string"
                },
                "max_segment_length": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geog",
                "max_segment_length"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance.",
        "tags": [
          "(rpc) st_segmentize"
        ]
      }
    },
    "/rpc/st_length": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog",
            "required": true,
            "type": "string"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_spheroid",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, use_spheroid=true - Returns the 2D length of a linear geometry.",
        "tags": [
          "(rpc) st_length"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geog, use_spheroid=true - Returns the 2D length of a linear geometry.",
              "properties": {
                "geog": {
                  "format": "public.geography",
                  "type": "string"
                },
                "use_spheroid": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geog"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, use_spheroid=true - Returns the 2D length of a linear geometry.",
        "tags": [
          "(rpc) st_length"
        ]
      }
    },
    "/rpc/st_wkbtosql": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "wkb",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_wkbtosql"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "wkb": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                "wkb"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_wkbtosql"
        ]
      }
    },
    "/rpc/st_force3d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "zvalue",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode. This is an alias for ST_Force3DZ.",
        "tags": [
          "(rpc) st_force3d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode. This is an alias for ST_Force3DZ.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "zvalue": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Zvalue = 0.0 - Force the geometries into XYZ mode. This is an alias for ST_Force3DZ.",
        "tags": [
          "(rpc) st_force3d"
        ]
      }
    },
    "/rpc/st_linecrossingdirection": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "line1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "line2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linecrossingdirection"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "line1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "line2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "line1",
                "line2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_linecrossingdirection"
        ]
      }
    },
    "/rpc/st_geomfromtwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromtwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromtwkb"
        ]
      }
    },
    "/rpc/log_auth_event": {
      "get": {
        "parameters": [
          {
            "format": "public.auth_event_type",
            "in": "query",
            "name": "p_event_type",
            "required": true,
            "type": "string"
          },
          {
            "format": "uuid",
            "in": "query",
            "name": "p_user_id",
            "required": false,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "p_user_email",
            "required": false,
            "type": "string"
          },
          {
            "format": "uuid",
            "in": "query",
            "name": "p_tenant_id",
            "required": false,
            "type": "string"
          },
          {
            "format": "uuid",
            "in": "query",
            "name": "p_session_id",
            "required": false,
            "type": "string"
          },
          {
            "format": "inet",
            "in": "query",
            "name": "p_ip_address",
            "required": false,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "p_user_agent",
            "required": false,
            "type": "string"
          },
          {
            "format": "public.device_type",
            "in": "query",
            "name": "p_device_type",
            "required": false,
            "type": "string"
          },
          {
            "format": "jsonb",
            "in": "query",
            "name": "p_location",
            "required": false,
            "type": "string"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "p_success",
            "required": false,
            "type": "boolean"
          },
          {
            "format": "text",
            "in": "query",
            "name": "p_reason",
            "required": false,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "p_error_code",
            "required": false,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "p_risk_score",
            "required": false,
            "type": "integer"
          },
          {
            "format": "jsonb",
            "in": "query",
            "name": "p_details",
            "required": false,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "p_voice_command",
            "required": false,
            "type": "string"
          },
          {
            "format": "numeric",
            "in": "query",
            "name": "p_voice_confidence",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Centralized authentication event logging with error handling",
        "tags": [
          "(rpc) log_auth_event"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Centralized authentication event logging with error handling",
              "properties": {
                "p_details": {
                  "format": "jsonb"
                },
                "p_device_type": {
                  "format": "public.device_type",
                  "type": "string"
                },
                "p_error_code": {
                  "format": "text",
                  "type": "string"
                },
                "p_event_type": {
                  "format": "public.auth_event_type",
                  "type": "string"
                },
                "p_ip_address": {
                  "format": "inet",
                  "type": "string"
                },
                "p_location": {
                  "format": "jsonb"
                },
                "p_reason": {
                  "format": "text",
                  "type": "string"
                },
                "p_risk_score": {
                  "format": "integer",
                  "type": "integer"
                },
                "p_session_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_success": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "p_tenant_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_user_agent": {
                  "format": "text",
                  "type": "string"
                },
                "p_user_email": {
                  "format": "text",
                  "type": "string"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_voice_command": {
                  "format": "text",
                  "type": "string"
                },
                "p_voice_confidence": {
                  "format": "numeric",
                  "type": "number"
                }
              },
              "required": [
                "p_event_type"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Centralized authentication event logging with error handling",
        "tags": [
          "(rpc) log_auth_event"
        ]
      }
    },
    "/rpc/geometry_overlaps": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overlaps"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overlaps"
        ]
      }
    },
    "/rpc/st_mpolyfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpolyfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpolyfromwkb"
        ]
      }
    },
    "/rpc/_st_linecrossingdirection": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "line1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "line2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_linecrossingdirection"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "line1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "line2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "line1",
                "line2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_linecrossingdirection"
        ]
      }
    },
    "/rpc/st_intersects": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_intersects"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_intersects"
        ]
      }
    },
    "/rpc/st_force3dm": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "mvalue",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Mvalue = 0.0 - Force the geometries into XYM mode.",
        "tags": [
          "(rpc) st_force3dm"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, Mvalue = 0.0 - Force the geometries into XYM mode.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "mvalue": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, Mvalue = 0.0 - Force the geometries into XYM mode.",
        "tags": [
          "(rpc) st_force3dm"
        ]
      }
    },
    "/rpc/postgis_proj_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the PROJ4 library.",
        "tags": [
          "(rpc) postgis_proj_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns the version number of the PROJ4 library.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the PROJ4 library.",
        "tags": [
          "(rpc) postgis_proj_version"
        ]
      }
    },
    "/rpc/geometry_below": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_below"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_below"
        ]
      }
    },
    "/rpc/st_geomfrommarc21": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "marc21xml",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfrommarc21"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "marc21xml": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "marc21xml"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfrommarc21"
        ]
      }
    },
    "/rpc/st_geometryfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geometryfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geometryfromtext"
        ]
      }
    },
    "/rpc/get_manifest_stats": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_manifest_stats"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_manifest_stats"
        ]
      }
    },
    "/rpc/geomfromewkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geomfromewkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geomfromewkb"
        ]
      }
    },
    "/rpc/st_wrapx": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "wrap",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "move",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, wrap, move - Wrap a geometry around an X value.",
        "tags": [
          "(rpc) st_wrapx"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, wrap, move - Wrap a geometry around an X value.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "move": {
                  "format": "double precision",
                  "type": "number"
                },
                "wrap": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom",
                "wrap",
                "move"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, wrap, move - Wrap a geometry around an X value.",
        "tags": [
          "(rpc) st_wrapx"
        ]
      }
    },
    "/rpc/st_geomfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromtext"
        ]
      }
    },
    "/rpc/st_addpoint": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: linestring, point, position = -1 - Add a point to a LineString.",
        "tags": [
          "(rpc) st_addpoint"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: linestring, point, position = -1 - Add a point to a LineString.",
              "properties": {
                "": {
                  "format": "integer",
                  "type": "integer"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: linestring, point, position = -1 - Add a point to a LineString.",
        "tags": [
          "(rpc) st_addpoint"
        ]
      }
    },
    "/rpc/postgis_full_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Reports full PostGIS version and build configuration infos.",
        "tags": [
          "(rpc) postgis_full_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Reports full PostGIS version and build configuration infos.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Reports full PostGIS version and build configuration infos.",
        "tags": [
          "(rpc) postgis_full_version"
        ]
      }
    },
    "/rpc/st_tileenvelope": {
      "get": {
        "parameters": [
          {
            "format": "integer",
            "in": "query",
            "name": "zoom",
            "required": true,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "x",
            "required": true,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "y",
            "required": true,
            "type": "integer"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "bounds",
            "required": false,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "margin",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: tileZoom, tileX, tileY, bounds=SRID=3857;LINESTRING(-20037508.342789 -20037508.342789,20037508.342789 20037508.342789), margin=0.0 - Creates a rectangular Polygon in Web Mercator (SRID:3857) using the XYZ tile system.",
        "tags": [
          "(rpc) st_tileenvelope"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: tileZoom, tileX, tileY, bounds=SRID=3857;LINESTRING(-20037508.342789 -20037508.342789,20037508.342789 20037508.342789), margin=0.0 - Creates a rectangular Polygon in Web Mercator (SRID:3857) using the XYZ tile system.",
              "properties": {
                "bounds": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "margin": {
                  "format": "double precision",
                  "type": "number"
                },
                "x": {
                  "format": "integer",
                  "type": "integer"
                },
                "y": {
                  "format": "integer",
                  "type": "integer"
                },
                "zoom": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "zoom",
                "x",
                "y"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: tileZoom, tileX, tileY, bounds=SRID=3857;LINESTRING(-20037508.342789 -20037508.342789,20037508.342789 20037508.342789), margin=0.0 - Creates a rectangular Polygon in Web Mercator (SRID:3857) using the XYZ tile system.",
        "tags": [
          "(rpc) st_tileenvelope"
        ]
      }
    },
    "/rpc/_postgis_deprecate": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "oldname",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "newname",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_deprecate"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "newname": {
                  "format": "text",
                  "type": "string"
                },
                "oldname": {
                  "format": "text",
                  "type": "string"
                },
                "version": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "oldname",
                "newname",
                "version"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_deprecate"
        ]
      }
    },
    "/rpc/validate_tenant_access": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_user_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "uuid",
            "in": "query",
            "name": "p_tenant_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.user_role",
            "in": "query",
            "name": "p_required_role",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Validates user access to specific tenant with role requirements",
        "tags": [
          "(rpc) validate_tenant_access"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Validates user access to specific tenant with role requirements",
              "properties": {
                "p_required_role": {
                  "format": "public.user_role",
                  "type": "string"
                },
                "p_tenant_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id",
                "p_tenant_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Validates user access to specific tenant with role requirements",
        "tags": [
          "(rpc) validate_tenant_access"
        ]
      }
    },
    "/rpc/st_geomcollfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomcollfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomcollfromwkb"
        ]
      }
    },
    "/rpc/get_tenant_id": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_tenant_id"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_tenant_id"
        ]
      }
    },
    "/rpc/postgis_constraint_dims": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "geomschema",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "geomtable",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "geomcolumn",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_constraint_dims"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geomcolumn": {
                  "format": "text",
                  "type": "string"
                },
                "geomschema": {
                  "format": "text",
                  "type": "string"
                },
                "geomtable": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "geomschema",
                "geomtable",
                "geomcolumn"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_constraint_dims"
        ]
      }
    },
    "/rpc/st_equals": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_equals"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_equals"
        ]
      }
    },
    "/rpc/st_gmltosql": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_gmltosql"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_gmltosql"
        ]
      }
    },
    "/rpc/control_irrigation_zone_voice": {
      "get": {
        "parameters": [
          {
            "format": "character varying",
            "in": "query",
            "name": "p_zone_identifier",
            "required": true,
            "type": "string"
          },
          {
            "format": "character varying",
            "in": "query",
            "name": "p_action",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "p_duration_minutes",
            "required": false,
            "type": "integer"
          },
          {
            "format": "uuid",
            "in": "query",
            "name": "p_user_id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) control_irrigation_zone_voice"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_action": {
                  "format": "character varying",
                  "type": "string"
                },
                "p_duration_minutes": {
                  "format": "integer",
                  "type": "integer"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_zone_identifier": {
                  "format": "character varying",
                  "type": "string"
                }
              },
              "required": [
                "p_zone_identifier",
                "p_action"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) control_irrigation_zone_voice"
        ]
      }
    },
    "/rpc/st_centroid": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_spheroid",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, use_spheroid=true - Returns the geometric center of a geometry.",
        "tags": [
          "(rpc) st_centroid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, use_spheroid=true - Returns the geometric center of a geometry.",
              "properties": {
                "": {
                  "format": "public.geography",
                  "type": "string"
                },
                "use_spheroid": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, use_spheroid=true - Returns the geometric center of a geometry.",
        "tags": [
          "(rpc) st_centroid"
        ]
      }
    },
    "/rpc/st_minimumboundingcircle": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "inputgeom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "segs_per_quarter",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, num_segs_per_qt_circ=48 - Returns the smallest circle polygon that contains a geometry.",
        "tags": [
          "(rpc) st_minimumboundingcircle"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, num_segs_per_qt_circ=48 - Returns the smallest circle polygon that contains a geometry.",
              "properties": {
                "inputgeom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "segs_per_quarter": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "inputgeom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, num_segs_per_qt_circ=48 - Returns the smallest circle polygon that contains a geometry.",
        "tags": [
          "(rpc) st_minimumboundingcircle"
        ]
      }
    },
    "/rpc/st_locatebetweenelevations": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geometry",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "fromelevation",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "toelevation",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, elevation_start, elevation_end - Returns the portions of a geometry that lie in an elevation (Z) range.",
        "tags": [
          "(rpc) st_locatebetweenelevations"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, elevation_start, elevation_end - Returns the portions of a geometry that lie in an elevation (Z) range.",
              "properties": {
                "fromelevation": {
                  "format": "double precision",
                  "type": "number"
                },
                "geometry": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "toelevation": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geometry",
                "fromelevation",
                "toelevation"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, elevation_start, elevation_end - Returns the portions of a geometry that lie in an elevation (Z) range.",
        "tags": [
          "(rpc) st_locatebetweenelevations"
        ]
      }
    },
    "/rpc/postgis_constraint_type": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "geomschema",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "geomtable",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "geomcolumn",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_constraint_type"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geomcolumn": {
                  "format": "text",
                  "type": "string"
                },
                "geomschema": {
                  "format": "text",
                  "type": "string"
                },
                "geomtable": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "geomschema",
                "geomtable",
                "geomcolumn"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_constraint_type"
        ]
      }
    },
    "/rpc/adjust_item_quantity": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_item_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "numeric",
            "in": "query",
            "name": "p_adjustment",
            "required": true,
            "type": "number"
          },
          {
            "format": "text",
            "in": "query",
            "name": "p_transaction_type",
            "required": true,
            "type": "string"
          },
          {
            "format": "uuid",
            "in": "query",
            "name": "p_user_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "p_notes",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) adjust_item_quantity"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_adjustment": {
                  "format": "numeric",
                  "type": "number"
                },
                "p_item_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_notes": {
                  "format": "text",
                  "type": "string"
                },
                "p_transaction_type": {
                  "format": "text",
                  "type": "string"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_item_id",
                "p_adjustment",
                "p_transaction_type",
                "p_user_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) adjust_item_quantity"
        ]
      }
    },
    "/rpc/st_union": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "gridsize",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2, gridSize - Computes a geometry representing the point-set union of the input geometries.",
        "tags": [
          "(rpc) st_union"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2, gridSize - Computes a geometry representing the point-set union of the input geometries.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "gridsize": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom1",
                "geom2",
                "gridsize"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2, gridSize - Computes a geometry representing the point-set union of the input geometries.",
        "tags": [
          "(rpc) st_union"
        ]
      }
    },
    "/rpc/get_column_info": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "p_table_name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_column_info"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_table_name": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "p_table_name"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_column_info"
        ]
      }
    },
    "/rpc/cleanup_expired_deduplication": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) cleanup_expired_deduplication"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) cleanup_expired_deduplication"
        ]
      }
    },
    "/rpc/postgis_scripts_build_date": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns build date of the PostGIS scripts.",
        "tags": [
          "(rpc) postgis_scripts_build_date"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns build date of the PostGIS scripts.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns build date of the PostGIS scripts.",
        "tags": [
          "(rpc) postgis_scripts_build_date"
        ]
      }
    },
    "/rpc/st_3dintersects": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_3dintersects"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_3dintersects"
        ]
      }
    },
    "/rpc/generate_daily_route": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_user_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "date",
            "in": "query",
            "name": "p_date",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) generate_daily_route"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_date": {
                  "format": "date",
                  "type": "string"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id",
                "p_date"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) generate_daily_route"
        ]
      }
    },
    "/rpc/st_voronoipolygons": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g1",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": false,
            "type": "number"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "extend_to",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, tolerance, extend_to - Returns the cells of the Voronoi diagram of the vertices of a geometry.",
        "tags": [
          "(rpc) st_voronoipolygons"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, tolerance, extend_to - Returns the cells of the Voronoi diagram of the vertices of a geometry.",
              "properties": {
                "extend_to": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "g1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "g1"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, tolerance, extend_to - Returns the cells of the Voronoi diagram of the vertices of a geometry.",
        "tags": [
          "(rpc) st_voronoipolygons"
        ]
      }
    },
    "/rpc/get_indexes": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "p_table_name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_indexes"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_table_name": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "p_table_name"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_indexes"
        ]
      }
    },
    "/rpc/st_quantizecoordinates": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "prec_x",
            "required": true,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "prec_y",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "prec_z",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "prec_m",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g, prec_x, prec_y, prec_z, prec_m - Sets least significant bits of coordinates to zero",
        "tags": [
          "(rpc) st_quantizecoordinates"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g, prec_x, prec_y, prec_z, prec_m - Sets least significant bits of coordinates to zero",
              "properties": {
                "g": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "prec_m": {
                  "format": "integer",
                  "type": "integer"
                },
                "prec_x": {
                  "format": "integer",
                  "type": "integer"
                },
                "prec_y": {
                  "format": "integer",
                  "type": "integer"
                },
                "prec_z": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "g",
                "prec_x"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g, prec_x, prec_y, prec_z, prec_m - Sets least significant bits of coordinates to zero",
        "tags": [
          "(rpc) st_quantizecoordinates"
        ]
      }
    },
    "/rpc/check_break_compliance": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_day_plan_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) check_break_compliance"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_day_plan_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_day_plan_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) check_break_compliance"
        ]
      }
    },
    "/rpc/st_3dmaxdistance": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D cartesian maximum distance (based on spatial ref) between two geometries in projected units.",
        "tags": [
          "(rpc) st_3dmaxdistance"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Returns the 3D cartesian maximum distance (based on spatial ref) between two geometries in projected units.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D cartesian maximum distance (based on spatial ref) between two geometries in projected units.",
        "tags": [
          "(rpc) st_3dmaxdistance"
        ]
      }
    },
    "/rpc/st_contains": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_contains"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_contains"
        ]
      }
    },
    "/rpc/dropgeometrytable": {
      "get": {
        "parameters": [
          {
            "format": "character varying",
            "in": "query",
            "name": "catalog_name",
            "required": true,
            "type": "string"
          },
          {
            "format": "character varying",
            "in": "query",
            "name": "schema_name",
            "required": true,
            "type": "string"
          },
          {
            "format": "character varying",
            "in": "query",
            "name": "table_name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns.",
        "tags": [
          "(rpc) dropgeometrytable"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns.",
              "properties": {
                "catalog_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "schema_name": {
                  "format": "character varying",
                  "type": "string"
                },
                "table_name": {
                  "format": "character varying",
                  "type": "string"
                }
              },
              "required": [
                "catalog_name",
                "schema_name",
                "table_name"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns.",
        "tags": [
          "(rpc) dropgeometrytable"
        ]
      }
    },
    "/rpc/st_point": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "srid",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, srid=unknown - Creates a Point with X, Y and SRID values.",
        "tags": [
          "(rpc) st_point"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: x, y, srid=unknown - Creates a Point with X, Y and SRID values.",
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "srid": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "",
                "",
                "srid"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, srid=unknown - Creates a Point with X, Y and SRID values.",
        "tags": [
          "(rpc) st_point"
        ]
      }
    },
    "/rpc/update_user_last_login": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_user_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "inet",
            "in": "query",
            "name": "p_ip_address",
            "required": false,
            "type": "string"
          },
          {
            "format": "public.device_type",
            "in": "query",
            "name": "p_device_type",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) update_user_last_login"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_device_type": {
                  "format": "public.device_type",
                  "type": "string"
                },
                "p_ip_address": {
                  "format": "inet",
                  "type": "string"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) update_user_last_login"
        ]
      }
    },
    "/rpc/st_geomfromewkt": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromewkt"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromewkt"
        ]
      }
    },
    "/rpc/st_square": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "size",
            "required": true,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "cell_i",
            "required": true,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "cell_j",
            "required": true,
            "type": "integer"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "origin",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, cell_i, cell_j, origin - Returns a single square, using the provided edge size and cell coordinate within the square grid space.",
        "tags": [
          "(rpc) st_square"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: size, cell_i, cell_j, origin - Returns a single square, using the provided edge size and cell coordinate within the square grid space.",
              "properties": {
                "cell_i": {
                  "format": "integer",
                  "type": "integer"
                },
                "cell_j": {
                  "format": "integer",
                  "type": "integer"
                },
                "origin": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "size": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "size",
                "cell_i",
                "cell_j"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, cell_i, cell_j, origin - Returns a single square, using the provided edge size and cell coordinate within the square grid space.",
        "tags": [
          "(rpc) st_square"
        ]
      }
    },
    "/rpc/has_role": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "role_name",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) has_role"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "role_name": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "role_name"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) has_role"
        ]
      }
    },
    "/rpc/check_role_hierarchy": {
      "get": {
        "parameters": [
          {
            "format": "public.user_role",
            "in": "query",
            "name": "p_user_role",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.user_role",
            "in": "query",
            "name": "p_required_role",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) check_role_hierarchy"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_required_role": {
                  "format": "public.user_role",
                  "type": "string"
                },
                "p_user_role": {
                  "format": "public.user_role",
                  "type": "string"
                }
              },
              "required": [
                "p_user_role",
                "p_required_role"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) check_role_hierarchy"
        ]
      }
    },
    "/rpc/st_polygonfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polygonfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polygonfromtext"
        ]
      }
    },
    "/rpc/st_delaunaytriangles": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g1",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": false,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "flags",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, tolerance, flags - Returns the Delaunay triangulation of the vertices of a geometry.",
        "tags": [
          "(rpc) st_delaunaytriangles"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, tolerance, flags - Returns the Delaunay triangulation of the vertices of a geometry.",
              "properties": {
                "flags": {
                  "format": "integer",
                  "type": "integer"
                },
                "g1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "g1"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, tolerance, flags - Returns the Delaunay triangulation of the vertices of a geometry.",
        "tags": [
          "(rpc) st_delaunaytriangles"
        ]
      }
    },
    "/rpc/st_closestpoint": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom1, geom2 - Returns the 2D point on g1 that is closest to g2. This is the first point of the shortest line from one geometry to the other.",
        "tags": [
          "(rpc) st_closestpoint"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom1, geom2 - Returns the 2D point on g1 that is closest to g2. This is the first point of the shortest line from one geometry to the other.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom1, geom2 - Returns the 2D point on g1 that is closest to g2. This is the first point of the shortest line from one geometry to the other.",
        "tags": [
          "(rpc) st_closestpoint"
        ]
      }
    },
    "/rpc/st_3ddistance": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D cartesian minimum distance (based on spatial ref) between two geometries in projected units.",
        "tags": [
          "(rpc) st_3ddistance"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Returns the 3D cartesian minimum distance (based on spatial ref) between two geometries in projected units.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 3D cartesian minimum distance (based on spatial ref) between two geometries in projected units.",
        "tags": [
          "(rpc) st_3ddistance"
        ]
      }
    },
    "/rpc/st_triangulatepolygon": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g1",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Computes the constrained Delaunay triangulation of polygons",
        "tags": [
          "(rpc) st_triangulatepolygon"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom - Computes the constrained Delaunay triangulation of polygons",
              "properties": {
                "g1": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "g1"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Computes the constrained Delaunay triangulation of polygons",
        "tags": [
          "(rpc) st_triangulatepolygon"
        ]
      }
    },
    "/rpc/get_daily_vision_costs": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_company_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "date",
            "in": "query",
            "name": "p_date",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Calculate total vision costs for a company on a specific date, used for $10/day budget enforcement",
        "tags": [
          "(rpc) get_daily_vision_costs"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Calculate total vision costs for a company on a specific date, used for $10/day budget enforcement",
              "properties": {
                "p_company_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_date": {
                  "format": "date",
                  "type": "string"
                }
              },
              "required": [
                "p_company_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Calculate total vision costs for a company on a specific date, used for $10/day budget enforcement",
        "tags": [
          "(rpc) get_daily_vision_costs"
        ]
      }
    },
    "/rpc/st_locatealong": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geometry",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "measure",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "leftrightoffset",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom_with_measure, measure, offset = 0 - Returns the point(s) on a geometry that match a measure value.",
        "tags": [
          "(rpc) st_locatealong"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom_with_measure, measure, offset = 0 - Returns the point(s) on a geometry that match a measure value.",
              "properties": {
                "geometry": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "leftrightoffset": {
                  "format": "double precision",
                  "type": "number"
                },
                "measure": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geometry",
                "measure"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom_with_measure, measure, offset = 0 - Returns the point(s) on a geometry that match a measure value.",
        "tags": [
          "(rpc) st_locatealong"
        ]
      }
    },
    "/rpc/st_hausdorffdistance": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries.",
        "tags": [
          "(rpc) st_hausdorffdistance"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries.",
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries.",
        "tags": [
          "(rpc) st_hausdorffdistance"
        ]
      }
    },
    "/rpc/st_snaptogrid": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to a regular grid.",
        "tags": [
          "(rpc) st_snaptogrid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to a regular grid.",
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                "",
                "",
                "",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to a regular grid.",
        "tags": [
          "(rpc) st_snaptogrid"
        ]
      }
    },
    "/rpc/st_touches": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_touches"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_touches"
        ]
      }
    },
    "/rpc/st_asx3d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "maxdecimaldigits",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "options",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asx3d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "maxdecimaldigits": {
                  "format": "integer",
                  "type": "integer"
                },
                "options": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asx3d"
        ]
      }
    },
    "/rpc/geometry_same": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_same"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_same"
        ]
      }
    },
    "/rpc/st_longestline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 2D longest line between two geometries.",
        "tags": [
          "(rpc) st_longestline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Returns the 2D longest line between two geometries.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 2D longest line between two geometries.",
        "tags": [
          "(rpc) st_longestline"
        ]
      }
    },
    "/rpc/st_coorddim": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geometry",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA - Return the coordinate dimension of a geometry.",
        "tags": [
          "(rpc) st_coorddim"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA - Return the coordinate dimension of a geometry.",
              "properties": {
                "geometry": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geometry"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA - Return the coordinate dimension of a geometry.",
        "tags": [
          "(rpc) st_coorddim"
        ]
      }
    },
    "/rpc/_st_within": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_within"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_within"
        ]
      }
    },
    "/rpc/st_relate": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_relate"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_relate"
        ]
      }
    },
    "/rpc/geometry_le": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_le"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_le"
        ]
      }
    },
    "/rpc/_postgis_pgsql_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_pgsql_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_pgsql_version"
        ]
      }
    },
    "/rpc/st_astext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_astext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_astext"
        ]
      }
    },
    "/rpc/geometry_gist_same_2d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "internal",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_gist_same_2d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "internal",
                  "type": "string"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_gist_same_2d"
        ]
      }
    },
    "/rpc/st_disjoint": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_disjoint"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_disjoint"
        ]
      }
    },
    "/rpc/get_table_info": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_table_info"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_table_info"
        ]
      }
    },
    "/rpc/st_mpointfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpointfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpointfromtext"
        ]
      }
    },
    "/rpc/_st_touches": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_touches"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_touches"
        ]
      }
    },
    "/rpc/st_geomcollfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomcollfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomcollfromtext"
        ]
      }
    },
    "/rpc/st_hexagon": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "size",
            "required": true,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "cell_i",
            "required": true,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "cell_j",
            "required": true,
            "type": "integer"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "origin",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, cell_i, cell_j, origin - Returns a single hexagon, using the provided edge size and cell coordinate within the hexagon grid space.",
        "tags": [
          "(rpc) st_hexagon"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: size, cell_i, cell_j, origin - Returns a single hexagon, using the provided edge size and cell coordinate within the hexagon grid space.",
              "properties": {
                "cell_i": {
                  "format": "integer",
                  "type": "integer"
                },
                "cell_j": {
                  "format": "integer",
                  "type": "integer"
                },
                "origin": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "size": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "size",
                "cell_i",
                "cell_j"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, cell_i, cell_j, origin - Returns a single hexagon, using the provided edge size and cell coordinate within the hexagon grid space.",
        "tags": [
          "(rpc) st_hexagon"
        ]
      }
    },
    "/rpc/st_assvg": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "rel",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "maxdecimaldigits",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_assvg"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "maxdecimaldigits": {
                  "format": "integer",
                  "type": "integer"
                },
                "rel": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_assvg"
        ]
      }
    },
    "/rpc/st_multipointfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipointfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multipointfromtext"
        ]
      }
    },
    "/rpc/st_symdifference": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "gridsize",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the portions of geometries A and B that do not intersect.",
        "tags": [
          "(rpc) st_symdifference"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the portions of geometries A and B that do not intersect.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "gridsize": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the portions of geometries A and B that do not intersect.",
        "tags": [
          "(rpc) st_symdifference"
        ]
      }
    },
    "/rpc/st_asgml": {
      "get": {
        "parameters": [
          {
            "format": "integer",
            "in": "query",
            "name": "version",
            "required": true,
            "type": "integer"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "maxdecimaldigits",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "options",
            "required": false,
            "type": "integer"
          },
          {
            "format": "text",
            "in": "query",
            "name": "nprefix",
            "required": false,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asgml"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "id": {
                  "format": "text",
                  "type": "string"
                },
                "maxdecimaldigits": {
                  "format": "integer",
                  "type": "integer"
                },
                "nprefix": {
                  "format": "text",
                  "type": "string"
                },
                "options": {
                  "format": "integer",
                  "type": "integer"
                },
                "version": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "version",
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asgml"
        ]
      }
    },
    "/rpc/st_pointfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_pointfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_pointfromtext"
        ]
      }
    },
    "/rpc/_st_3ddwithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_3ddwithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_3ddwithin"
        ]
      }
    },
    "/rpc/postgis_wagyu_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the internal Wagyu library.",
        "tags": [
          "(rpc) postgis_wagyu_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns the version number of the internal Wagyu library.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the internal Wagyu library.",
        "tags": [
          "(rpc) postgis_wagyu_version"
        ]
      }
    },
    "/rpc/st_mpolyfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpolyfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mpolyfromtext"
        ]
      }
    },
    "/rpc/st_angle": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "pt1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "pt2",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "pt3",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "pt4",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: point1, point2, point3, point4 - Returns the angle between two vectors defined by 3 or 4 points, or 2 lines.",
        "tags": [
          "(rpc) st_angle"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: point1, point2, point3, point4 - Returns the angle between two vectors defined by 3 or 4 points, or 2 lines.",
              "properties": {
                "pt1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "pt2": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "pt3": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "pt4": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "pt1",
                "pt2",
                "pt3"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: point1, point2, point3, point4 - Returns the angle between two vectors defined by 3 or 4 points, or 2 lines.",
        "tags": [
          "(rpc) st_angle"
        ]
      }
    },
    "/rpc/st_lineinterpolatepoints": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "repeat",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: a_linestring, a_fraction, repeat - Returns points interpolated along a line at a fractional interval.",
        "tags": [
          "(rpc) st_lineinterpolatepoints"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: a_linestring, a_fraction, repeat - Returns points interpolated along a line at a fractional interval.",
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "repeat": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: a_linestring, a_fraction, repeat - Returns points interpolated along a line at a fractional interval.",
        "tags": [
          "(rpc) st_lineinterpolatepoints"
        ]
      }
    },
    "/rpc/st_geogfromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geogfromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geogfromwkb"
        ]
      }
    },
    "/rpc/geometry_eq": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_eq"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_eq"
        ]
      }
    },
    "/rpc/st_setsrid": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "srid",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, srid - Set the SRID on a geometry.",
        "tags": [
          "(rpc) st_setsrid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, srid - Set the SRID on a geometry.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "srid": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom",
                "srid"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, srid - Set the SRID on a geometry.",
        "tags": [
          "(rpc) st_setsrid"
        ]
      }
    },
    "/rpc/get_user_permissions": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_user_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "uuid",
            "in": "query",
            "name": "p_tenant_id",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns aggregated user permissions including role-based and user-specific overrides",
        "tags": [
          "(rpc) get_user_permissions"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns aggregated user permissions including role-based and user-specific overrides",
              "properties": {
                "p_tenant_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns aggregated user permissions including role-based and user-specific overrides",
        "tags": [
          "(rpc) get_user_permissions"
        ]
      }
    },
    "/rpc/_st_crosses": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_crosses"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_crosses"
        ]
      }
    },
    "/rpc/st_shortestline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom1, geom2 - Returns the 2D shortest line between two geometries",
        "tags": [
          "(rpc) st_shortestline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom1, geom2 - Returns the 2D shortest line between two geometries",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom1, geom2 - Returns the 2D shortest line between two geometries",
        "tags": [
          "(rpc) st_shortestline"
        ]
      }
    },
    "/rpc/calculate_job_end_time": {
      "get": {
        "parameters": [
          {
            "format": "timestamp with time zone",
            "in": "query",
            "name": "start_time",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "duration_minutes",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) calculate_job_end_time"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "duration_minutes": {
                  "format": "integer",
                  "type": "integer"
                },
                "start_time": {
                  "format": "timestamp with time zone",
                  "type": "string"
                }
              },
              "required": [
                "start_time",
                "duration_minutes"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) calculate_job_end_time"
        ]
      }
    },
    "/rpc/st_pointz": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "xcoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "ycoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "zcoordinate",
            "required": true,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "srid",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, z, srid=unknown - Creates a Point with X, Y, Z and SRID values.",
        "tags": [
          "(rpc) st_pointz"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: x, y, z, srid=unknown - Creates a Point with X, Y, Z and SRID values.",
              "properties": {
                "srid": {
                  "format": "integer",
                  "type": "integer"
                },
                "xcoordinate": {
                  "format": "double precision",
                  "type": "number"
                },
                "ycoordinate": {
                  "format": "double precision",
                  "type": "number"
                },
                "zcoordinate": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "xcoordinate",
                "ycoordinate",
                "zcoordinate"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: x, y, z, srid=unknown - Creates a Point with X, Y, Z and SRID values.",
        "tags": [
          "(rpc) st_pointz"
        ]
      }
    },
    "/rpc/st_letters": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "letters",
            "required": true,
            "type": "string"
          },
          {
            "format": "json",
            "in": "query",
            "name": "font",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args:  letters,  font - Returns the input letters rendered as geometry with a default start position at the origin and default text height of 100.",
        "tags": [
          "(rpc) st_letters"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args:  letters,  font - Returns the input letters rendered as geometry with a default start position at the origin and default text height of 100.",
              "properties": {
                "font": {
                  "format": "json"
                },
                "letters": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "letters"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args:  letters,  font - Returns the input letters rendered as geometry with a default start position at the origin and default text height of 100.",
        "tags": [
          "(rpc) st_letters"
        ]
      }
    },
    "/rpc/st_overlaps": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_overlaps"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_overlaps"
        ]
      }
    },
    "/rpc/st_swapordinates": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "cstring",
            "in": "query",
            "name": "ords",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, ords - Returns a version of the given geometry with given ordinate values swapped.",
        "tags": [
          "(rpc) st_swapordinates"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, ords - Returns a version of the given geometry with given ordinate values swapped.",
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "ords": {
                  "format": "cstring",
                  "type": "string"
                }
              },
              "required": [
                "geom",
                "ords"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, ords - Returns a version of the given geometry with given ordinate values swapped.",
        "tags": [
          "(rpc) st_swapordinates"
        ]
      }
    },
    "/rpc/st_polyfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polyfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_polyfromtext"
        ]
      }
    },
    "/rpc/st_geomfromgeojson": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromgeojson"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromgeojson"
        ]
      }
    },
    "/rpc/process_voice_command": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_transcript_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.intent_type",
            "in": "query",
            "name": "p_intent_type",
            "required": true,
            "type": "string"
          },
          {
            "format": "jsonb",
            "in": "query",
            "name": "p_entities",
            "required": true,
            "type": "string"
          },
          {
            "format": "numeric",
            "in": "query",
            "name": "p_confidence",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) process_voice_command"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_confidence": {
                  "format": "numeric",
                  "type": "number"
                },
                "p_entities": {
                  "format": "jsonb"
                },
                "p_intent_type": {
                  "format": "public.intent_type",
                  "type": "string"
                },
                "p_transcript_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_transcript_id",
                "p_intent_type",
                "p_entities",
                "p_confidence"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) process_voice_command"
        ]
      }
    },
    "/rpc/st_curvetoline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tol",
            "required": false,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "toltype",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "flags",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: curveGeom, tolerance, tolerance_type, flags - Converts a geometry containing curves to a linear geometry.",
        "tags": [
          "(rpc) st_curvetoline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: curveGeom, tolerance, tolerance_type, flags - Converts a geometry containing curves to a linear geometry.",
              "properties": {
                "flags": {
                  "format": "integer",
                  "type": "integer"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "tol": {
                  "format": "double precision",
                  "type": "number"
                },
                "toltype": {
                  "format": "integer",
                  "type": "integer"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: curveGeom, tolerance, tolerance_type, flags - Converts a geometry containing curves to a linear geometry.",
        "tags": [
          "(rpc) st_curvetoline"
        ]
      }
    },
    "/rpc/_st_covers": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_covers"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_covers"
        ]
      }
    },
    "/rpc/st_scale": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "origin",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, factor, origin - Scales a geometry by given factors.",
        "tags": [
          "(rpc) st_scale"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, factor, origin - Scales a geometry by given factors.",
              "properties": {
                "": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "origin": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "",
                "",
                "origin"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, factor, origin - Scales a geometry by given factors.",
        "tags": [
          "(rpc) st_scale"
        ]
      }
    },
    "/rpc/_postgis_index_extent": {
      "get": {
        "parameters": [
          {
            "format": "regclass",
            "in": "query",
            "name": "tbl",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "col",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_index_extent"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "col": {
                  "format": "text",
                  "type": "string"
                },
                "tbl": {
                  "format": "regclass",
                  "type": "string"
                }
              },
              "required": [
                "tbl",
                "col"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _postgis_index_extent"
        ]
      }
    },
    "/rpc/geometry_same_3d": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_same_3d"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_same_3d"
        ]
      }
    },
    "/rpc/st_multilinestringfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multilinestringfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multilinestringfromtext"
        ]
      }
    },
    "/rpc/geometry_overleft": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overleft"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_overleft"
        ]
      }
    },
    "/rpc/st_geomfromkml": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromkml"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geomfromkml"
        ]
      }
    },
    "/rpc/st_asgeojson": {
      "get": {
        "parameters": [
          {
            "format": "record",
            "in": "query",
            "name": "r",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "geom_column",
            "required": false,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "maxdecimaldigits",
            "required": false,
            "type": "integer"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "pretty_bool",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asgeojson"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom_column": {
                  "format": "text",
                  "type": "string"
                },
                "maxdecimaldigits": {
                  "format": "integer",
                  "type": "integer"
                },
                "pretty_bool": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "r": {
                  "format": "record",
                  "type": "string"
                }
              },
              "required": [
                "r"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asgeojson"
        ]
      }
    },
    "/rpc/st_intersection": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "gridsize",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the shared portion of geometries A and B.",
        "tags": [
          "(rpc) st_intersection"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the shared portion of geometries A and B.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "gridsize": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the shared portion of geometries A and B.",
        "tags": [
          "(rpc) st_intersection"
        ]
      }
    },
    "/rpc/get_job_voice_summary": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_job_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_job_voice_summary"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "p_job_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_job_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_job_voice_summary"
        ]
      }
    },
    "/rpc/get_app_metadata": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_app_metadata"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) get_app_metadata"
        ]
      }
    },
    "/rpc/geometry_above": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_above"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_above"
        ]
      }
    },
    "/rpc/cleanup_expired_sessions": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Removes expired sessions and cleans up old session data",
        "tags": [
          "(rpc) cleanup_expired_sessions"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Removes expired sessions and cleans up old session data",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Removes expired sessions and cleans up old session data",
        "tags": [
          "(rpc) cleanup_expired_sessions"
        ]
      }
    },
    "/rpc/postgis_libjson_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_libjson_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_libjson_version"
        ]
      }
    },
    "/rpc/_st_maxdistance": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_maxdistance"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_maxdistance"
        ]
      }
    },
    "/rpc/st_orderingequals": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_orderingequals"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_orderingequals"
        ]
      }
    },
    "/rpc/st_node": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Nodes a collection of lines.",
        "tags": [
          "(rpc) st_node"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom - Nodes a collection of lines.",
              "properties": {
                "g": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "g"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom - Nodes a collection of lines.",
        "tags": [
          "(rpc) st_node"
        ]
      }
    },
    "/rpc/disablelongtransactions": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Disables long transaction support.",
        "tags": [
          "(rpc) disablelongtransactions"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Disables long transaction support.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Disables long transaction support.",
        "tags": [
          "(rpc) disablelongtransactions"
        ]
      }
    },
    "/rpc/st_frechetdistance": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2, densifyFrac = -1 - Returns the Fr\u00e9chet distance between two geometries.",
        "tags": [
          "(rpc) st_frechetdistance"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2, densifyFrac = -1 - Returns the Fr\u00e9chet distance between two geometries.",
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2, densifyFrac = -1 - Returns the Fr\u00e9chet distance between two geometries.",
        "tags": [
          "(rpc) st_frechetdistance"
        ]
      }
    },
    "/rpc/_st_containsproperly": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_containsproperly"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_containsproperly"
        ]
      }
    },
    "/rpc/st_dwithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": true,
            "type": "number"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_spheroid",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_dwithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geog1": {
                  "format": "public.geography",
                  "type": "string"
                },
                "geog2": {
                  "format": "public.geography",
                  "type": "string"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                },
                "use_spheroid": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geog1",
                "geog2",
                "tolerance"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_dwithin"
        ]
      }
    },
    "/rpc/validate_voice_session": {
      "get": {
        "parameters": [
          {
            "format": "uuid",
            "in": "query",
            "name": "p_user_id",
            "required": true,
            "type": "string"
          },
          {
            "format": "uuid",
            "in": "query",
            "name": "p_session_id",
            "required": false,
            "type": "string"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "p_extend_timeout",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Validates and optionally extends voice session timeouts",
        "tags": [
          "(rpc) validate_voice_session"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Validates and optionally extends voice session timeouts",
              "properties": {
                "p_extend_timeout": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "p_session_id": {
                  "format": "uuid",
                  "type": "string"
                },
                "p_user_id": {
                  "format": "uuid",
                  "type": "string"
                }
              },
              "required": [
                "p_user_id"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Validates and optionally extends voice session timeouts",
        "tags": [
          "(rpc) validate_voice_session"
        ]
      }
    },
    "/rpc/st_multilinefromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multilinefromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_multilinefromwkb"
        ]
      }
    },
    "/rpc/_st_voronoi": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "clip",
            "required": false,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": false,
            "type": "number"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "return_polygons",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_voronoi"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "clip": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "g1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "return_polygons": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "g1"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_voronoi"
        ]
      }
    },
    "/rpc/st_unaryunion": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "gridsize",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, gridSize = -1 - Computes the union of the components of a single geometry.",
        "tags": [
          "(rpc) st_unaryunion"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, gridSize = -1 - Computes the union of the components of a single geometry.",
              "properties": {
                "": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "gridsize": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, gridSize = -1 - Computes the union of the components of a single geometry.",
        "tags": [
          "(rpc) st_unaryunion"
        ]
      }
    },
    "/rpc/st_3dmakebox": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by two 3D point geometries.",
        "tags": [
          "(rpc) st_3dmakebox"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by two 3D point geometries.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by two 3D point geometries.",
        "tags": [
          "(rpc) st_3dmakebox"
        ]
      }
    },
    "/rpc/_st_sortablehash": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_sortablehash"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_sortablehash"
        ]
      }
    },
    "/rpc/st_mlinefromwkb": {
      "get": {
        "parameters": [
          {
            "format": "bytea",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mlinefromwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "bytea",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_mlinefromwkb"
        ]
      }
    },
    "/rpc/_st_3ddfullywithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_3ddfullywithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_3ddfullywithin"
        ]
      }
    },
    "/rpc/_st_overlaps": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_overlaps"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) _st_overlaps"
        ]
      }
    },
    "/rpc/st_asmarc21": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "text",
            "in": "query",
            "name": "format",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asmarc21"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "format": {
                  "format": "text",
                  "type": "string"
                },
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_asmarc21"
        ]
      }
    },
    "/rpc/postgis_scripts_installed": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns version of the PostGIS scripts installed in this database.",
        "tags": [
          "(rpc) postgis_scripts_installed"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns version of the PostGIS scripts installed in this database.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns version of the PostGIS scripts installed in this database.",
        "tags": [
          "(rpc) postgis_scripts_installed"
        ]
      }
    },
    "/rpc/postgis_libxml_version": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the libxml2 library.",
        "tags": [
          "(rpc) postgis_libxml_version"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns the version number of the libxml2 library.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the libxml2 library.",
        "tags": [
          "(rpc) postgis_libxml_version"
        ]
      }
    },
    "/rpc/geometry": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry"
        ]
      }
    },
    "/rpc/st_geometricmedian": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "g",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "tolerance",
            "required": false,
            "type": "number"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "max_iter",
            "required": false,
            "type": "integer"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "fail_if_not_converged",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, tolerance = NULL, max_iter = 10000, fail_if_not_converged = false - Returns the geometric median of a MultiPoint.",
        "tags": [
          "(rpc) st_geometricmedian"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom, tolerance = NULL, max_iter = 10000, fail_if_not_converged = false - Returns the geometric median of a MultiPoint.",
              "properties": {
                "fail_if_not_converged": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "g": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "max_iter": {
                  "format": "integer",
                  "type": "integer"
                },
                "tolerance": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "g"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom, tolerance = NULL, max_iter = 10000, fail_if_not_converged = false - Returns the geometric median of a MultiPoint.",
        "tags": [
          "(rpc) st_geometricmedian"
        ]
      }
    },
    "/rpc/st_geographyfromtext": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geographyfromtext"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_geographyfromtext"
        ]
      }
    },
    "/rpc/postgis_lib_revision": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_lib_revision"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) postgis_lib_revision"
        ]
      }
    },
    "/rpc/st_maxdistance": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 2D largest distance between two geometries in projected units.",
        "tags": [
          "(rpc) st_maxdistance"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: g1, g2 - Returns the 2D largest distance between two geometries in projected units.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: g1, g2 - Returns the 2D largest distance between two geometries in projected units.",
        "tags": [
          "(rpc) st_maxdistance"
        ]
      }
    },
    "/rpc/st_hexagongrid": {
      "get": {
        "parameters": [
          {
            "format": "double precision",
            "in": "query",
            "name": "size",
            "required": true,
            "type": "number"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "bounds",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, bounds - Returns a set of hexagons and cell indices that completely cover the bounds of the geometry argument.",
        "tags": [
          "(rpc) st_hexagongrid"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: size, bounds - Returns a set of hexagons and cell indices that completely cover the bounds of the geometry argument.",
              "properties": {
                "bounds": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "size": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "size",
                "bounds"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: size, bounds - Returns a set of hexagons and cell indices that completely cover the bounds of the geometry argument.",
        "tags": [
          "(rpc) st_hexagongrid"
        ]
      }
    },
    "/rpc/st_astwkb": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry[]",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "bigint[]",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "prec",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "prec_z",
            "required": false,
            "type": "integer"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "prec_m",
            "required": false,
            "type": "integer"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "with_sizes",
            "required": false,
            "type": "boolean"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "with_boxes",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_astwkb"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry[]",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "ids": {
                  "format": "bigint[]",
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                "prec": {
                  "format": "integer",
                  "type": "integer"
                },
                "prec_m": {
                  "format": "integer",
                  "type": "integer"
                },
                "prec_z": {
                  "format": "integer",
                  "type": "integer"
                },
                "with_boxes": {
                  "format": "boolean",
                  "type": "boolean"
                },
                "with_sizes": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geom",
                "ids"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_astwkb"
        ]
      }
    },
    "/rpc/st_dfullywithin": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "",
            "required": true,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_dfullywithin"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "double precision",
                  "type": "number"
                },
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2",
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_dfullywithin"
        ]
      }
    },
    "/rpc/unlockrows": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: auth_token - Removes all locks held by an authorization token.",
        "tags": [
          "(rpc) unlockrows"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: auth_token - Removes all locks held by an authorization token.",
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: auth_token - Removes all locks held by an authorization token.",
        "tags": [
          "(rpc) unlockrows"
        ]
      }
    },
    "/rpc/geomfromewkt": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geomfromewkt"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                ""
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geomfromewkt"
        ]
      }
    },
    "/rpc/st_askml": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom",
            "required": true,
            "type": "string"
          },
          {
            "format": "integer",
            "in": "query",
            "name": "maxdecimaldigits",
            "required": false,
            "type": "integer"
          },
          {
            "format": "text",
            "in": "query",
            "name": "nprefix",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_askml"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "maxdecimaldigits": {
                  "format": "integer",
                  "type": "integer"
                },
                "nprefix": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "geom"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) st_askml"
        ]
      }
    },
    "/rpc/postgis_scripts_released": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the postgis.sql script released with the installed PostGIS lib.",
        "tags": [
          "(rpc) postgis_scripts_released"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "Returns the version number of the postgis.sql script released with the installed PostGIS lib.",
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "Returns the version number of the postgis.sql script released with the installed PostGIS lib.",
        "tags": [
          "(rpc) postgis_scripts_released"
        ]
      }
    },
    "/rpc/st_difference": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          },
          {
            "format": "double precision",
            "in": "query",
            "name": "gridsize",
            "required": false,
            "type": "number"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the part of geometry A that does not intersect geometry B.",
        "tags": [
          "(rpc) st_difference"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the part of geometry A that does not intersect geometry B.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "gridsize": {
                  "format": "double precision",
                  "type": "number"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geomA, geomB, gridSize = -1 - Computes a geometry representing the part of geometry A that does not intersect geometry B.",
        "tags": [
          "(rpc) st_difference"
        ]
      }
    },
    "/rpc/st_perimeter": {
      "get": {
        "parameters": [
          {
            "format": "public.geography",
            "in": "query",
            "name": "geog",
            "required": true,
            "type": "string"
          },
          {
            "format": "boolean",
            "in": "query",
            "name": "use_spheroid",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, use_spheroid=true - Returns the length of the boundary of a polygonal geometry or geography.",
        "tags": [
          "(rpc) st_perimeter"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geog, use_spheroid=true - Returns the length of the boundary of a polygonal geometry or geography.",
              "properties": {
                "geog": {
                  "format": "public.geography",
                  "type": "string"
                },
                "use_spheroid": {
                  "format": "boolean",
                  "type": "boolean"
                }
              },
              "required": [
                "geog"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geog, use_spheroid=true - Returns the length of the boundary of a polygonal geometry or geography.",
        "tags": [
          "(rpc) st_perimeter"
        ]
      }
    },
    "/rpc/is_developer": {
      "get": {
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) is_developer"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) is_developer"
        ]
      }
    },
    "/rpc/exec_sql": {
      "get": {
        "parameters": [
          {
            "format": "text",
            "in": "query",
            "name": "sql",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) exec_sql"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "sql": {
                  "format": "text",
                  "type": "string"
                }
              },
              "required": [
                "sql"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) exec_sql"
        ]
      }
    },
    "/rpc/st_makeline": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom1, geom2 - Creates a LineString from Point, MultiPoint, or LineString geometries.",
        "tags": [
          "(rpc) st_makeline"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "description": "args: geom1, geom2 - Creates a LineString from Point, MultiPoint, or LineString geometries.",
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "summary": "args: geom1, geom2 - Creates a LineString from Point, MultiPoint, or LineString geometries.",
        "tags": [
          "(rpc) st_makeline"
        ]
      }
    },
    "/rpc/geometry_distance_box": {
      "get": {
        "parameters": [
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom1",
            "required": true,
            "type": "string"
          },
          {
            "format": "public.geometry",
            "in": "query",
            "name": "geom2",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_distance_box"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "args",
            "required": true,
            "schema": {
              "properties": {
                "geom1": {
                  "format": "public.geometry",
                  "type": "string"
                },
                "geom2": {
                  "format": "public.geometry",
                  "type": "string"
                }
              },
              "required": [
                "geom1",
                "geom2"
              ],
              "type": "object"
            }
          },
          {
            "$ref": "#/parameters/preferParams"
          }
        ],
        "produces": [
          "application/json",
          "application/vnd.pgrst.object+json;nulls=stripped",
          "application/vnd.pgrst.object+json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "(rpc) geometry_distance_box"
        ]
      }
    }
  },
  "definitions": {
    "active_jobs_view": {
      "properties": {
        "id": {
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "job_number": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "template_id": {
          "format": "uuid",
          "type": "string"
        },
        "customer_id": {
          "description": "Note:\nThis is a Foreign Key to `customers.id`.<fk table='customers' column='id'/>",
          "format": "text",
          "type": "string"
        },
        "property_id": {
          "description": "Note:\nThis is a Foreign Key to `properties.id`.<fk table='properties' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "title": {
          "format": "character varying",
          "maxLength": 255,
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "status": {
          "enum": [
            "draft",
            "scheduled",
            "dispatched",
            "in_progress",
            "paused",
            "completed",
            "cancelled",
            "failed",
            "voice_created"
          ],
          "format": "public.job_status",
          "type": "string"
        },
        "priority": {
          "enum": [
            "low",
            "normal",
            "high",
            "urgent",
            "emergency"
          ],
          "format": "public.job_priority",
          "type": "string"
        },
        "scheduled_start": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "scheduled_end": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "actual_start": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "actual_end": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "assigned_to": {
          "description": "Note:\nThis is a Foreign Key to `users_extended.id`.<fk table='users_extended' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "assigned_team": {
          "format": "uuid[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "estimated_duration": {
          "format": "integer",
          "type": "integer"
        },
        "actual_duration": {
          "format": "integer",
          "type": "integer"
        },
        "completion_notes": {
          "format": "text",
          "type": "string"
        },
        "voice_notes": {
          "format": "text",
          "type": "string"
        },
        "voice_created": {
          "format": "boolean",
          "type": "boolean"
        },
        "voice_session_id": {
          "format": "uuid",
          "type": "string"
        },
        "checklist_items": {
          "format": "jsonb"
        },
        "materials_used": {
          "format": "jsonb"
        },
        "equipment_used": {
          "format": "uuid[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "photos_before": {
          "format": "jsonb"
        },
        "photos_after": {
          "format": "jsonb"
        },
        "signature_required": {
          "format": "boolean",
          "type": "boolean"
        },
        "signature_data": {
          "format": "jsonb"
        },
        "billing_info": {
          "format": "jsonb"
        },
        "metadata": {
          "format": "jsonb"
        },
        "created_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_by": {
          "format": "uuid",
          "type": "string"
        },
        "customer_name": {
          "format": "character varying",
          "maxLength": 255,
          "type": "string"
        },
        "customer_phone": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "property_name": {
          "format": "character varying",
          "maxLength": 255,
          "type": "string"
        },
        "property_address": {
          "format": "jsonb"
        },
        "assigned_to_name": {
          "format": "text",
          "type": "string"
        }
      },
      "type": "object"
    },
    "vendors": {
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "format": "text",
          "type": "string"
        },
        "is_active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "intake_session_id": {
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "auth_audit_log": {
      "description": "Authentication and authorization event audit trail",
      "required": [
        "id",
        "event_type",
        "created_at"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "event_type": {
          "enum": [
            "login_success",
            "login_failed",
            "logout_success",
            "registration_success",
            "registration_failed",
            "refresh_success",
            "refresh_failed",
            "password_reset",
            "mfa_setup",
            "mfa_failed"
          ],
          "format": "public.auth_event_type",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "user_email": {
          "format": "text",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "session_id": {
          "description": "Note:\nThis is a Foreign Key to `user_sessions.id`.<fk table='user_sessions' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "ip_address": {
          "format": "inet",
          "type": "string"
        },
        "user_agent": {
          "format": "text",
          "type": "string"
        },
        "device_type": {
          "enum": [
            "mobile",
            "desktop",
            "tablet",
            "voice_assistant"
          ],
          "format": "public.device_type",
          "type": "string"
        },
        "location": {
          "format": "jsonb"
        },
        "success": {
          "format": "boolean",
          "type": "boolean"
        },
        "reason": {
          "format": "text",
          "type": "string"
        },
        "error_code": {
          "format": "text",
          "type": "string"
        },
        "risk_score": {
          "format": "integer",
          "type": "integer"
        },
        "details": {
          "format": "jsonb"
        },
        "voice_command": {
          "format": "text",
          "type": "string"
        },
        "voice_confidence": {
          "format": "numeric",
          "type": "number"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "invoices": {
      "required": [
        "id",
        "tenant_id",
        "invoice_number",
        "amount",
        "status",
        "created_by",
        "due_date",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "invoice_number": {
          "format": "text",
          "type": "string"
        },
        "customer_id": {
          "format": "uuid",
          "type": "string"
        },
        "job_id": {
          "description": "Note:\nThis is a Foreign Key to `jobs.id`.<fk table='jobs' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "amount": {
          "format": "numeric",
          "type": "number"
        },
        "tax_amount": {
          "default": 0,
          "format": "numeric",
          "type": "number"
        },
        "total_amount": {
          "format": "numeric",
          "type": "number"
        },
        "status": {
          "default": "draft",
          "format": "text",
          "type": "string"
        },
        "created_by": {
          "format": "uuid",
          "type": "string"
        },
        "due_date": {
          "format": "date",
          "type": "string"
        },
        "paid_date": {
          "format": "date",
          "type": "string"
        },
        "payment_method": {
          "format": "text",
          "type": "string"
        },
        "notes": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "gps_tracking_records": {
      "required": [
        "id",
        "tenant_id",
        "user_id",
        "latitude",
        "longitude",
        "accuracy_meters",
        "recorded_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "description": "Note:\nThis is a Foreign Key to `users_extended.id`.<fk table='users_extended' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "job_id": {
          "description": "Note:\nThis is a Foreign Key to `jobs.id`.<fk table='jobs' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "latitude": {
          "format": "double precision",
          "type": "number"
        },
        "longitude": {
          "format": "double precision",
          "type": "number"
        },
        "accuracy_meters": {
          "format": "double precision",
          "type": "number"
        },
        "altitude_meters": {
          "format": "double precision",
          "type": "number"
        },
        "speed_mps": {
          "format": "double precision",
          "type": "number"
        },
        "heading_degrees": {
          "format": "double precision",
          "type": "number"
        },
        "recorded_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "accuracy": {
          "format": "double precision",
          "type": "number"
        },
        "altitude": {
          "format": "double precision",
          "type": "number"
        },
        "speed": {
          "format": "double precision",
          "type": "number"
        },
        "heading": {
          "format": "double precision",
          "type": "number"
        },
        "timestamp": {
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenant_assignments": {
      "description": "Multi-tenant user access assignments",
      "required": [
        "id",
        "user_id",
        "tenant_id",
        "role",
        "is_primary",
        "assigned_at",
        "is_active"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "role": {
          "enum": [
            "admin",
            "manager",
            "technician",
            "customer"
          ],
          "format": "public.user_role",
          "type": "string"
        },
        "is_primary": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "assigned_by": {
          "format": "uuid",
          "type": "string"
        },
        "assigned_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "expires_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "is_active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "access_level": {
          "default": 1,
          "format": "integer",
          "type": "integer"
        },
        "permissions_override": {
          "format": "jsonb"
        },
        "last_accessed_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "access_count": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "vendor_aliases": {
      "required": [
        "id",
        "vendor_id",
        "alias"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "vendor_id": {
          "description": "Note:\nThis is a Foreign Key to `vendors.id`.<fk table='vendors' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "alias": {
          "format": "text",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "code_pattern_violations": {
      "required": [
        "id",
        "file_path",
        "line_number",
        "column_number",
        "pattern_type",
        "violation_text",
        "suggested_fix",
        "is_fixed",
        "created_at"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "file_path": {
          "format": "character varying",
          "maxLength": 500,
          "type": "string"
        },
        "line_number": {
          "format": "integer",
          "type": "integer"
        },
        "column_number": {
          "format": "integer",
          "type": "integer"
        },
        "pattern_type": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "violation_text": {
          "format": "text",
          "type": "string"
        },
        "suggested_fix": {
          "format": "text",
          "type": "string"
        },
        "is_fixed": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "fixed_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "geofence_events": {
      "required": [
        "id",
        "tenant_id",
        "geofence_id",
        "user_id",
        "event_type",
        "latitude",
        "longitude",
        "timestamp"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "geofence_id": {
          "description": "Note:\nThis is a Foreign Key to `geofences.id`.<fk table='geofences' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "description": "Note:\nThis is a Foreign Key to `users_extended.id`.<fk table='users_extended' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "event_type": {
          "format": "text",
          "type": "string"
        },
        "latitude": {
          "format": "double precision",
          "type": "number"
        },
        "longitude": {
          "format": "double precision",
          "type": "number"
        },
        "timestamp": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "role_permissions": {
      "description": "Permission assignments to user roles",
      "required": [
        "id",
        "role",
        "permission_id",
        "granted_at",
        "is_active"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "role": {
          "enum": [
            "admin",
            "manager",
            "technician",
            "customer"
          ],
          "format": "public.user_role",
          "type": "string"
        },
        "permission_id": {
          "description": "Note:\nThis is a Foreign Key to `permissions.id`.<fk table='permissions' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "granted_by": {
          "format": "uuid",
          "type": "string"
        },
        "granted_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "expires_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "is_active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "conditions": {
          "format": "jsonb"
        }
      },
      "type": "object"
    },
    "user_invitations": {
      "description": "Invitation-based user registration system",
      "required": [
        "id",
        "email",
        "tenant_id",
        "role",
        "invitation_code",
        "invited_by",
        "invited_at",
        "expires_at",
        "is_used"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "email": {
          "format": "text",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "role": {
          "default": "customer",
          "enum": [
            "admin",
            "manager",
            "technician",
            "customer"
          ],
          "format": "public.user_role",
          "type": "string"
        },
        "invitation_code": {
          "format": "text",
          "type": "string"
        },
        "invited_by": {
          "format": "uuid",
          "type": "string"
        },
        "invited_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "expires_at": {
          "default": "(now() + '7 days'::interval)",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "accepted_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "accepted_by": {
          "format": "uuid",
          "type": "string"
        },
        "is_used": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "welcome_message": {
          "format": "text",
          "type": "string"
        },
        "permissions_preset": {
          "format": "jsonb"
        },
        "voice_onboarding_enabled": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "metadata": {
          "format": "jsonb"
        }
      },
      "type": "object"
    },
    "user_assignments": {
      "required": [
        "id",
        "user_id",
        "tenant_id",
        "role"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "text",
          "type": "string"
        },
        "role": {
          "format": "text",
          "type": "string"
        },
        "is_active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "voice_profiles": {
      "description": "Voice preferences and biometric patterns",
      "required": [
        "id",
        "user_id",
        "language_code",
        "voice_feedback_enabled",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "wake_word": {
          "default": "hey assistant",
          "format": "text",
          "type": "string"
        },
        "speech_rate": {
          "default": 1.0,
          "format": "numeric",
          "type": "number"
        },
        "voice_pitch": {
          "default": 1.0,
          "format": "numeric",
          "type": "number"
        },
        "preferred_voice": {
          "format": "text",
          "type": "string"
        },
        "language_code": {
          "default": "en-US",
          "format": "text",
          "type": "string"
        },
        "voice_feedback_enabled": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "voice_feedback_level": {
          "default": "standard",
          "format": "text",
          "type": "string"
        },
        "preferred_tts_provider": {
          "default": "system",
          "format": "text",
          "type": "string"
        },
        "voice_pattern_hash": {
          "format": "text",
          "type": "string"
        },
        "confidence_threshold": {
          "default": 0.8,
          "format": "numeric",
          "type": "number"
        },
        "voice_samples_collected": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "last_voice_training_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "voice_recognition_provider": {
          "default": "system",
          "format": "text",
          "type": "string"
        },
        "noise_cancellation_enabled": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "voice_commands_enabled": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "accessibility_voice_navigation": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "onboarding_completed": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "voice_analytics": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "notifications": {
      "required": [
        "id",
        "user_id",
        "notification_type",
        "title",
        "message",
        "priority"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "notification_type": {
          "format": "text",
          "type": "string"
        },
        "title": {
          "format": "text",
          "type": "string"
        },
        "message": {
          "format": "text",
          "type": "string"
        },
        "priority": {
          "format": "text",
          "type": "string"
        },
        "related_entity_type": {
          "format": "text",
          "type": "string"
        },
        "related_entity_id": {
          "format": "uuid",
          "type": "string"
        },
        "read_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "customer_feedback": {
      "required": [
        "id",
        "tenant_id",
        "feedback_type",
        "description",
        "reported_by",
        "status",
        "created_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "customer_id": {
          "format": "uuid",
          "type": "string"
        },
        "job_id": {
          "description": "Note:\nThis is a Foreign Key to `jobs.id`.<fk table='jobs' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "feedback_type": {
          "format": "text",
          "type": "string"
        },
        "severity": {
          "format": "text",
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "reported_by": {
          "format": "uuid",
          "type": "string"
        },
        "status": {
          "default": "open",
          "format": "text",
          "type": "string"
        },
        "escalated_to": {
          "format": "uuid",
          "type": "string"
        },
        "escalation_notes": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "resolved_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "resolution_notes": {
          "format": "text",
          "type": "string"
        }
      },
      "type": "object"
    },
    "geofences": {
      "required": [
        "id",
        "tenant_id",
        "name",
        "center_latitude",
        "center_longitude",
        "radius_meters"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "job_id": {
          "description": "Note:\nThis is a Foreign Key to `jobs.id`.<fk table='jobs' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "format": "text",
          "type": "string"
        },
        "center_latitude": {
          "format": "double precision",
          "type": "number"
        },
        "center_longitude": {
          "format": "double precision",
          "type": "number"
        },
        "radius_meters": {
          "format": "double precision",
          "type": "number"
        },
        "active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dev_project_standards": {
      "description": "Stores project standards documentation for the Control Tower dashboard",
      "required": [
        "id",
        "document_title",
        "document_content",
        "version",
        "last_updated_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "document_title": {
          "format": "text",
          "type": "string"
        },
        "document_content": {
          "format": "text",
          "type": "string"
        },
        "version": {
          "format": "text",
          "type": "string"
        },
        "last_updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_by": {
          "format": "uuid",
          "type": "string"
        },
        "category": {
          "default": "general",
          "description": "Category of the standard (e.g., architecture, security, voice-first)",
          "format": "text",
          "type": "string"
        },
        "is_active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "tags": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "users_extended": {
      "description": "Extended user profiles with tenant and role information",
      "required": [
        "id",
        "tenant_id",
        "role",
        "is_active",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "role": {
          "default": "customer",
          "enum": [
            "admin",
            "manager",
            "technician",
            "customer"
          ],
          "format": "public.user_role",
          "type": "string"
        },
        "display_name": {
          "format": "text",
          "type": "string"
        },
        "first_name": {
          "format": "text",
          "type": "string"
        },
        "last_name": {
          "format": "text",
          "type": "string"
        },
        "phone": {
          "format": "text",
          "type": "string"
        },
        "avatar_url": {
          "format": "text",
          "type": "string"
        },
        "timezone": {
          "default": "UTC",
          "format": "text",
          "type": "string"
        },
        "preferred_language": {
          "default": "en-US",
          "format": "text",
          "type": "string"
        },
        "is_active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "email_verified_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "phone_verified_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "last_login_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "password_changed_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "terms_accepted_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "privacy_policy_accepted_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "marketing_consent": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "two_factor_enabled": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "failed_login_attempts": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "locked_until": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "metadata": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ocr_note_entities": {
      "required": [
        "id",
        "label"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "ocr_document_id": {
          "description": "Note:\nThis is a Foreign Key to `ocr_documents.id`.<fk table='ocr_documents' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "label": {
          "format": "text",
          "type": "string"
        },
        "value": {
          "format": "text",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "safety_checklists": {
      "required": [
        "id",
        "tenant_id",
        "job_id",
        "user_id",
        "checklist_items",
        "completion_status"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "job_id": {
          "description": "Note:\nThis is a Foreign Key to `jobs.id`.<fk table='jobs' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "description": "Note:\nThis is a Foreign Key to `users_extended.id`.<fk table='users_extended' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "checklist_items": {
          "format": "jsonb"
        },
        "completion_status": {
          "default": "in_progress",
          "format": "text",
          "type": "string"
        },
        "completed_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "supervisor_approved": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "supervisor_id": {
          "description": "Note:\nThis is a Foreign Key to `users_extended.id`.<fk table='users_extended' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "supervisor_notes": {
          "format": "text",
          "type": "string"
        }
      },
      "type": "object"
    },
    "customers": {
      "required": [
        "id",
        "customer_number",
        "name"
      ],
      "properties": {
        "id": {
          "default": "(gen_random_uuid())",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "text",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "customer_number": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "name": {
          "format": "character varying",
          "maxLength": 255,
          "type": "string"
        },
        "email": {
          "format": "character varying",
          "maxLength": 255,
          "type": "string"
        },
        "phone": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "mobile_phone": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "billing_address": {
          "format": "jsonb"
        },
        "service_address": {
          "format": "jsonb"
        },
        "notes": {
          "format": "text",
          "type": "string"
        },
        "tags": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "voice_notes": {
          "format": "text",
          "type": "string"
        },
        "is_active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "metadata": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_by": {
          "format": "uuid",
          "type": "string"
        },
        "version": {
          "default": 1,
          "format": "integer",
          "type": "integer"
        },
        "intake_session_id": {
          "format": "uuid",
          "type": "string"
        },
        "thumbnail_url": {
          "format": "text",
          "type": "string"
        },
        "medium_url": {
          "format": "text",
          "type": "string"
        },
        "primary_image_url": {
          "format": "text",
          "type": "string"
        }
      },
      "type": "object"
    },
    "geometry_columns": {
      "properties": {
        "f_table_catalog": {
          "format": "character varying",
          "maxLength": 256,
          "type": "string"
        },
        "f_table_schema": {
          "format": "name",
          "type": "string"
        },
        "f_table_name": {
          "format": "name",
          "type": "string"
        },
        "f_geometry_column": {
          "format": "name",
          "type": "string"
        },
        "coord_dimension": {
          "format": "integer",
          "type": "integer"
        },
        "srid": {
          "format": "integer",
          "type": "integer"
        },
        "type": {
          "format": "character varying",
          "maxLength": 30,
          "type": "string"
        }
      },
      "type": "object"
    },
    "kit_variants": {
      "required": [
        "id",
        "tenant_id",
        "kit_id",
        "variant_code",
        "name",
        "is_default",
        "metadata",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "description": "Note:\nThis is a Foreign Key to `companies.id`.<fk table='companies' column='id'/>",
          "format": "text",
          "type": "string"
        },
        "kit_id": {
          "description": "Note:\nThis is a Foreign Key to `kits.id`.<fk table='kits' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "variant_code": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "name": {
          "format": "character varying",
          "maxLength": 255,
          "type": "string"
        },
        "is_default": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "metadata": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenant_members": {
      "required": [
        "id",
        "tenant_id",
        "user_id",
        "role",
        "status"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "description": "Note:\nThis is a Foreign Key to `tenants.id`.<fk table='tenants' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "role": {
          "default": "member",
          "format": "text",
          "type": "string"
        },
        "status": {
          "default": "pending",
          "format": "text",
          "type": "string"
        },
        "joined_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "invited_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "invited_by": {
          "format": "uuid",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenant_invitations": {
      "required": [
        "id",
        "tenant_id",
        "email",
        "role",
        "status",
        "token",
        "expires_at",
        "created_by"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "description": "Note:\nThis is a Foreign Key to `tenants.id`.<fk table='tenants' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "email": {
          "format": "text",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "role": {
          "default": "member",
          "format": "text",
          "type": "string"
        },
        "status": {
          "default": "pending",
          "format": "text",
          "type": "string"
        },
        "token": {
          "default": "encode(extensions.gen_random_bytes(32), 'hex'::text)",
          "format": "text",
          "type": "string"
        },
        "expires_at": {
          "default": "(now() + '7 days'::interval)",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_by": {
          "format": "uuid",
          "type": "string"
        },
        "accepted_at": {
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "vendor_locations": {
      "required": [
        "id",
        "vendor_id"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "vendor_id": {
          "description": "Note:\nThis is a Foreign Key to `vendors.id`.<fk table='vendors' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "address": {
          "format": "text",
          "type": "string"
        },
        "city": {
          "format": "text",
          "type": "string"
        },
        "state": {
          "format": "text",
          "type": "string"
        },
        "postal_code": {
          "format": "text",
          "type": "string"
        },
        "country": {
          "format": "text",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "audit_logs": {
      "required": [
        "id",
        "tenant_id",
        "entity_type",
        "entity_id",
        "action",
        "performed_by",
        "created_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "entity_type": {
          "format": "text",
          "type": "string"
        },
        "entity_id": {
          "format": "uuid",
          "type": "string"
        },
        "action": {
          "format": "text",
          "type": "string"
        },
        "performed_by": {
          "format": "uuid",
          "type": "string"
        },
        "details": {
          "format": "jsonb"
        },
        "ip_address": {
          "format": "text",
          "type": "string"
        },
        "user_agent": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "daily_reports": {
      "required": [
        "id",
        "report_date",
        "created_by",
        "technician_count",
        "jobs_assigned"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "report_date": {
          "format": "date",
          "type": "string"
        },
        "created_by": {
          "format": "uuid",
          "type": "string"
        },
        "technician_count": {
          "format": "integer",
          "type": "integer"
        },
        "jobs_assigned": {
          "format": "integer",
          "type": "integer"
        },
        "equipment_audit_id": {
          "format": "uuid",
          "type": "string"
        },
        "summary_text": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "intake_requests": {
      "required": [
        "id",
        "tenant_id",
        "customer_name",
        "status",
        "priority"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "customer_name": {
          "format": "text",
          "type": "string"
        },
        "customer_email": {
          "format": "text",
          "type": "string"
        },
        "customer_phone": {
          "format": "text",
          "type": "string"
        },
        "service_type": {
          "format": "text",
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "status": {
          "default": "new",
          "format": "text",
          "type": "string"
        },
        "priority": {
          "default": "medium",
          "format": "text",
          "type": "string"
        },
        "converted_to_job_id": {
          "description": "Note:\nThis is a Foreign Key to `jobs.id`.<fk table='jobs' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "assigned_to": {
          "description": "Note:\nThis is a Foreign Key to `users_extended.id`.<fk table='users_extended' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "lead_score": {
          "format": "integer",
          "type": "integer"
        },
        "converted_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "request_source": {
          "default": "website",
          "format": "text",
          "type": "string"
        },
        "source": {
          "default": "website",
          "format": "text",
          "type": "string"
        }
      },
      "type": "object"
    },
    "kit_assignments": {
      "required": [
        "id",
        "kit_id",
        "external_ref",
        "metadata",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "kit_id": {
          "description": "Note:\nThis is a Foreign Key to `kits.id`.<fk table='kits' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "variant_id": {
          "description": "Note:\nThis is a Foreign Key to `kit_variants.id`.<fk table='kit_variants' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "external_ref": {
          "format": "text",
          "type": "string"
        },
        "notes": {
          "format": "text",
          "type": "string"
        },
        "metadata": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "equipment_maintenance": {
      "required": [
        "id",
        "equipment_id",
        "performed_by",
        "maintenance_type",
        "maintenance_date",
        "status"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "equipment_id": {
          "format": "text",
          "type": "string"
        },
        "performed_by": {
          "format": "uuid",
          "type": "string"
        },
        "maintenance_type": {
          "format": "text",
          "type": "string"
        },
        "maintenance_date": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "actions_performed": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "pre_maintenance_verification_id": {
          "format": "uuid",
          "type": "string"
        },
        "post_maintenance_verification_id": {
          "format": "uuid",
          "type": "string"
        },
        "status": {
          "format": "text",
          "type": "string"
        },
        "completion_date": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "notes": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "repository_inventory": {
      "required": [
        "id",
        "domain",
        "repository_name",
        "file_path",
        "pattern_type",
        "target_pattern",
        "migration_status",
        "dependencies_count",
        "created_at"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "domain": {
          "format": "character varying",
          "maxLength": 255,
          "type": "string"
        },
        "repository_name": {
          "format": "character varying",
          "maxLength": 255,
          "type": "string"
        },
        "file_path": {
          "format": "character varying",
          "maxLength": 500,
          "type": "string"
        },
        "pattern_type": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "target_pattern": {
          "default": "class_based",
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "migration_status": {
          "default": "pending",
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "dependencies_count": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "migrated_at": {
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "training_certificates": {
      "required": [
        "id",
        "tenant_id",
        "training_session_id",
        "trainee_id",
        "certificate_type",
        "issued_date",
        "status"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "text",
          "type": "string"
        },
        "training_session_id": {
          "format": "uuid",
          "type": "string"
        },
        "trainee_id": {
          "format": "uuid",
          "type": "string"
        },
        "certificate_type": {
          "format": "text",
          "type": "string"
        },
        "issued_date": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "score": {
          "format": "numeric",
          "type": "number"
        },
        "status": {
          "format": "text",
          "type": "string"
        },
        "expires_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "item_availability": {
      "properties": {
        "id": {
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "item_type": {
          "format": "text",
          "type": "string"
        },
        "category": {
          "format": "text",
          "type": "string"
        },
        "tracking_mode": {
          "format": "text",
          "type": "string"
        },
        "name": {
          "format": "text",
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "manufacturer": {
          "format": "text",
          "type": "string"
        },
        "model": {
          "format": "text",
          "type": "string"
        },
        "serial_number": {
          "format": "text",
          "type": "string"
        },
        "sku": {
          "format": "text",
          "type": "string"
        },
        "barcode": {
          "format": "text",
          "type": "string"
        },
        "current_quantity": {
          "format": "numeric",
          "type": "number"
        },
        "unit_of_measure": {
          "format": "text",
          "type": "string"
        },
        "min_quantity": {
          "format": "numeric",
          "type": "number"
        },
        "max_quantity": {
          "format": "numeric",
          "type": "number"
        },
        "reorder_point": {
          "format": "numeric",
          "type": "number"
        },
        "current_location_id": {
          "format": "uuid",
          "type": "string"
        },
        "home_location_id": {
          "format": "uuid",
          "type": "string"
        },
        "assigned_to_user_id": {
          "format": "uuid",
          "type": "string"
        },
        "assigned_to_job_id": {
          "format": "uuid",
          "type": "string"
        },
        "status": {
          "format": "text",
          "type": "string"
        },
        "condition": {
          "format": "text",
          "type": "string"
        },
        "last_maintenance_date": {
          "format": "date",
          "type": "string"
        },
        "next_maintenance_date": {
          "format": "date",
          "type": "string"
        },
        "purchase_date": {
          "format": "date",
          "type": "string"
        },
        "purchase_price": {
          "format": "numeric",
          "type": "number"
        },
        "current_value": {
          "format": "numeric",
          "type": "number"
        },
        "depreciation_method": {
          "format": "text",
          "type": "string"
        },
        "attributes": {
          "format": "jsonb"
        },
        "tags": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "custom_fields": {
          "format": "jsonb"
        },
        "primary_image_url": {
          "format": "text",
          "type": "string"
        },
        "image_urls": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "created_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_by": {
          "format": "uuid",
          "type": "string"
        },
        "updated_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_by": {
          "format": "uuid",
          "type": "string"
        },
        "availability_status": {
          "format": "text",
          "type": "string"
        }
      },
      "type": "object"
    },
    "user_activity_logs": {
      "required": [
        "id",
        "user_id",
        "tenant_id",
        "activity_date"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "text",
          "type": "string"
        },
        "activity_date": {
          "format": "date",
          "type": "string"
        },
        "jobs_completed": {
          "format": "integer",
          "type": "integer"
        },
        "equipment_return_verification_id": {
          "format": "uuid",
          "type": "string"
        },
        "summary": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ocr_documents": {
      "required": [
        "id",
        "tenant_id",
        "file_path"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "text",
          "type": "string"
        },
        "ocr_job_id": {
          "description": "Note:\nThis is a Foreign Key to `ocr_jobs.id`.<fk table='ocr_jobs' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "file_path": {
          "format": "text",
          "type": "string"
        },
        "page_count": {
          "format": "integer",
          "type": "integer"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "quality_audits": {
      "required": [
        "id",
        "tenant_id",
        "auditor_id",
        "audit_date",
        "jobs_audited",
        "status"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "text",
          "type": "string"
        },
        "auditor_id": {
          "format": "uuid",
          "type": "string"
        },
        "audit_date": {
          "format": "date",
          "type": "string"
        },
        "jobs_audited": {
          "format": "integer",
          "type": "integer"
        },
        "site_inspection_verification_id": {
          "format": "uuid",
          "type": "string"
        },
        "quality_score": {
          "format": "numeric",
          "type": "number"
        },
        "issues_found": {
          "format": "integer",
          "type": "integer"
        },
        "status": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "admin_audit_log": {
      "required": [
        "id",
        "target_id",
        "target_type",
        "action",
        "created_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "target_id": {
          "format": "uuid",
          "type": "string"
        },
        "target_type": {
          "format": "text",
          "type": "string"
        },
        "action": {
          "format": "text",
          "type": "string"
        },
        "actor_id": {
          "format": "uuid",
          "type": "string"
        },
        "actor_email": {
          "format": "text",
          "type": "string"
        },
        "actor_roles": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "reason": {
          "format": "text",
          "type": "string"
        },
        "comment": {
          "format": "text",
          "type": "string"
        },
        "metadata": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "timezone('utc'::text, now())",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "training_sessions": {
      "required": [
        "id",
        "tenant_id",
        "trainer_id",
        "training_type",
        "session_date",
        "status"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "text",
          "type": "string"
        },
        "trainer_id": {
          "format": "uuid",
          "type": "string"
        },
        "training_type": {
          "format": "text",
          "type": "string"
        },
        "session_date": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "demo_verification_id": {
          "format": "uuid",
          "type": "string"
        },
        "equipment_demo_score": {
          "format": "numeric",
          "type": "number"
        },
        "status": {
          "format": "text",
          "type": "string"
        },
        "completion_date": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "geography_columns": {
      "properties": {
        "f_table_catalog": {
          "format": "name",
          "type": "string"
        },
        "f_table_schema": {
          "format": "name",
          "type": "string"
        },
        "f_table_name": {
          "format": "name",
          "type": "string"
        },
        "f_geography_column": {
          "format": "name",
          "type": "string"
        },
        "coord_dimension": {
          "format": "integer",
          "type": "integer"
        },
        "srid": {
          "format": "integer",
          "type": "integer"
        },
        "type": {
          "format": "text",
          "type": "string"
        }
      },
      "type": "object"
    },
    "kits": {
      "required": [
        "id",
        "tenant_id",
        "kit_code",
        "name",
        "is_active",
        "metadata",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "description": "Note:\nThis is a Foreign Key to `companies.id`.<fk table='companies' column='id'/>",
          "format": "text",
          "type": "string"
        },
        "kit_code": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "name": {
          "format": "character varying",
          "maxLength": 255,
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "category": {
          "format": "character varying",
          "maxLength": 100,
          "type": "string"
        },
        "is_active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "metadata": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "jobs": {
      "required": [
        "id",
        "tenant_id",
        "job_number",
        "customer_id",
        "title"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "job_number": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "template_id": {
          "format": "uuid",
          "type": "string"
        },
        "customer_id": {
          "description": "Note:\nThis is a Foreign Key to `customers.id`.<fk table='customers' column='id'/>",
          "format": "text",
          "type": "string"
        },
        "property_id": {
          "description": "Note:\nThis is a Foreign Key to `properties.id`.<fk table='properties' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "title": {
          "format": "character varying",
          "maxLength": 255,
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "status": {
          "default": "draft",
          "enum": [
            "draft",
            "scheduled",
            "dispatched",
            "in_progress",
            "paused",
            "completed",
            "cancelled",
            "failed",
            "voice_created"
          ],
          "format": "public.job_status",
          "type": "string"
        },
        "priority": {
          "default": "normal",
          "enum": [
            "low",
            "normal",
            "high",
            "urgent",
            "emergency"
          ],
          "format": "public.job_priority",
          "type": "string"
        },
        "scheduled_start": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "scheduled_end": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "actual_start": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "actual_end": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "assigned_to": {
          "description": "Note:\nThis is a Foreign Key to `users_extended.id`.<fk table='users_extended' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "assigned_team": {
          "format": "uuid[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "estimated_duration": {
          "format": "integer",
          "type": "integer"
        },
        "actual_duration": {
          "format": "integer",
          "type": "integer"
        },
        "completion_notes": {
          "format": "text",
          "type": "string"
        },
        "voice_notes": {
          "format": "text",
          "type": "string"
        },
        "voice_created": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "voice_session_id": {
          "format": "uuid",
          "type": "string"
        },
        "checklist_items": {
          "format": "jsonb"
        },
        "materials_used": {
          "format": "jsonb"
        },
        "equipment_used": {
          "format": "uuid[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "photos_before": {
          "format": "jsonb"
        },
        "photos_after": {
          "format": "jsonb"
        },
        "signature_required": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "signature_data": {
          "format": "jsonb"
        },
        "billing_info": {
          "format": "jsonb"
        },
        "metadata": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_by": {
          "format": "uuid",
          "type": "string"
        },
        "arrival_photo_id": {
          "format": "uuid",
          "type": "string"
        },
        "arrival_confirmed_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "completion_quality_score": {
          "format": "integer",
          "type": "integer"
        },
        "requires_supervisor_review": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "arrival_timestamp": {
          "description": "GPS-confirmed arrival time at job site",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "arrival_gps_coords": {
          "description": "Actual GPS coordinates at arrival (for audit)",
          "format": "point",
          "type": "string"
        },
        "arrival_method": {
          "description": "How arrival was confirmed (gps_auto, gps_manual, manual)",
          "format": "character varying",
          "maxLength": 20,
          "type": "string"
        },
        "arrival_confidence": {
          "description": "GPS accuracy level (high <10m, medium <50m, low <100m, manual)",
          "format": "character varying",
          "maxLength": 20,
          "type": "string"
        },
        "completion_timestamp": {
          "description": "Job completion timestamp",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "completion_photo_url": {
          "description": "URL to completion verification photo",
          "format": "text",
          "type": "string"
        },
        "tool_reload_verified": {
          "default": false,
          "description": "Equipment reload confirmed before departure",
          "format": "boolean",
          "type": "boolean"
        },
        "offline_modified_at": {
          "description": "Last offline modification timestamp (for conflict detection)",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "offline_modified_by": {
          "description": "User who last modified offline (for conflict detection)",
          "format": "uuid",
          "type": "string"
        },
        "special_instructions_audio": {
          "format": "text",
          "type": "string"
        },
        "estimated_duration_minutes": {
          "format": "integer",
          "type": "integer"
        },
        "actual_duration_minutes": {
          "format": "integer",
          "type": "integer"
        },
        "completion_photo_urls": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "thumbnail_url": {
          "format": "text",
          "type": "string"
        },
        "medium_url": {
          "format": "text",
          "type": "string"
        },
        "primary_image_url": {
          "format": "text",
          "type": "string"
        }
      },
      "type": "object"
    },
    "maintenance_schedule": {
      "required": [
        "id",
        "tenant_id",
        "equipment_id",
        "scheduled_date",
        "maintenance_type",
        "status"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "text",
          "type": "string"
        },
        "equipment_id": {
          "format": "text",
          "type": "string"
        },
        "scheduled_date": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "maintenance_type": {
          "format": "text",
          "type": "string"
        },
        "assigned_to": {
          "format": "uuid",
          "type": "string"
        },
        "status": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "conflict_logs": {
      "required": [
        "id",
        "tenant_id",
        "entity_type",
        "entity_id",
        "conflict_type",
        "user1_id",
        "user1_role",
        "user1_changes",
        "user1_timestamp",
        "user2_id",
        "user2_role",
        "user2_changes",
        "user2_timestamp",
        "resolution_strategy",
        "merged_result",
        "requires_supervisor_review",
        "detected_at",
        "resolved_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "entity_type": {
          "format": "character varying",
          "maxLength": 100,
          "type": "string"
        },
        "entity_id": {
          "format": "uuid",
          "type": "string"
        },
        "job_id": {
          "format": "uuid",
          "type": "string"
        },
        "conflict_type": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "field_name": {
          "format": "character varying",
          "maxLength": 100,
          "type": "string"
        },
        "user1_id": {
          "format": "uuid",
          "type": "string"
        },
        "user1_role": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "user1_changes": {
          "format": "jsonb"
        },
        "user1_timestamp": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "user2_id": {
          "format": "uuid",
          "type": "string"
        },
        "user2_role": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "user2_changes": {
          "format": "jsonb"
        },
        "user2_timestamp": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "resolution_strategy": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "merged_result": {
          "format": "jsonb"
        },
        "winning_user_id": {
          "format": "uuid",
          "type": "string"
        },
        "requires_supervisor_review": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "reviewed_by": {
          "format": "uuid",
          "type": "string"
        },
        "reviewed_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "review_notes": {
          "format": "text",
          "type": "string"
        },
        "detected_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "resolved_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "intake_documents": {
      "required": [
        "id",
        "tenant_id",
        "intake_request_id",
        "document_url"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "intake_request_id": {
          "description": "Note:\nThis is a Foreign Key to `intake_requests.id`.<fk table='intake_requests' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "document_url": {
          "format": "text",
          "type": "string"
        },
        "document_type": {
          "format": "text",
          "type": "string"
        },
        "ocr_text": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "ocr_confidence": {
          "format": "double precision",
          "type": "number"
        },
        "ocr_metadata": {
          "format": "jsonb"
        },
        "intake_id": {
          "description": "Note:\nThis is a Foreign Key to `intake_requests.id`.<fk table='intake_requests' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "storage_path": {
          "format": "text",
          "type": "string"
        },
        "file_size_bytes": {
          "format": "bigint",
          "type": "integer"
        },
        "uploaded_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "processed_at": {
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "travel_logs": {
      "required": [
        "id",
        "tenant_id",
        "user_id",
        "departure_time",
        "created_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "from_property_id": {
          "description": "Note:\nThis is a Foreign Key to `properties.id`.<fk table='properties' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "to_property_id": {
          "description": "Note:\nThis is a Foreign Key to `properties.id`.<fk table='properties' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "departure_time": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "arrival_time": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "distance_km": {
          "format": "numeric",
          "type": "number"
        },
        "equipment_cleaned": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "notes": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "day_plans": {
      "required": [
        "id",
        "tenant_id",
        "user_id",
        "plan_date",
        "status",
        "metadata",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "description": "Note:\nThis is a Foreign Key to `companies.id`.<fk table='companies' column='id'/>",
          "format": "text",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "plan_date": {
          "format": "date",
          "type": "string"
        },
        "status": {
          "default": "draft",
          "format": "text",
          "type": "string"
        },
        "route_data": {
          "format": "jsonb"
        },
        "total_distance_miles": {
          "format": "numeric",
          "type": "number"
        },
        "estimated_duration_minutes": {
          "format": "integer",
          "type": "integer"
        },
        "actual_start_time": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "actual_end_time": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "voice_session_id": {
          "format": "uuid",
          "type": "string"
        },
        "auto_schedule_breaks": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "metadata": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dev_manifest_history": {
      "description": "Stores historical project progress manifests generated by the Control Tower",
      "required": [
        "id",
        "created_at",
        "manifest_content",
        "file_count"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "manifest_content": {
          "description": "Full markdown content of the generated manifest",
          "format": "text",
          "type": "string"
        },
        "file_count": {
          "description": "Number of files analyzed when manifest was generated",
          "format": "integer",
          "type": "integer"
        },
        "generated_by": {
          "format": "uuid",
          "type": "string"
        },
        "branch_name": {
          "format": "text",
          "type": "string"
        },
        "commit_hash": {
          "format": "text",
          "type": "string"
        },
        "completion_percentage": {
          "format": "integer",
          "type": "integer"
        },
        "voice_coverage_percentage": {
          "format": "integer",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "properties": {
      "required": [
        "id",
        "tenant_id",
        "customer_id",
        "property_number",
        "name",
        "address"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "customer_id": {
          "description": "Note:\nThis is a Foreign Key to `customers.id`.<fk table='customers' column='id'/>",
          "format": "text",
          "type": "string"
        },
        "property_number": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "name": {
          "format": "character varying",
          "maxLength": 255,
          "type": "string"
        },
        "address": {
          "format": "jsonb"
        },
        "location": {
          "format": "public.geography(Point,4326)",
          "type": "string"
        },
        "property_type": {
          "format": "character varying",
          "maxLength": 100,
          "type": "string"
        },
        "size_sqft": {
          "format": "integer",
          "type": "integer"
        },
        "lot_size_acres": {
          "format": "numeric",
          "type": "number"
        },
        "zones": {
          "format": "jsonb"
        },
        "access_notes": {
          "format": "text",
          "type": "string"
        },
        "gate_code": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "special_instructions": {
          "format": "text",
          "type": "string"
        },
        "voice_navigation_notes": {
          "format": "text",
          "type": "string"
        },
        "photos": {
          "format": "jsonb"
        },
        "is_active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "metadata": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "intake_session_id": {
          "format": "uuid",
          "type": "string"
        },
        "reference_image_id": {
          "format": "uuid",
          "type": "string"
        },
        "thumbnail_url": {
          "format": "text",
          "type": "string"
        },
        "medium_url": {
          "format": "text",
          "type": "string"
        },
        "primary_image_url": {
          "format": "text",
          "type": "string"
        }
      },
      "type": "object"
    },
    "maintenance_tickets": {
      "required": [
        "id",
        "tenant_id",
        "reported_by",
        "issue_type",
        "severity",
        "description",
        "status",
        "created_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "equipment_id": {
          "format": "uuid",
          "type": "string"
        },
        "reported_by": {
          "format": "uuid",
          "type": "string"
        },
        "issue_type": {
          "format": "text",
          "type": "string"
        },
        "severity": {
          "format": "text",
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "status": {
          "default": "open",
          "format": "text",
          "type": "string"
        },
        "assigned_to": {
          "format": "uuid",
          "type": "string"
        },
        "resolution_notes": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "resolved_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "estimated_cost": {
          "format": "numeric",
          "type": "number"
        },
        "actual_cost": {
          "format": "numeric",
          "type": "number"
        }
      },
      "type": "object"
    },
    "safety_checklist_completions": {
      "required": [
        "id",
        "checklist_id",
        "user_id"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "checklist_id": {
          "format": "uuid",
          "type": "string"
        },
        "job_id": {
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "completed_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "items_completed": {
          "format": "jsonb"
        },
        "location": {
          "format": "jsonb"
        },
        "signature": {
          "format": "text",
          "type": "string"
        },
        "notes": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "material_requests": {
      "required": [
        "id",
        "tenant_id",
        "requested_by",
        "status",
        "priority",
        "items_needed",
        "created_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "job_id": {
          "description": "Note:\nThis is a Foreign Key to `jobs.id`.<fk table='jobs' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "requested_by": {
          "format": "uuid",
          "type": "string"
        },
        "status": {
          "default": "pending",
          "format": "text",
          "type": "string"
        },
        "priority": {
          "default": "normal",
          "format": "text",
          "type": "string"
        },
        "items_needed": {
          "format": "jsonb"
        },
        "reason": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "fulfilled_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "fulfilled_by": {
          "format": "uuid",
          "type": "string"
        },
        "notes": {
          "format": "text",
          "type": "string"
        }
      },
      "type": "object"
    },
    "tenants": {
      "required": [
        "id",
        "name",
        "slug",
        "status",
        "plan"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "format": "text",
          "type": "string"
        },
        "slug": {
          "format": "text",
          "type": "string"
        },
        "status": {
          "default": "active",
          "format": "text",
          "type": "string"
        },
        "plan": {
          "default": "free",
          "format": "text",
          "type": "string"
        },
        "settings": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_by": {
          "format": "uuid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "spatial_ref_sys": {
      "required": [
        "srid"
      ],
      "properties": {
        "srid": {
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "integer",
          "type": "integer"
        },
        "auth_name": {
          "format": "character varying",
          "maxLength": 256,
          "type": "string"
        },
        "auth_srid": {
          "format": "integer",
          "type": "integer"
        },
        "srtext": {
          "format": "character varying",
          "maxLength": 2048,
          "type": "string"
        },
        "proj4text": {
          "format": "character varying",
          "maxLength": 2048,
          "type": "string"
        }
      },
      "type": "object"
    },
    "job_checklist_items": {
      "required": [
        "id",
        "job_id",
        "sequence_number",
        "item_id",
        "item_name"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "job_id": {
          "description": "Note:\nThis is a Foreign Key to `jobs.id`.<fk table='jobs' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "sequence_number": {
          "format": "integer",
          "type": "integer"
        },
        "item_type": {
          "format": "text",
          "type": "string"
        },
        "item_id": {
          "format": "uuid",
          "type": "string"
        },
        "item_name": {
          "format": "text",
          "type": "string"
        },
        "quantity": {
          "default": 1,
          "format": "integer",
          "type": "integer"
        },
        "container_id": {
          "format": "uuid",
          "type": "string"
        },
        "status": {
          "default": "pending",
          "format": "text",
          "type": "string"
        },
        "vlm_prompt": {
          "format": "text",
          "type": "string"
        },
        "acceptance_criteria": {
          "format": "text",
          "type": "string"
        },
        "notes": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "mfa_settings": {
      "description": "Multi-factor authentication configuration",
      "required": [
        "id",
        "user_id",
        "enabled",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "enabled": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "primary_method": {
          "enum": [
            "totp",
            "sms",
            "email",
            "voice_biometric"
          ],
          "format": "public.mfa_method",
          "type": "string"
        },
        "backup_methods": {
          "format": "public.mfa_method[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "totp_secret": {
          "format": "text",
          "type": "string"
        },
        "totp_backup_codes": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sms_phone": {
          "format": "text",
          "type": "string"
        },
        "email_verified": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "voice_biometric_enabled": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "voice_pattern_samples": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "recovery_codes_generated_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "last_used_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "failed_attempts": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "locked_until": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "settings": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "kit_items": {
      "required": [
        "id",
        "tenant_id",
        "kit_id",
        "item_type",
        "quantity",
        "is_required",
        "metadata",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "description": "Note:\nThis is a Foreign Key to `companies.id`.<fk table='companies' column='id'/>",
          "format": "text",
          "type": "string"
        },
        "kit_id": {
          "description": "Note:\nThis is a Foreign Key to `kits.id`.<fk table='kits' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "item_type": {
          "format": "text",
          "type": "string"
        },
        "quantity": {
          "default": 1,
          "format": "numeric",
          "type": "number"
        },
        "unit": {
          "format": "character varying",
          "maxLength": 50,
          "type": "string"
        },
        "is_required": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        },
        "metadata": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "routing_schedules": {
      "required": [
        "id",
        "tenant_id",
        "user_id",
        "scheduled_date",
        "job_ids",
        "optimization_status"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "description": "Note:\nThis is a Foreign Key to `users_extended.id`.<fk table='users_extended' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "scheduled_date": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "job_ids": {
          "format": "uuid[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "total_distance_meters": {
          "format": "double precision",
          "type": "number"
        },
        "total_duration_minutes": {
          "format": "integer",
          "type": "integer"
        },
        "route_geometry": {
          "format": "text",
          "type": "string"
        },
        "optimization_status": {
          "default": "pending",
          "format": "text",
          "type": "string"
        },
        "mapbox_route_geometry": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "error_message": {
          "format": "text",
          "type": "string"
        },
        "start_location_lat": {
          "format": "double precision",
          "type": "number"
        },
        "start_location_lng": {
          "format": "double precision",
          "type": "number"
        },
        "total_duration_seconds": {
          "format": "integer",
          "type": "integer"
        },
        "waypoints": {
          "format": "jsonb"
        }
      },
      "type": "object"
    },
    "inventory_images": {
      "description": "Stores reference images for inventory items (equipment and materials)",
      "required": [
        "id",
        "tenant_id",
        "item_type",
        "item_id",
        "image_url"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "item_type": {
          "format": "text",
          "type": "string"
        },
        "item_id": {
          "description": "Note:\nThis is a Foreign Key to `items.id`.<fk table='items' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "image_url": {
          "format": "text",
          "type": "string"
        },
        "thumbnail_url": {
          "description": "URL for thumbnail version of the image",
          "format": "text",
          "type": "string"
        },
        "is_primary": {
          "default": false,
          "description": "Whether this is the primary image for the item",
          "format": "boolean",
          "type": "boolean"
        },
        "angle": {
          "format": "text",
          "type": "string"
        },
        "aspect_ratio": {
          "default": 1.0,
          "format": "numeric",
          "type": "number"
        },
        "original_width": {
          "format": "integer",
          "type": "integer"
        },
        "original_height": {
          "format": "integer",
          "type": "integer"
        },
        "crop_box": {
          "format": "jsonb"
        },
        "metadata": {
          "format": "jsonb"
        },
        "captured_by": {
          "format": "uuid",
          "type": "string"
        },
        "captured_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "equipment_incidents": {
      "required": [
        "id",
        "tenant_id",
        "reported_by",
        "incident_type",
        "equipment_item",
        "severity",
        "status"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "text",
          "type": "string"
        },
        "reported_by": {
          "format": "uuid",
          "type": "string"
        },
        "incident_type": {
          "format": "text",
          "type": "string"
        },
        "equipment_item": {
          "format": "text",
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "verification_id": {
          "format": "uuid",
          "type": "string"
        },
        "severity": {
          "format": "text",
          "type": "string"
        },
        "status": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "notification_queue": {
      "required": [
        "id",
        "tenant_id",
        "recipient_id",
        "type",
        "priority",
        "message",
        "status",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "description": "Note:\nThis is a Foreign Key to `companies.id`.<fk table='companies' column='id'/>",
          "format": "text",
          "type": "string"
        },
        "recipient_id": {
          "format": "uuid",
          "type": "string"
        },
        "type": {
          "format": "text",
          "type": "string"
        },
        "priority": {
          "default": "medium",
          "format": "text",
          "type": "string"
        },
        "message": {
          "format": "text",
          "type": "string"
        },
        "data": {
          "format": "jsonb"
        },
        "method": {
          "format": "text",
          "type": "string"
        },
        "status": {
          "default": "pending",
          "format": "text",
          "type": "string"
        },
        "attempts": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "last_attempt_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "delivered_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "error": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "mfa_challenges": {
      "description": "Active MFA challenges and verification attempts",
      "required": [
        "id",
        "challenge_id",
        "user_id",
        "method",
        "expires_at",
        "created_at"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "challenge_id": {
          "format": "text",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "method": {
          "enum": [
            "totp",
            "sms",
            "email",
            "voice_biometric"
          ],
          "format": "public.mfa_method",
          "type": "string"
        },
        "challenge_data": {
          "format": "text",
          "type": "string"
        },
        "expires_at": {
          "default": "(now() + '00:05:00'::interval)",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "attempts": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "max_attempts": {
          "default": 3,
          "format": "integer",
          "type": "integer"
        },
        "completed_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "success": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "ip_address": {
          "format": "inet",
          "type": "string"
        },
        "user_agent": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "user_sessions": {
      "description": "Active user sessions with device tracking and voice support",
      "required": [
        "id",
        "user_id",
        "tenant_id",
        "device_id",
        "device_type",
        "ip_address",
        "status",
        "expires_at",
        "last_activity_at",
        "created_at"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "user_id": {
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "session_token": {
          "format": "text",
          "type": "string"
        },
        "refresh_token_hash": {
          "format": "text",
          "type": "string"
        },
        "device_id": {
          "format": "text",
          "type": "string"
        },
        "device_name": {
          "format": "text",
          "type": "string"
        },
        "device_type": {
          "default": "desktop",
          "enum": [
            "mobile",
            "desktop",
            "tablet",
            "voice_assistant"
          ],
          "format": "public.device_type",
          "type": "string"
        },
        "device_fingerprint": {
          "format": "text",
          "type": "string"
        },
        "ip_address": {
          "format": "inet",
          "type": "string"
        },
        "user_agent": {
          "format": "text",
          "type": "string"
        },
        "location": {
          "format": "jsonb"
        },
        "voice_session_id": {
          "format": "text",
          "type": "string"
        },
        "voice_session_active": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "voice_session_expires_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "wake_word_active": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "conversation_context": {
          "format": "jsonb"
        },
        "status": {
          "default": "active",
          "enum": [
            "active",
            "expired",
            "terminated",
            "suspended"
          ],
          "format": "public.session_status",
          "type": "string"
        },
        "expires_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "last_activity_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "security_flags": {
          "format": "jsonb"
        },
        "refresh_count": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "ended_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "voice_session_terminated": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "item_transactions": {
      "required": [
        "id",
        "tenant_id",
        "transaction_type",
        "item_id",
        "quantity"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "transaction_type": {
          "format": "text",
          "type": "string"
        },
        "item_id": {
          "description": "Note:\nThis is a Foreign Key to `items.id`.<fk table='items' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "quantity": {
          "default": 1,
          "format": "numeric",
          "type": "number"
        },
        "from_location_id": {
          "format": "uuid",
          "type": "string"
        },
        "to_location_id": {
          "format": "uuid",
          "type": "string"
        },
        "from_user_id": {
          "format": "uuid",
          "type": "string"
        },
        "to_user_id": {
          "format": "uuid",
          "type": "string"
        },
        "job_id": {
          "format": "uuid",
          "type": "string"
        },
        "purchase_order_id": {
          "format": "uuid",
          "type": "string"
        },
        "work_order_id": {
          "format": "uuid",
          "type": "string"
        },
        "cost": {
          "format": "numeric",
          "type": "number"
        },
        "notes": {
          "format": "text",
          "type": "string"
        },
        "reason": {
          "format": "text",
          "type": "string"
        },
        "voice_session_id": {
          "format": "uuid",
          "type": "string"
        },
        "detection_session_id": {
          "format": "uuid",
          "type": "string"
        },
        "confidence_score": {
          "format": "numeric",
          "type": "number"
        },
        "metadata": {
          "format": "jsonb"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_by": {
          "format": "uuid",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ocr_jobs": {
      "required": [
        "id",
        "tenant_id",
        "status"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "text",
          "type": "string"
        },
        "vendor_id": {
          "description": "Note:\nThis is a Foreign Key to `vendors.id`.<fk table='vendors' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "status": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "completed_at": {
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "permissions": {
      "description": "System permissions for role-based access control",
      "required": [
        "id",
        "name",
        "resource",
        "action",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "default": "extensions.uuid_generate_v4()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "format": "text",
          "type": "string"
        },
        "resource": {
          "format": "text",
          "type": "string"
        },
        "action": {
          "format": "text",
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "voice_commands": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requires_confirmation": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "risk_level": {
          "default": 1,
          "format": "integer",
          "type": "integer"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ocr_line_items": {
      "required": [
        "id",
        "tenant_id",
        "line_index"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "text",
          "type": "string"
        },
        "ocr_document_id": {
          "description": "Note:\nThis is a Foreign Key to `ocr_documents.id`.<fk table='ocr_documents' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "line_index": {
          "format": "integer",
          "type": "integer"
        },
        "sku": {
          "format": "text",
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "qty": {
          "format": "numeric",
          "type": "number"
        },
        "unit_price": {
          "format": "numeric",
          "type": "number"
        },
        "total": {
          "format": "numeric",
          "type": "number"
        }
      },
      "type": "object"
    },
    "job_reschedules": {
      "required": [
        "id",
        "tenant_id",
        "original_date",
        "new_date",
        "reason",
        "rescheduled_by",
        "status",
        "created_at"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "original_job_id": {
          "description": "Note:\nThis is a Foreign Key to `jobs.id`.<fk table='jobs' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "original_date": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "new_date": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "reason": {
          "format": "text",
          "type": "string"
        },
        "rescheduled_by": {
          "format": "uuid",
          "type": "string"
        },
        "status": {
          "default": "pending_confirmation",
          "format": "text",
          "type": "string"
        },
        "customer_notified": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "confirmed_at": {
          "format": "timestamp with time zone",
          "type": "string"
        }
      },
      "type": "object"
    },
    "companies": {
      "required": [
        "id",
        "created_at",
        "updated_at",
        "is_active"
      ],
      "properties": {
        "id": {
          "default": "(gen_random_uuid())",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "text",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "name": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "domain": {
          "format": "text",
          "type": "string"
        },
        "is_active": {
          "default": true,
          "format": "boolean",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "items": {
      "required": [
        "id",
        "tenant_id",
        "item_type",
        "category",
        "tracking_mode",
        "name",
        "status"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "item_type": {
          "format": "text",
          "type": "string"
        },
        "category": {
          "format": "text",
          "type": "string"
        },
        "tracking_mode": {
          "format": "text",
          "type": "string"
        },
        "name": {
          "format": "text",
          "type": "string"
        },
        "description": {
          "format": "text",
          "type": "string"
        },
        "manufacturer": {
          "format": "text",
          "type": "string"
        },
        "model": {
          "format": "text",
          "type": "string"
        },
        "serial_number": {
          "format": "text",
          "type": "string"
        },
        "sku": {
          "format": "text",
          "type": "string"
        },
        "barcode": {
          "format": "text",
          "type": "string"
        },
        "current_quantity": {
          "default": 0,
          "format": "numeric",
          "type": "number"
        },
        "unit_of_measure": {
          "default": "each",
          "format": "text",
          "type": "string"
        },
        "min_quantity": {
          "format": "numeric",
          "type": "number"
        },
        "max_quantity": {
          "format": "numeric",
          "type": "number"
        },
        "reorder_point": {
          "format": "numeric",
          "type": "number"
        },
        "current_location_id": {
          "format": "uuid",
          "type": "string"
        },
        "home_location_id": {
          "format": "uuid",
          "type": "string"
        },
        "assigned_to_user_id": {
          "format": "uuid",
          "type": "string"
        },
        "assigned_to_job_id": {
          "format": "uuid",
          "type": "string"
        },
        "status": {
          "default": "active",
          "format": "text",
          "type": "string"
        },
        "condition": {
          "format": "text",
          "type": "string"
        },
        "last_maintenance_date": {
          "format": "date",
          "type": "string"
        },
        "next_maintenance_date": {
          "format": "date",
          "type": "string"
        },
        "purchase_date": {
          "format": "date",
          "type": "string"
        },
        "purchase_price": {
          "format": "numeric",
          "type": "number"
        },
        "current_value": {
          "format": "numeric",
          "type": "number"
        },
        "depreciation_method": {
          "format": "text",
          "type": "string"
        },
        "attributes": {
          "format": "jsonb"
        },
        "tags": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "custom_fields": {
          "format": "jsonb"
        },
        "primary_image_url": {
          "description": "URL for 1024x1024 full image (~500KB max)",
          "format": "text",
          "type": "string"
        },
        "image_urls": {
          "format": "text[]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "created_by": {
          "format": "uuid",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_by": {
          "format": "uuid",
          "type": "string"
        },
        "thumbnail_url": {
          "description": "URL for 32x32 thumbnail image (~5KB)",
          "format": "text",
          "type": "string"
        },
        "medium_url": {
          "description": "URL for 256x256 medium image (~50KB)",
          "format": "text",
          "type": "string"
        }
      },
      "type": "object"
    },
    "workflow_tasks": {
      "required": [
        "id",
        "tenant_id",
        "job_id",
        "task_description",
        "task_order",
        "status"
      ],
      "properties": {
        "id": {
          "default": "gen_random_uuid()",
          "description": "Note:\nThis is a Primary Key.<pk/>",
          "format": "uuid",
          "type": "string"
        },
        "tenant_id": {
          "format": "uuid",
          "type": "string"
        },
        "job_id": {
          "description": "Note:\nThis is a Foreign Key to `jobs.id`.<fk table='jobs' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "task_description": {
          "format": "text",
          "type": "string"
        },
        "task_order": {
          "default": 0,
          "format": "integer",
          "type": "integer"
        },
        "status": {
          "default": "pending",
          "format": "text",
          "type": "string"
        },
        "completed_by": {
          "description": "Note:\nThis is a Foreign Key to `users_extended.id`.<fk table='users_extended' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "completed_at": {
          "format": "timestamp with time zone",
          "type": "string"
        },
        "verification_photo_url": {
          "format": "text",
          "type": "string"
        },
        "ai_confidence": {
          "format": "double precision",
          "type": "number"
        },
        "requires_supervisor_review": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "supervisor_approved": {
          "format": "boolean",
          "type": "boolean"
        },
        "supervisor_notes": {
          "format": "text",
          "type": "string"
        },
        "created_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "updated_at": {
          "default": "now()",
          "format": "timestamp with time zone",
          "type": "string"
        },
        "verification_method": {
          "default": "manual",
          "format": "text",
          "type": "string"
        },
        "verification_data": {
          "format": "jsonb"
        },
        "requires_supervisor_approval": {
          "default": false,
          "format": "boolean",
          "type": "boolean"
        },
        "user_id": {
          "description": "Note:\nThis is a Foreign Key to `users_extended.id`.<fk table='users_extended' column='id'/>",
          "format": "uuid",
          "type": "string"
        },
        "task_type": {
          "default": "verification",
          "format": "text",
          "type": "string"
        },
        "supervisor_id": {
          "description": "Note:\nThis is a Foreign Key to `users_extended.id`.<fk table='users_extended' column='id'/>",
          "format": "uuid",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "parameters": {
    "preferParams": {
      "name": "Prefer",
      "description": "Preference",
      "required": false,
      "enum": [
        "params=single-object"
      ],
      "in": "header",
      "type": "string"
    },
    "preferReturn": {
      "name": "Prefer",
      "description": "Preference",
      "required": false,
      "enum": [
        "return=representation",
        "return=minimal",
        "return=none"
      ],
      "in": "header",
      "type": "string"
    },
    "preferCount": {
      "name": "Prefer",
      "description": "Preference",
      "required": false,
      "enum": [
        "count=none"
      ],
      "in": "header",
      "type": "string"
    },
    "preferPost": {
      "name": "Prefer",
      "description": "Preference",
      "required": false,
      "enum": [
        "return=representation",
        "return=minimal",
        "return=none",
        "resolution=ignore-duplicates",
        "resolution=merge-duplicates"
      ],
      "in": "header",
      "type": "string"
    },
    "select": {
      "name": "select",
      "description": "Filtering Columns",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "on_conflict": {
      "name": "on_conflict",
      "description": "On Conflict",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "order": {
      "name": "order",
      "description": "Ordering",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "range": {
      "name": "Range",
      "description": "Limiting and Pagination",
      "required": false,
      "in": "header",
      "type": "string"
    },
    "rangeUnit": {
      "name": "Range-Unit",
      "description": "Limiting and Pagination",
      "required": false,
      "default": "items",
      "in": "header",
      "type": "string"
    },
    "offset": {
      "name": "offset",
      "description": "Limiting and Pagination",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "limit": {
      "name": "limit",
      "description": "Limiting and Pagination",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.active_jobs_view": {
      "name": "active_jobs_view",
      "description": "active_jobs_view",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/active_jobs_view"
      }
    },
    "rowFilter.active_jobs_view.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.job_number": {
      "name": "job_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.template_id": {
      "name": "template_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.customer_id": {
      "name": "customer_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.property_id": {
      "name": "property_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.title": {
      "name": "title",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.priority": {
      "name": "priority",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.scheduled_start": {
      "name": "scheduled_start",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.scheduled_end": {
      "name": "scheduled_end",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.actual_start": {
      "name": "actual_start",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.actual_end": {
      "name": "actual_end",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.assigned_to": {
      "name": "assigned_to",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.assigned_team": {
      "name": "assigned_team",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.estimated_duration": {
      "name": "estimated_duration",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.actual_duration": {
      "name": "actual_duration",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.completion_notes": {
      "name": "completion_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.voice_notes": {
      "name": "voice_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.voice_created": {
      "name": "voice_created",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.voice_session_id": {
      "name": "voice_session_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.checklist_items": {
      "name": "checklist_items",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.materials_used": {
      "name": "materials_used",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.equipment_used": {
      "name": "equipment_used",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.photos_before": {
      "name": "photos_before",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.photos_after": {
      "name": "photos_after",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.signature_required": {
      "name": "signature_required",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.signature_data": {
      "name": "signature_data",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.billing_info": {
      "name": "billing_info",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.created_by": {
      "name": "created_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.customer_name": {
      "name": "customer_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.customer_phone": {
      "name": "customer_phone",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.property_name": {
      "name": "property_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.property_address": {
      "name": "property_address",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.active_jobs_view.assigned_to_name": {
      "name": "assigned_to_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.vendors": {
      "name": "vendors",
      "description": "vendors",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/vendors"
      }
    },
    "rowFilter.vendors.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendors.name": {
      "name": "name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendors.is_active": {
      "name": "is_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendors.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendors.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendors.intake_session_id": {
      "name": "intake_session_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendors.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.auth_audit_log": {
      "name": "auth_audit_log",
      "description": "auth_audit_log",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/auth_audit_log"
      }
    },
    "rowFilter.auth_audit_log.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.event_type": {
      "name": "event_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.user_email": {
      "name": "user_email",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.session_id": {
      "name": "session_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.ip_address": {
      "name": "ip_address",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.user_agent": {
      "name": "user_agent",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.device_type": {
      "name": "device_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.location": {
      "name": "location",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.success": {
      "name": "success",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.reason": {
      "name": "reason",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.error_code": {
      "name": "error_code",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.risk_score": {
      "name": "risk_score",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.details": {
      "name": "details",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.voice_command": {
      "name": "voice_command",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.voice_confidence": {
      "name": "voice_confidence",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.auth_audit_log.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.invoices": {
      "name": "invoices",
      "description": "invoices",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/invoices"
      }
    },
    "rowFilter.invoices.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.invoices.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.invoices.invoice_number": {
      "name": "invoice_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.invoices.customer_id": {
      "name": "customer_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.invoices.job_id": {
      "name": "job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.invoices.amount": {
      "name": "amount",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.invoices.tax_amount": {
      "name": "tax_amount",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.invoices.total_amount": {
      "name": "total_amount",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.invoices.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.invoices.created_by": {
      "name": "created_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.invoices.due_date": {
      "name": "due_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.invoices.paid_date": {
      "name": "paid_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.invoices.payment_method": {
      "name": "payment_method",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.invoices.notes": {
      "name": "notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.invoices.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.invoices.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.gps_tracking_records": {
      "name": "gps_tracking_records",
      "description": "gps_tracking_records",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/gps_tracking_records"
      }
    },
    "rowFilter.gps_tracking_records.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.job_id": {
      "name": "job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.latitude": {
      "name": "latitude",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.longitude": {
      "name": "longitude",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.accuracy_meters": {
      "name": "accuracy_meters",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.altitude_meters": {
      "name": "altitude_meters",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.speed_mps": {
      "name": "speed_mps",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.heading_degrees": {
      "name": "heading_degrees",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.recorded_at": {
      "name": "recorded_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.accuracy": {
      "name": "accuracy",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.altitude": {
      "name": "altitude",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.speed": {
      "name": "speed",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.heading": {
      "name": "heading",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.gps_tracking_records.timestamp": {
      "name": "timestamp",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.tenant_assignments": {
      "name": "tenant_assignments",
      "description": "tenant_assignments",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/tenant_assignments"
      }
    },
    "rowFilter.tenant_assignments.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_assignments.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_assignments.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_assignments.role": {
      "name": "role",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_assignments.is_primary": {
      "name": "is_primary",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_assignments.assigned_by": {
      "name": "assigned_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_assignments.assigned_at": {
      "name": "assigned_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_assignments.expires_at": {
      "name": "expires_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_assignments.is_active": {
      "name": "is_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_assignments.access_level": {
      "name": "access_level",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_assignments.permissions_override": {
      "name": "permissions_override",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_assignments.last_accessed_at": {
      "name": "last_accessed_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_assignments.access_count": {
      "name": "access_count",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.vendor_aliases": {
      "name": "vendor_aliases",
      "description": "vendor_aliases",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/vendor_aliases"
      }
    },
    "rowFilter.vendor_aliases.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendor_aliases.vendor_id": {
      "name": "vendor_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendor_aliases.alias": {
      "name": "alias",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendor_aliases.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.code_pattern_violations": {
      "name": "code_pattern_violations",
      "description": "code_pattern_violations",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/code_pattern_violations"
      }
    },
    "rowFilter.code_pattern_violations.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.code_pattern_violations.file_path": {
      "name": "file_path",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.code_pattern_violations.line_number": {
      "name": "line_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.code_pattern_violations.column_number": {
      "name": "column_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.code_pattern_violations.pattern_type": {
      "name": "pattern_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.code_pattern_violations.violation_text": {
      "name": "violation_text",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.code_pattern_violations.suggested_fix": {
      "name": "suggested_fix",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.code_pattern_violations.is_fixed": {
      "name": "is_fixed",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.code_pattern_violations.fixed_at": {
      "name": "fixed_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.code_pattern_violations.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.geofence_events": {
      "name": "geofence_events",
      "description": "geofence_events",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/geofence_events"
      }
    },
    "rowFilter.geofence_events.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofence_events.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofence_events.geofence_id": {
      "name": "geofence_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofence_events.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofence_events.event_type": {
      "name": "event_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofence_events.latitude": {
      "name": "latitude",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofence_events.longitude": {
      "name": "longitude",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofence_events.timestamp": {
      "name": "timestamp",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofence_events.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.role_permissions": {
      "name": "role_permissions",
      "description": "role_permissions",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/role_permissions"
      }
    },
    "rowFilter.role_permissions.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.role_permissions.role": {
      "name": "role",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.role_permissions.permission_id": {
      "name": "permission_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.role_permissions.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.role_permissions.granted_by": {
      "name": "granted_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.role_permissions.granted_at": {
      "name": "granted_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.role_permissions.expires_at": {
      "name": "expires_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.role_permissions.is_active": {
      "name": "is_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.role_permissions.conditions": {
      "name": "conditions",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.user_invitations": {
      "name": "user_invitations",
      "description": "user_invitations",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/user_invitations"
      }
    },
    "rowFilter.user_invitations.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_invitations.email": {
      "name": "email",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_invitations.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_invitations.role": {
      "name": "role",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_invitations.invitation_code": {
      "name": "invitation_code",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_invitations.invited_by": {
      "name": "invited_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_invitations.invited_at": {
      "name": "invited_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_invitations.expires_at": {
      "name": "expires_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_invitations.accepted_at": {
      "name": "accepted_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_invitations.accepted_by": {
      "name": "accepted_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_invitations.is_used": {
      "name": "is_used",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_invitations.welcome_message": {
      "name": "welcome_message",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_invitations.permissions_preset": {
      "name": "permissions_preset",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_invitations.voice_onboarding_enabled": {
      "name": "voice_onboarding_enabled",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_invitations.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.user_assignments": {
      "name": "user_assignments",
      "description": "user_assignments",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/user_assignments"
      }
    },
    "rowFilter.user_assignments.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_assignments.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_assignments.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_assignments.role": {
      "name": "role",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_assignments.is_active": {
      "name": "is_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_assignments.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_assignments.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.voice_profiles": {
      "name": "voice_profiles",
      "description": "voice_profiles",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/voice_profiles"
      }
    },
    "rowFilter.voice_profiles.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.wake_word": {
      "name": "wake_word",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.speech_rate": {
      "name": "speech_rate",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.voice_pitch": {
      "name": "voice_pitch",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.preferred_voice": {
      "name": "preferred_voice",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.language_code": {
      "name": "language_code",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.voice_feedback_enabled": {
      "name": "voice_feedback_enabled",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.voice_feedback_level": {
      "name": "voice_feedback_level",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.preferred_tts_provider": {
      "name": "preferred_tts_provider",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.voice_pattern_hash": {
      "name": "voice_pattern_hash",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.confidence_threshold": {
      "name": "confidence_threshold",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.voice_samples_collected": {
      "name": "voice_samples_collected",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.last_voice_training_at": {
      "name": "last_voice_training_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.voice_recognition_provider": {
      "name": "voice_recognition_provider",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.noise_cancellation_enabled": {
      "name": "noise_cancellation_enabled",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.voice_commands_enabled": {
      "name": "voice_commands_enabled",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.accessibility_voice_navigation": {
      "name": "accessibility_voice_navigation",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.onboarding_completed": {
      "name": "onboarding_completed",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.voice_analytics": {
      "name": "voice_analytics",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.voice_profiles.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.notifications": {
      "name": "notifications",
      "description": "notifications",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/notifications"
      }
    },
    "rowFilter.notifications.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.notification_type": {
      "name": "notification_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.title": {
      "name": "title",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.message": {
      "name": "message",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.priority": {
      "name": "priority",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.related_entity_type": {
      "name": "related_entity_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.related_entity_id": {
      "name": "related_entity_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.read_at": {
      "name": "read_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notifications.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.customer_feedback": {
      "name": "customer_feedback",
      "description": "customer_feedback",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/customer_feedback"
      }
    },
    "rowFilter.customer_feedback.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_feedback.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_feedback.customer_id": {
      "name": "customer_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_feedback.job_id": {
      "name": "job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_feedback.feedback_type": {
      "name": "feedback_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_feedback.severity": {
      "name": "severity",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_feedback.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_feedback.reported_by": {
      "name": "reported_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_feedback.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_feedback.escalated_to": {
      "name": "escalated_to",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_feedback.escalation_notes": {
      "name": "escalation_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_feedback.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_feedback.resolved_at": {
      "name": "resolved_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customer_feedback.resolution_notes": {
      "name": "resolution_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.geofences": {
      "name": "geofences",
      "description": "geofences",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/geofences"
      }
    },
    "rowFilter.geofences.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofences.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofences.job_id": {
      "name": "job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofences.name": {
      "name": "name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofences.center_latitude": {
      "name": "center_latitude",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofences.center_longitude": {
      "name": "center_longitude",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofences.radius_meters": {
      "name": "radius_meters",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofences.active": {
      "name": "active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofences.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geofences.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.dev_project_standards": {
      "name": "dev_project_standards",
      "description": "dev_project_standards",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/dev_project_standards"
      }
    },
    "rowFilter.dev_project_standards.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_project_standards.document_title": {
      "name": "document_title",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_project_standards.document_content": {
      "name": "document_content",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_project_standards.version": {
      "name": "version",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_project_standards.last_updated_at": {
      "name": "last_updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_project_standards.updated_by": {
      "name": "updated_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_project_standards.category": {
      "name": "category",
      "description": "Category of the standard (e.g., architecture, security, voice-first)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_project_standards.is_active": {
      "name": "is_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_project_standards.tags": {
      "name": "tags",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.users_extended": {
      "name": "users_extended",
      "description": "users_extended",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/users_extended"
      }
    },
    "rowFilter.users_extended.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.role": {
      "name": "role",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.display_name": {
      "name": "display_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.first_name": {
      "name": "first_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.last_name": {
      "name": "last_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.phone": {
      "name": "phone",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.avatar_url": {
      "name": "avatar_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.timezone": {
      "name": "timezone",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.preferred_language": {
      "name": "preferred_language",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.is_active": {
      "name": "is_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.email_verified_at": {
      "name": "email_verified_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.phone_verified_at": {
      "name": "phone_verified_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.last_login_at": {
      "name": "last_login_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.password_changed_at": {
      "name": "password_changed_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.terms_accepted_at": {
      "name": "terms_accepted_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.privacy_policy_accepted_at": {
      "name": "privacy_policy_accepted_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.marketing_consent": {
      "name": "marketing_consent",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.two_factor_enabled": {
      "name": "two_factor_enabled",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.failed_login_attempts": {
      "name": "failed_login_attempts",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.locked_until": {
      "name": "locked_until",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.users_extended.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.ocr_note_entities": {
      "name": "ocr_note_entities",
      "description": "ocr_note_entities",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/ocr_note_entities"
      }
    },
    "rowFilter.ocr_note_entities.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_note_entities.ocr_document_id": {
      "name": "ocr_document_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_note_entities.label": {
      "name": "label",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_note_entities.value": {
      "name": "value",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_note_entities.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.safety_checklists": {
      "name": "safety_checklists",
      "description": "safety_checklists",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/safety_checklists"
      }
    },
    "rowFilter.safety_checklists.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklists.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklists.job_id": {
      "name": "job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklists.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklists.checklist_items": {
      "name": "checklist_items",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklists.completion_status": {
      "name": "completion_status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklists.completed_at": {
      "name": "completed_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklists.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklists.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklists.supervisor_approved": {
      "name": "supervisor_approved",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklists.supervisor_id": {
      "name": "supervisor_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklists.supervisor_notes": {
      "name": "supervisor_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.customers": {
      "name": "customers",
      "description": "customers",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/customers"
      }
    },
    "rowFilter.customers.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.customer_number": {
      "name": "customer_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.name": {
      "name": "name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.email": {
      "name": "email",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.phone": {
      "name": "phone",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.mobile_phone": {
      "name": "mobile_phone",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.billing_address": {
      "name": "billing_address",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.service_address": {
      "name": "service_address",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.notes": {
      "name": "notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.tags": {
      "name": "tags",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.voice_notes": {
      "name": "voice_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.is_active": {
      "name": "is_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.created_by": {
      "name": "created_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.version": {
      "name": "version",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.intake_session_id": {
      "name": "intake_session_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.thumbnail_url": {
      "name": "thumbnail_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.medium_url": {
      "name": "medium_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.customers.primary_image_url": {
      "name": "primary_image_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.geometry_columns": {
      "name": "geometry_columns",
      "description": "geometry_columns",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/geometry_columns"
      }
    },
    "rowFilter.geometry_columns.f_table_catalog": {
      "name": "f_table_catalog",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geometry_columns.f_table_schema": {
      "name": "f_table_schema",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geometry_columns.f_table_name": {
      "name": "f_table_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geometry_columns.f_geometry_column": {
      "name": "f_geometry_column",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geometry_columns.coord_dimension": {
      "name": "coord_dimension",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geometry_columns.srid": {
      "name": "srid",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geometry_columns.type": {
      "name": "type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.kit_variants": {
      "name": "kit_variants",
      "description": "kit_variants",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/kit_variants"
      }
    },
    "rowFilter.kit_variants.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_variants.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_variants.kit_id": {
      "name": "kit_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_variants.variant_code": {
      "name": "variant_code",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_variants.name": {
      "name": "name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_variants.is_default": {
      "name": "is_default",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_variants.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_variants.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_variants.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.tenant_members": {
      "name": "tenant_members",
      "description": "tenant_members",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/tenant_members"
      }
    },
    "rowFilter.tenant_members.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_members.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_members.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_members.role": {
      "name": "role",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_members.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_members.joined_at": {
      "name": "joined_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_members.invited_at": {
      "name": "invited_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_members.invited_by": {
      "name": "invited_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_members.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.tenant_invitations": {
      "name": "tenant_invitations",
      "description": "tenant_invitations",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/tenant_invitations"
      }
    },
    "rowFilter.tenant_invitations.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_invitations.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_invitations.email": {
      "name": "email",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_invitations.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_invitations.role": {
      "name": "role",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_invitations.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_invitations.token": {
      "name": "token",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_invitations.expires_at": {
      "name": "expires_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_invitations.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_invitations.created_by": {
      "name": "created_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenant_invitations.accepted_at": {
      "name": "accepted_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.vendor_locations": {
      "name": "vendor_locations",
      "description": "vendor_locations",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/vendor_locations"
      }
    },
    "rowFilter.vendor_locations.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendor_locations.vendor_id": {
      "name": "vendor_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendor_locations.address": {
      "name": "address",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendor_locations.city": {
      "name": "city",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendor_locations.state": {
      "name": "state",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendor_locations.postal_code": {
      "name": "postal_code",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendor_locations.country": {
      "name": "country",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.vendor_locations.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.audit_logs": {
      "name": "audit_logs",
      "description": "audit_logs",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/audit_logs"
      }
    },
    "rowFilter.audit_logs.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.audit_logs.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.audit_logs.entity_type": {
      "name": "entity_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.audit_logs.entity_id": {
      "name": "entity_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.audit_logs.action": {
      "name": "action",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.audit_logs.performed_by": {
      "name": "performed_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.audit_logs.details": {
      "name": "details",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.audit_logs.ip_address": {
      "name": "ip_address",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.audit_logs.user_agent": {
      "name": "user_agent",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.audit_logs.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.daily_reports": {
      "name": "daily_reports",
      "description": "daily_reports",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/daily_reports"
      }
    },
    "rowFilter.daily_reports.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.daily_reports.report_date": {
      "name": "report_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.daily_reports.created_by": {
      "name": "created_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.daily_reports.technician_count": {
      "name": "technician_count",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.daily_reports.jobs_assigned": {
      "name": "jobs_assigned",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.daily_reports.equipment_audit_id": {
      "name": "equipment_audit_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.daily_reports.summary_text": {
      "name": "summary_text",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.daily_reports.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.daily_reports.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.intake_requests": {
      "name": "intake_requests",
      "description": "intake_requests",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/intake_requests"
      }
    },
    "rowFilter.intake_requests.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.customer_name": {
      "name": "customer_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.customer_email": {
      "name": "customer_email",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.customer_phone": {
      "name": "customer_phone",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.service_type": {
      "name": "service_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.priority": {
      "name": "priority",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.converted_to_job_id": {
      "name": "converted_to_job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.assigned_to": {
      "name": "assigned_to",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.lead_score": {
      "name": "lead_score",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.converted_at": {
      "name": "converted_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.request_source": {
      "name": "request_source",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_requests.source": {
      "name": "source",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.kit_assignments": {
      "name": "kit_assignments",
      "description": "kit_assignments",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/kit_assignments"
      }
    },
    "rowFilter.kit_assignments.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_assignments.kit_id": {
      "name": "kit_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_assignments.variant_id": {
      "name": "variant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_assignments.external_ref": {
      "name": "external_ref",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_assignments.notes": {
      "name": "notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_assignments.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_assignments.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_assignments.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_assignments.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.equipment_maintenance": {
      "name": "equipment_maintenance",
      "description": "equipment_maintenance",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/equipment_maintenance"
      }
    },
    "rowFilter.equipment_maintenance.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_maintenance.equipment_id": {
      "name": "equipment_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_maintenance.performed_by": {
      "name": "performed_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_maintenance.maintenance_type": {
      "name": "maintenance_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_maintenance.maintenance_date": {
      "name": "maintenance_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_maintenance.actions_performed": {
      "name": "actions_performed",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_maintenance.pre_maintenance_verification_id": {
      "name": "pre_maintenance_verification_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_maintenance.post_maintenance_verification_id": {
      "name": "post_maintenance_verification_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_maintenance.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_maintenance.completion_date": {
      "name": "completion_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_maintenance.notes": {
      "name": "notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_maintenance.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_maintenance.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.repository_inventory": {
      "name": "repository_inventory",
      "description": "repository_inventory",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/repository_inventory"
      }
    },
    "rowFilter.repository_inventory.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.repository_inventory.domain": {
      "name": "domain",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.repository_inventory.repository_name": {
      "name": "repository_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.repository_inventory.file_path": {
      "name": "file_path",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.repository_inventory.pattern_type": {
      "name": "pattern_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.repository_inventory.target_pattern": {
      "name": "target_pattern",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.repository_inventory.migration_status": {
      "name": "migration_status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.repository_inventory.dependencies_count": {
      "name": "dependencies_count",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.repository_inventory.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.repository_inventory.migrated_at": {
      "name": "migrated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.training_certificates": {
      "name": "training_certificates",
      "description": "training_certificates",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/training_certificates"
      }
    },
    "rowFilter.training_certificates.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_certificates.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_certificates.training_session_id": {
      "name": "training_session_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_certificates.trainee_id": {
      "name": "trainee_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_certificates.certificate_type": {
      "name": "certificate_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_certificates.issued_date": {
      "name": "issued_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_certificates.score": {
      "name": "score",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_certificates.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_certificates.expires_at": {
      "name": "expires_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_certificates.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.item_availability": {
      "name": "item_availability",
      "description": "item_availability",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/item_availability"
      }
    },
    "rowFilter.item_availability.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.item_type": {
      "name": "item_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.category": {
      "name": "category",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.tracking_mode": {
      "name": "tracking_mode",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.name": {
      "name": "name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.manufacturer": {
      "name": "manufacturer",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.model": {
      "name": "model",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.serial_number": {
      "name": "serial_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.sku": {
      "name": "sku",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.barcode": {
      "name": "barcode",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.current_quantity": {
      "name": "current_quantity",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.unit_of_measure": {
      "name": "unit_of_measure",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.min_quantity": {
      "name": "min_quantity",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.max_quantity": {
      "name": "max_quantity",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.reorder_point": {
      "name": "reorder_point",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.current_location_id": {
      "name": "current_location_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.home_location_id": {
      "name": "home_location_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.assigned_to_user_id": {
      "name": "assigned_to_user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.assigned_to_job_id": {
      "name": "assigned_to_job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.condition": {
      "name": "condition",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.last_maintenance_date": {
      "name": "last_maintenance_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.next_maintenance_date": {
      "name": "next_maintenance_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.purchase_date": {
      "name": "purchase_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.purchase_price": {
      "name": "purchase_price",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.current_value": {
      "name": "current_value",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.depreciation_method": {
      "name": "depreciation_method",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.attributes": {
      "name": "attributes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.tags": {
      "name": "tags",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.custom_fields": {
      "name": "custom_fields",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.primary_image_url": {
      "name": "primary_image_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.image_urls": {
      "name": "image_urls",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.created_by": {
      "name": "created_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.updated_by": {
      "name": "updated_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_availability.availability_status": {
      "name": "availability_status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.user_activity_logs": {
      "name": "user_activity_logs",
      "description": "user_activity_logs",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/user_activity_logs"
      }
    },
    "rowFilter.user_activity_logs.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_activity_logs.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_activity_logs.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_activity_logs.activity_date": {
      "name": "activity_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_activity_logs.jobs_completed": {
      "name": "jobs_completed",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_activity_logs.equipment_return_verification_id": {
      "name": "equipment_return_verification_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_activity_logs.summary": {
      "name": "summary",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_activity_logs.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.ocr_documents": {
      "name": "ocr_documents",
      "description": "ocr_documents",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/ocr_documents"
      }
    },
    "rowFilter.ocr_documents.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_documents.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_documents.ocr_job_id": {
      "name": "ocr_job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_documents.file_path": {
      "name": "file_path",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_documents.page_count": {
      "name": "page_count",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_documents.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.quality_audits": {
      "name": "quality_audits",
      "description": "quality_audits",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/quality_audits"
      }
    },
    "rowFilter.quality_audits.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.quality_audits.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.quality_audits.auditor_id": {
      "name": "auditor_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.quality_audits.audit_date": {
      "name": "audit_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.quality_audits.jobs_audited": {
      "name": "jobs_audited",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.quality_audits.site_inspection_verification_id": {
      "name": "site_inspection_verification_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.quality_audits.quality_score": {
      "name": "quality_score",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.quality_audits.issues_found": {
      "name": "issues_found",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.quality_audits.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.quality_audits.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.admin_audit_log": {
      "name": "admin_audit_log",
      "description": "admin_audit_log",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/admin_audit_log"
      }
    },
    "rowFilter.admin_audit_log.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.admin_audit_log.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.admin_audit_log.target_id": {
      "name": "target_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.admin_audit_log.target_type": {
      "name": "target_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.admin_audit_log.action": {
      "name": "action",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.admin_audit_log.actor_id": {
      "name": "actor_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.admin_audit_log.actor_email": {
      "name": "actor_email",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.admin_audit_log.actor_roles": {
      "name": "actor_roles",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.admin_audit_log.reason": {
      "name": "reason",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.admin_audit_log.comment": {
      "name": "comment",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.admin_audit_log.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.admin_audit_log.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.training_sessions": {
      "name": "training_sessions",
      "description": "training_sessions",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/training_sessions"
      }
    },
    "rowFilter.training_sessions.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_sessions.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_sessions.trainer_id": {
      "name": "trainer_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_sessions.training_type": {
      "name": "training_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_sessions.session_date": {
      "name": "session_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_sessions.demo_verification_id": {
      "name": "demo_verification_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_sessions.equipment_demo_score": {
      "name": "equipment_demo_score",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_sessions.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_sessions.completion_date": {
      "name": "completion_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.training_sessions.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.geography_columns": {
      "name": "geography_columns",
      "description": "geography_columns",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/geography_columns"
      }
    },
    "rowFilter.geography_columns.f_table_catalog": {
      "name": "f_table_catalog",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geography_columns.f_table_schema": {
      "name": "f_table_schema",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geography_columns.f_table_name": {
      "name": "f_table_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geography_columns.f_geography_column": {
      "name": "f_geography_column",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geography_columns.coord_dimension": {
      "name": "coord_dimension",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geography_columns.srid": {
      "name": "srid",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.geography_columns.type": {
      "name": "type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.kits": {
      "name": "kits",
      "description": "kits",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/kits"
      }
    },
    "rowFilter.kits.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kits.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kits.kit_code": {
      "name": "kit_code",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kits.name": {
      "name": "name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kits.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kits.category": {
      "name": "category",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kits.is_active": {
      "name": "is_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kits.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kits.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kits.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.jobs": {
      "name": "jobs",
      "description": "jobs",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/jobs"
      }
    },
    "rowFilter.jobs.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.job_number": {
      "name": "job_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.template_id": {
      "name": "template_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.customer_id": {
      "name": "customer_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.property_id": {
      "name": "property_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.title": {
      "name": "title",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.priority": {
      "name": "priority",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.scheduled_start": {
      "name": "scheduled_start",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.scheduled_end": {
      "name": "scheduled_end",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.actual_start": {
      "name": "actual_start",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.actual_end": {
      "name": "actual_end",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.assigned_to": {
      "name": "assigned_to",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.assigned_team": {
      "name": "assigned_team",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.estimated_duration": {
      "name": "estimated_duration",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.actual_duration": {
      "name": "actual_duration",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.completion_notes": {
      "name": "completion_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.voice_notes": {
      "name": "voice_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.voice_created": {
      "name": "voice_created",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.voice_session_id": {
      "name": "voice_session_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.checklist_items": {
      "name": "checklist_items",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.materials_used": {
      "name": "materials_used",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.equipment_used": {
      "name": "equipment_used",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.photos_before": {
      "name": "photos_before",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.photos_after": {
      "name": "photos_after",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.signature_required": {
      "name": "signature_required",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.signature_data": {
      "name": "signature_data",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.billing_info": {
      "name": "billing_info",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.created_by": {
      "name": "created_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.arrival_photo_id": {
      "name": "arrival_photo_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.arrival_confirmed_at": {
      "name": "arrival_confirmed_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.completion_quality_score": {
      "name": "completion_quality_score",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.requires_supervisor_review": {
      "name": "requires_supervisor_review",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.arrival_timestamp": {
      "name": "arrival_timestamp",
      "description": "GPS-confirmed arrival time at job site",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.arrival_gps_coords": {
      "name": "arrival_gps_coords",
      "description": "Actual GPS coordinates at arrival (for audit)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.arrival_method": {
      "name": "arrival_method",
      "description": "How arrival was confirmed (gps_auto, gps_manual, manual)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.arrival_confidence": {
      "name": "arrival_confidence",
      "description": "GPS accuracy level (high <10m, medium <50m, low <100m, manual)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.completion_timestamp": {
      "name": "completion_timestamp",
      "description": "Job completion timestamp",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.completion_photo_url": {
      "name": "completion_photo_url",
      "description": "URL to completion verification photo",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.tool_reload_verified": {
      "name": "tool_reload_verified",
      "description": "Equipment reload confirmed before departure",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.offline_modified_at": {
      "name": "offline_modified_at",
      "description": "Last offline modification timestamp (for conflict detection)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.offline_modified_by": {
      "name": "offline_modified_by",
      "description": "User who last modified offline (for conflict detection)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.special_instructions_audio": {
      "name": "special_instructions_audio",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.estimated_duration_minutes": {
      "name": "estimated_duration_minutes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.actual_duration_minutes": {
      "name": "actual_duration_minutes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.completion_photo_urls": {
      "name": "completion_photo_urls",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.thumbnail_url": {
      "name": "thumbnail_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.medium_url": {
      "name": "medium_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.jobs.primary_image_url": {
      "name": "primary_image_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.maintenance_schedule": {
      "name": "maintenance_schedule",
      "description": "maintenance_schedule",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/maintenance_schedule"
      }
    },
    "rowFilter.maintenance_schedule.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_schedule.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_schedule.equipment_id": {
      "name": "equipment_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_schedule.scheduled_date": {
      "name": "scheduled_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_schedule.maintenance_type": {
      "name": "maintenance_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_schedule.assigned_to": {
      "name": "assigned_to",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_schedule.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_schedule.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.conflict_logs": {
      "name": "conflict_logs",
      "description": "conflict_logs",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/conflict_logs"
      }
    },
    "rowFilter.conflict_logs.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.entity_type": {
      "name": "entity_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.entity_id": {
      "name": "entity_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.job_id": {
      "name": "job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.conflict_type": {
      "name": "conflict_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.field_name": {
      "name": "field_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.user1_id": {
      "name": "user1_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.user1_role": {
      "name": "user1_role",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.user1_changes": {
      "name": "user1_changes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.user1_timestamp": {
      "name": "user1_timestamp",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.user2_id": {
      "name": "user2_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.user2_role": {
      "name": "user2_role",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.user2_changes": {
      "name": "user2_changes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.user2_timestamp": {
      "name": "user2_timestamp",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.resolution_strategy": {
      "name": "resolution_strategy",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.merged_result": {
      "name": "merged_result",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.winning_user_id": {
      "name": "winning_user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.requires_supervisor_review": {
      "name": "requires_supervisor_review",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.reviewed_by": {
      "name": "reviewed_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.reviewed_at": {
      "name": "reviewed_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.review_notes": {
      "name": "review_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.detected_at": {
      "name": "detected_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.conflict_logs.resolved_at": {
      "name": "resolved_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.intake_documents": {
      "name": "intake_documents",
      "description": "intake_documents",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/intake_documents"
      }
    },
    "rowFilter.intake_documents.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_documents.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_documents.intake_request_id": {
      "name": "intake_request_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_documents.document_url": {
      "name": "document_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_documents.document_type": {
      "name": "document_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_documents.ocr_text": {
      "name": "ocr_text",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_documents.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_documents.ocr_confidence": {
      "name": "ocr_confidence",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_documents.ocr_metadata": {
      "name": "ocr_metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_documents.intake_id": {
      "name": "intake_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_documents.storage_path": {
      "name": "storage_path",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_documents.file_size_bytes": {
      "name": "file_size_bytes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_documents.uploaded_at": {
      "name": "uploaded_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.intake_documents.processed_at": {
      "name": "processed_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.travel_logs": {
      "name": "travel_logs",
      "description": "travel_logs",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/travel_logs"
      }
    },
    "rowFilter.travel_logs.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.travel_logs.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.travel_logs.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.travel_logs.from_property_id": {
      "name": "from_property_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.travel_logs.to_property_id": {
      "name": "to_property_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.travel_logs.departure_time": {
      "name": "departure_time",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.travel_logs.arrival_time": {
      "name": "arrival_time",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.travel_logs.distance_km": {
      "name": "distance_km",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.travel_logs.equipment_cleaned": {
      "name": "equipment_cleaned",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.travel_logs.notes": {
      "name": "notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.travel_logs.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.day_plans": {
      "name": "day_plans",
      "description": "day_plans",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/day_plans"
      }
    },
    "rowFilter.day_plans.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.day_plans.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.day_plans.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.day_plans.plan_date": {
      "name": "plan_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.day_plans.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.day_plans.route_data": {
      "name": "route_data",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.day_plans.total_distance_miles": {
      "name": "total_distance_miles",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.day_plans.estimated_duration_minutes": {
      "name": "estimated_duration_minutes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.day_plans.actual_start_time": {
      "name": "actual_start_time",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.day_plans.actual_end_time": {
      "name": "actual_end_time",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.day_plans.voice_session_id": {
      "name": "voice_session_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.day_plans.auto_schedule_breaks": {
      "name": "auto_schedule_breaks",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.day_plans.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.day_plans.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.day_plans.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.dev_manifest_history": {
      "name": "dev_manifest_history",
      "description": "dev_manifest_history",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/dev_manifest_history"
      }
    },
    "rowFilter.dev_manifest_history.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_manifest_history.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_manifest_history.manifest_content": {
      "name": "manifest_content",
      "description": "Full markdown content of the generated manifest",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_manifest_history.file_count": {
      "name": "file_count",
      "description": "Number of files analyzed when manifest was generated",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_manifest_history.generated_by": {
      "name": "generated_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_manifest_history.branch_name": {
      "name": "branch_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_manifest_history.commit_hash": {
      "name": "commit_hash",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_manifest_history.completion_percentage": {
      "name": "completion_percentage",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.dev_manifest_history.voice_coverage_percentage": {
      "name": "voice_coverage_percentage",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.properties": {
      "name": "properties",
      "description": "properties",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/properties"
      }
    },
    "rowFilter.properties.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.customer_id": {
      "name": "customer_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.property_number": {
      "name": "property_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.name": {
      "name": "name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.address": {
      "name": "address",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.location": {
      "name": "location",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.property_type": {
      "name": "property_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.size_sqft": {
      "name": "size_sqft",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.lot_size_acres": {
      "name": "lot_size_acres",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.zones": {
      "name": "zones",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.access_notes": {
      "name": "access_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.gate_code": {
      "name": "gate_code",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.special_instructions": {
      "name": "special_instructions",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.voice_navigation_notes": {
      "name": "voice_navigation_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.photos": {
      "name": "photos",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.is_active": {
      "name": "is_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.intake_session_id": {
      "name": "intake_session_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.reference_image_id": {
      "name": "reference_image_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.thumbnail_url": {
      "name": "thumbnail_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.medium_url": {
      "name": "medium_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.properties.primary_image_url": {
      "name": "primary_image_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.maintenance_tickets": {
      "name": "maintenance_tickets",
      "description": "maintenance_tickets",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/maintenance_tickets"
      }
    },
    "rowFilter.maintenance_tickets.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_tickets.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_tickets.equipment_id": {
      "name": "equipment_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_tickets.reported_by": {
      "name": "reported_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_tickets.issue_type": {
      "name": "issue_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_tickets.severity": {
      "name": "severity",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_tickets.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_tickets.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_tickets.assigned_to": {
      "name": "assigned_to",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_tickets.resolution_notes": {
      "name": "resolution_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_tickets.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_tickets.resolved_at": {
      "name": "resolved_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_tickets.estimated_cost": {
      "name": "estimated_cost",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.maintenance_tickets.actual_cost": {
      "name": "actual_cost",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.safety_checklist_completions": {
      "name": "safety_checklist_completions",
      "description": "safety_checklist_completions",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/safety_checklist_completions"
      }
    },
    "rowFilter.safety_checklist_completions.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklist_completions.checklist_id": {
      "name": "checklist_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklist_completions.job_id": {
      "name": "job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklist_completions.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklist_completions.completed_at": {
      "name": "completed_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklist_completions.items_completed": {
      "name": "items_completed",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklist_completions.location": {
      "name": "location",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklist_completions.signature": {
      "name": "signature",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklist_completions.notes": {
      "name": "notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.safety_checklist_completions.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.material_requests": {
      "name": "material_requests",
      "description": "material_requests",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/material_requests"
      }
    },
    "rowFilter.material_requests.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.material_requests.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.material_requests.job_id": {
      "name": "job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.material_requests.requested_by": {
      "name": "requested_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.material_requests.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.material_requests.priority": {
      "name": "priority",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.material_requests.items_needed": {
      "name": "items_needed",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.material_requests.reason": {
      "name": "reason",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.material_requests.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.material_requests.fulfilled_at": {
      "name": "fulfilled_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.material_requests.fulfilled_by": {
      "name": "fulfilled_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.material_requests.notes": {
      "name": "notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.tenants": {
      "name": "tenants",
      "description": "tenants",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/tenants"
      }
    },
    "rowFilter.tenants.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenants.name": {
      "name": "name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenants.slug": {
      "name": "slug",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenants.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenants.plan": {
      "name": "plan",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenants.settings": {
      "name": "settings",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenants.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenants.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.tenants.created_by": {
      "name": "created_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.spatial_ref_sys": {
      "name": "spatial_ref_sys",
      "description": "spatial_ref_sys",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/spatial_ref_sys"
      }
    },
    "rowFilter.spatial_ref_sys.srid": {
      "name": "srid",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.spatial_ref_sys.auth_name": {
      "name": "auth_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.spatial_ref_sys.auth_srid": {
      "name": "auth_srid",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.spatial_ref_sys.srtext": {
      "name": "srtext",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.spatial_ref_sys.proj4text": {
      "name": "proj4text",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.job_checklist_items": {
      "name": "job_checklist_items",
      "description": "job_checklist_items",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/job_checklist_items"
      }
    },
    "rowFilter.job_checklist_items.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_checklist_items.job_id": {
      "name": "job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_checklist_items.sequence_number": {
      "name": "sequence_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_checklist_items.item_type": {
      "name": "item_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_checklist_items.item_id": {
      "name": "item_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_checklist_items.item_name": {
      "name": "item_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_checklist_items.quantity": {
      "name": "quantity",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_checklist_items.container_id": {
      "name": "container_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_checklist_items.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_checklist_items.vlm_prompt": {
      "name": "vlm_prompt",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_checklist_items.acceptance_criteria": {
      "name": "acceptance_criteria",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_checklist_items.notes": {
      "name": "notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_checklist_items.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_checklist_items.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.mfa_settings": {
      "name": "mfa_settings",
      "description": "mfa_settings",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/mfa_settings"
      }
    },
    "rowFilter.mfa_settings.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.enabled": {
      "name": "enabled",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.primary_method": {
      "name": "primary_method",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.backup_methods": {
      "name": "backup_methods",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.totp_secret": {
      "name": "totp_secret",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.totp_backup_codes": {
      "name": "totp_backup_codes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.sms_phone": {
      "name": "sms_phone",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.email_verified": {
      "name": "email_verified",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.voice_biometric_enabled": {
      "name": "voice_biometric_enabled",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.voice_pattern_samples": {
      "name": "voice_pattern_samples",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.recovery_codes_generated_at": {
      "name": "recovery_codes_generated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.last_used_at": {
      "name": "last_used_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.failed_attempts": {
      "name": "failed_attempts",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.locked_until": {
      "name": "locked_until",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.settings": {
      "name": "settings",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_settings.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.kit_items": {
      "name": "kit_items",
      "description": "kit_items",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/kit_items"
      }
    },
    "rowFilter.kit_items.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_items.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_items.kit_id": {
      "name": "kit_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_items.item_type": {
      "name": "item_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_items.quantity": {
      "name": "quantity",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_items.unit": {
      "name": "unit",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_items.is_required": {
      "name": "is_required",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_items.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_items.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.kit_items.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.routing_schedules": {
      "name": "routing_schedules",
      "description": "routing_schedules",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/routing_schedules"
      }
    },
    "rowFilter.routing_schedules.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.scheduled_date": {
      "name": "scheduled_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.job_ids": {
      "name": "job_ids",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.total_distance_meters": {
      "name": "total_distance_meters",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.total_duration_minutes": {
      "name": "total_duration_minutes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.route_geometry": {
      "name": "route_geometry",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.optimization_status": {
      "name": "optimization_status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.mapbox_route_geometry": {
      "name": "mapbox_route_geometry",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.error_message": {
      "name": "error_message",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.start_location_lat": {
      "name": "start_location_lat",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.start_location_lng": {
      "name": "start_location_lng",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.total_duration_seconds": {
      "name": "total_duration_seconds",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.routing_schedules.waypoints": {
      "name": "waypoints",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.inventory_images": {
      "name": "inventory_images",
      "description": "inventory_images",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/inventory_images"
      }
    },
    "rowFilter.inventory_images.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.inventory_images.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.inventory_images.item_type": {
      "name": "item_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.inventory_images.item_id": {
      "name": "item_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.inventory_images.image_url": {
      "name": "image_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.inventory_images.thumbnail_url": {
      "name": "thumbnail_url",
      "description": "URL for thumbnail version of the image",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.inventory_images.is_primary": {
      "name": "is_primary",
      "description": "Whether this is the primary image for the item",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.inventory_images.angle": {
      "name": "angle",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.inventory_images.aspect_ratio": {
      "name": "aspect_ratio",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.inventory_images.original_width": {
      "name": "original_width",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.inventory_images.original_height": {
      "name": "original_height",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.inventory_images.crop_box": {
      "name": "crop_box",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.inventory_images.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.inventory_images.captured_by": {
      "name": "captured_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.inventory_images.captured_at": {
      "name": "captured_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.inventory_images.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.equipment_incidents": {
      "name": "equipment_incidents",
      "description": "equipment_incidents",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/equipment_incidents"
      }
    },
    "rowFilter.equipment_incidents.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_incidents.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_incidents.reported_by": {
      "name": "reported_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_incidents.incident_type": {
      "name": "incident_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_incidents.equipment_item": {
      "name": "equipment_item",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_incidents.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_incidents.verification_id": {
      "name": "verification_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_incidents.severity": {
      "name": "severity",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_incidents.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_incidents.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.equipment_incidents.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.notification_queue": {
      "name": "notification_queue",
      "description": "notification_queue",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/notification_queue"
      }
    },
    "rowFilter.notification_queue.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notification_queue.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notification_queue.recipient_id": {
      "name": "recipient_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notification_queue.type": {
      "name": "type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notification_queue.priority": {
      "name": "priority",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notification_queue.message": {
      "name": "message",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notification_queue.data": {
      "name": "data",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notification_queue.method": {
      "name": "method",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notification_queue.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notification_queue.attempts": {
      "name": "attempts",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notification_queue.last_attempt_at": {
      "name": "last_attempt_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notification_queue.delivered_at": {
      "name": "delivered_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notification_queue.error": {
      "name": "error",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notification_queue.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.notification_queue.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.mfa_challenges": {
      "name": "mfa_challenges",
      "description": "mfa_challenges",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/mfa_challenges"
      }
    },
    "rowFilter.mfa_challenges.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_challenges.challenge_id": {
      "name": "challenge_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_challenges.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_challenges.method": {
      "name": "method",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_challenges.challenge_data": {
      "name": "challenge_data",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_challenges.expires_at": {
      "name": "expires_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_challenges.attempts": {
      "name": "attempts",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_challenges.max_attempts": {
      "name": "max_attempts",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_challenges.completed_at": {
      "name": "completed_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_challenges.success": {
      "name": "success",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_challenges.ip_address": {
      "name": "ip_address",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_challenges.user_agent": {
      "name": "user_agent",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.mfa_challenges.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.user_sessions": {
      "name": "user_sessions",
      "description": "user_sessions",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/user_sessions"
      }
    },
    "rowFilter.user_sessions.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.session_token": {
      "name": "session_token",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.refresh_token_hash": {
      "name": "refresh_token_hash",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.device_id": {
      "name": "device_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.device_name": {
      "name": "device_name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.device_type": {
      "name": "device_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.device_fingerprint": {
      "name": "device_fingerprint",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.ip_address": {
      "name": "ip_address",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.user_agent": {
      "name": "user_agent",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.location": {
      "name": "location",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.voice_session_id": {
      "name": "voice_session_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.voice_session_active": {
      "name": "voice_session_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.voice_session_expires_at": {
      "name": "voice_session_expires_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.wake_word_active": {
      "name": "wake_word_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.conversation_context": {
      "name": "conversation_context",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.expires_at": {
      "name": "expires_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.last_activity_at": {
      "name": "last_activity_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.security_flags": {
      "name": "security_flags",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.refresh_count": {
      "name": "refresh_count",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.ended_at": {
      "name": "ended_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.user_sessions.voice_session_terminated": {
      "name": "voice_session_terminated",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.item_transactions": {
      "name": "item_transactions",
      "description": "item_transactions",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/item_transactions"
      }
    },
    "rowFilter.item_transactions.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.transaction_type": {
      "name": "transaction_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.item_id": {
      "name": "item_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.quantity": {
      "name": "quantity",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.from_location_id": {
      "name": "from_location_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.to_location_id": {
      "name": "to_location_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.from_user_id": {
      "name": "from_user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.to_user_id": {
      "name": "to_user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.job_id": {
      "name": "job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.purchase_order_id": {
      "name": "purchase_order_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.work_order_id": {
      "name": "work_order_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.cost": {
      "name": "cost",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.notes": {
      "name": "notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.reason": {
      "name": "reason",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.voice_session_id": {
      "name": "voice_session_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.detection_session_id": {
      "name": "detection_session_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.confidence_score": {
      "name": "confidence_score",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.metadata": {
      "name": "metadata",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.item_transactions.created_by": {
      "name": "created_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.ocr_jobs": {
      "name": "ocr_jobs",
      "description": "ocr_jobs",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/ocr_jobs"
      }
    },
    "rowFilter.ocr_jobs.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_jobs.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_jobs.vendor_id": {
      "name": "vendor_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_jobs.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_jobs.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_jobs.completed_at": {
      "name": "completed_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.permissions": {
      "name": "permissions",
      "description": "permissions",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/permissions"
      }
    },
    "rowFilter.permissions.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.permissions.name": {
      "name": "name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.permissions.resource": {
      "name": "resource",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.permissions.action": {
      "name": "action",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.permissions.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.permissions.voice_commands": {
      "name": "voice_commands",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.permissions.requires_confirmation": {
      "name": "requires_confirmation",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.permissions.risk_level": {
      "name": "risk_level",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.permissions.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.permissions.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.ocr_line_items": {
      "name": "ocr_line_items",
      "description": "ocr_line_items",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/ocr_line_items"
      }
    },
    "rowFilter.ocr_line_items.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_line_items.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_line_items.ocr_document_id": {
      "name": "ocr_document_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_line_items.line_index": {
      "name": "line_index",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_line_items.sku": {
      "name": "sku",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_line_items.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_line_items.qty": {
      "name": "qty",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_line_items.unit_price": {
      "name": "unit_price",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.ocr_line_items.total": {
      "name": "total",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.job_reschedules": {
      "name": "job_reschedules",
      "description": "job_reschedules",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/job_reschedules"
      }
    },
    "rowFilter.job_reschedules.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_reschedules.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_reschedules.original_job_id": {
      "name": "original_job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_reschedules.original_date": {
      "name": "original_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_reschedules.new_date": {
      "name": "new_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_reschedules.reason": {
      "name": "reason",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_reschedules.rescheduled_by": {
      "name": "rescheduled_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_reschedules.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_reschedules.customer_notified": {
      "name": "customer_notified",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_reschedules.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.job_reschedules.confirmed_at": {
      "name": "confirmed_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.companies": {
      "name": "companies",
      "description": "companies",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/companies"
      }
    },
    "rowFilter.companies.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.companies.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.companies.name": {
      "name": "name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.companies.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.companies.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.companies.domain": {
      "name": "domain",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.companies.is_active": {
      "name": "is_active",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.items": {
      "name": "items",
      "description": "items",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/items"
      }
    },
    "rowFilter.items.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.item_type": {
      "name": "item_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.category": {
      "name": "category",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.tracking_mode": {
      "name": "tracking_mode",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.name": {
      "name": "name",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.description": {
      "name": "description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.manufacturer": {
      "name": "manufacturer",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.model": {
      "name": "model",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.serial_number": {
      "name": "serial_number",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.sku": {
      "name": "sku",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.barcode": {
      "name": "barcode",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.current_quantity": {
      "name": "current_quantity",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.unit_of_measure": {
      "name": "unit_of_measure",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.min_quantity": {
      "name": "min_quantity",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.max_quantity": {
      "name": "max_quantity",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.reorder_point": {
      "name": "reorder_point",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.current_location_id": {
      "name": "current_location_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.home_location_id": {
      "name": "home_location_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.assigned_to_user_id": {
      "name": "assigned_to_user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.assigned_to_job_id": {
      "name": "assigned_to_job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.condition": {
      "name": "condition",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.last_maintenance_date": {
      "name": "last_maintenance_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.next_maintenance_date": {
      "name": "next_maintenance_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.purchase_date": {
      "name": "purchase_date",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.purchase_price": {
      "name": "purchase_price",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.current_value": {
      "name": "current_value",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.depreciation_method": {
      "name": "depreciation_method",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.attributes": {
      "name": "attributes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.tags": {
      "name": "tags",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.custom_fields": {
      "name": "custom_fields",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.primary_image_url": {
      "name": "primary_image_url",
      "description": "URL for 1024x1024 full image (~500KB max)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.image_urls": {
      "name": "image_urls",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.created_by": {
      "name": "created_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.updated_by": {
      "name": "updated_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.thumbnail_url": {
      "name": "thumbnail_url",
      "description": "URL for 32x32 thumbnail image (~5KB)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.items.medium_url": {
      "name": "medium_url",
      "description": "URL for 256x256 medium image (~50KB)",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "body.workflow_tasks": {
      "name": "workflow_tasks",
      "description": "workflow_tasks",
      "required": false,
      "in": "body",
      "schema": {
        "$ref": "#/definitions/workflow_tasks"
      }
    },
    "rowFilter.workflow_tasks.id": {
      "name": "id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.tenant_id": {
      "name": "tenant_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.job_id": {
      "name": "job_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.task_description": {
      "name": "task_description",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.task_order": {
      "name": "task_order",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.status": {
      "name": "status",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.completed_by": {
      "name": "completed_by",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.completed_at": {
      "name": "completed_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.verification_photo_url": {
      "name": "verification_photo_url",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.ai_confidence": {
      "name": "ai_confidence",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.requires_supervisor_review": {
      "name": "requires_supervisor_review",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.supervisor_approved": {
      "name": "supervisor_approved",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.supervisor_notes": {
      "name": "supervisor_notes",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.created_at": {
      "name": "created_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.updated_at": {
      "name": "updated_at",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.verification_method": {
      "name": "verification_method",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.verification_data": {
      "name": "verification_data",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.requires_supervisor_approval": {
      "name": "requires_supervisor_approval",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.user_id": {
      "name": "user_id",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.task_type": {
      "name": "task_type",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "rowFilter.workflow_tasks.supervisor_id": {
      "name": "supervisor_id",
      "required": false,
      "in": "query",
      "type": "string"
    }
  },
  "externalDocs": {
    "description": "PostgREST Documentation",
    "url": "https://postgrest.org/en/v12/references/api.html"
  }
}