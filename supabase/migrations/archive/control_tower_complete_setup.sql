-- ============================================
-- Control Tower Database Setup for PostgreSQL
-- ============================================
-- This SQL creates all necessary tables and policies for the Construction Control Tower
-- Run this in your Supabase SQL editor or PostgreSQL database

-- ============================================
-- 1. CREATE TABLES
-- ============================================

-- Drop existing tables if they exist (for clean setup)
DROP TABLE IF EXISTS public.dev_manifest_history CASCADE;
DROP TABLE IF EXISTS public.dev_project_standards CASCADE;

-- --------------------------------------------
-- Table: dev_manifest_history
-- Purpose: Stores generated project progress manifests
-- --------------------------------------------
CREATE TABLE public.dev_manifest_history (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    manifest_content TEXT NOT NULL,
    file_count INTEGER NOT NULL,
    generated_by UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    
    -- Additional metadata fields
    branch_name TEXT,
    commit_hash TEXT,
    completion_percentage INTEGER,
    voice_coverage_percentage INTEGER
);

-- Create index for faster queries
CREATE INDEX idx_dev_manifest_history_created_at 
    ON public.dev_manifest_history(created_at DESC);

CREATE INDEX idx_dev_manifest_history_generated_by 
    ON public.dev_manifest_history(generated_by);

-- Add table comment
COMMENT ON TABLE public.dev_manifest_history IS 
    'Stores historical project progress manifests generated by the Control Tower';

COMMENT ON COLUMN public.dev_manifest_history.manifest_content IS 
    'Full markdown content of the generated manifest';

COMMENT ON COLUMN public.dev_manifest_history.file_count IS 
    'Number of files analyzed when manifest was generated';

-- --------------------------------------------
-- Table: dev_project_standards
-- Purpose: Stores project standards and documentation
-- --------------------------------------------
CREATE TABLE public.dev_project_standards (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    document_title TEXT NOT NULL,
    document_content TEXT NOT NULL,
    version TEXT NOT NULL,
    last_updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_by UUID REFERENCES auth.users(id) ON DELETE SET NULL,
    
    -- Additional fields
    category TEXT DEFAULT 'general',
    is_active BOOLEAN DEFAULT true,
    tags TEXT[]
);

-- Create unique constraint on title
CREATE UNIQUE INDEX idx_dev_project_standards_title 
    ON public.dev_project_standards(document_title) 
    WHERE is_active = true;

-- Create index for category searches
CREATE INDEX idx_dev_project_standards_category 
    ON public.dev_project_standards(category);

-- Add table comment
COMMENT ON TABLE public.dev_project_standards IS 
    'Stores project standards documentation for the Control Tower dashboard';

COMMENT ON COLUMN public.dev_project_standards.category IS 
    'Category of the standard (e.g., architecture, security, voice-first)';

-- ============================================
-- 2. ROW LEVEL SECURITY (RLS)
-- ============================================

-- Enable RLS on both tables
ALTER TABLE public.dev_manifest_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.dev_project_standards ENABLE ROW LEVEL SECURITY;

-- --------------------------------------------
-- RLS Policies for dev_manifest_history
-- --------------------------------------------

-- Policy: Developers can view all manifest history
CREATE POLICY "Developers can view manifest history" 
    ON public.dev_manifest_history
    FOR SELECT
    USING (
        -- Check if user has developer role in metadata
        auth.uid() IN (
            SELECT id FROM auth.users 
            WHERE raw_user_meta_data->>'is_developer' = 'true'
               OR raw_app_meta_data->>'is_developer' = 'true'
        )
        OR 
        -- Alternative: Check for developer role in custom claims
        auth.jwt()->>'role' = 'developer'
    );

-- Policy: Developers can insert new manifests
CREATE POLICY "Developers can insert manifest history" 
    ON public.dev_manifest_history
    FOR INSERT
    WITH CHECK (
        auth.uid() IN (
            SELECT id FROM auth.users 
            WHERE raw_user_meta_data->>'is_developer' = 'true'
               OR raw_app_meta_data->>'is_developer' = 'true'
        )
        OR 
        auth.jwt()->>'role' = 'developer'
    );

-- Policy: Users can update their own manifests
CREATE POLICY "Users can update own manifests" 
    ON public.dev_manifest_history
    FOR UPDATE
    USING (generated_by = auth.uid())
    WITH CHECK (generated_by = auth.uid());

-- Policy: Users can delete their own manifests
CREATE POLICY "Users can delete own manifests" 
    ON public.dev_manifest_history
    FOR DELETE
    USING (generated_by = auth.uid());

-- --------------------------------------------
-- RLS Policies for dev_project_standards
-- --------------------------------------------

-- Policy: Anyone authenticated can view standards
CREATE POLICY "Anyone can view project standards" 
    ON public.dev_project_standards
    FOR SELECT
    USING (is_active = true);

-- Policy: Developers can insert standards
CREATE POLICY "Developers can insert project standards" 
    ON public.dev_project_standards
    FOR INSERT
    WITH CHECK (
        auth.uid() IN (
            SELECT id FROM auth.users 
            WHERE raw_user_meta_data->>'is_developer' = 'true'
               OR raw_app_meta_data->>'is_developer' = 'true'
        )
        OR 
        auth.jwt()->>'role' = 'developer'
    );

-- Policy: Developers can update standards
CREATE POLICY "Developers can update project standards" 
    ON public.dev_project_standards
    FOR UPDATE
    USING (
        auth.uid() IN (
            SELECT id FROM auth.users 
            WHERE raw_user_meta_data->>'is_developer' = 'true'
               OR raw_app_meta_data->>'is_developer' = 'true'
        )
        OR 
        auth.jwt()->>'role' = 'developer'
    )
    WITH CHECK (
        auth.uid() IN (
            SELECT id FROM auth.users 
            WHERE raw_user_meta_data->>'is_developer' = 'true'
               OR raw_app_meta_data->>'is_developer' = 'true'
        )
        OR 
        auth.jwt()->>'role' = 'developer'
    );

-- Policy: Developers can soft-delete standards
CREATE POLICY "Developers can delete project standards" 
    ON public.dev_project_standards
    FOR DELETE
    USING (
        auth.uid() IN (
            SELECT id FROM auth.users 
            WHERE raw_user_meta_data->>'is_developer' = 'true'
               OR raw_app_meta_data->>'is_developer' = 'true'
        )
        OR 
        auth.jwt()->>'role' = 'developer'
    );

-- ============================================
-- 3. HELPER FUNCTIONS
-- ============================================

-- Function to check if current user is a developer
CREATE OR REPLACE FUNCTION public.is_developer()
RETURNS BOOLEAN AS $$
BEGIN
    RETURN (
        auth.uid() IN (
            SELECT id FROM auth.users 
            WHERE raw_user_meta_data->>'is_developer' = 'true'
               OR raw_app_meta_data->>'is_developer' = 'true'
        )
        OR 
        auth.jwt()->>'role' = 'developer'
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to get manifest statistics
CREATE OR REPLACE FUNCTION public.get_manifest_stats()
RETURNS TABLE (
    total_manifests BIGINT,
    avg_file_count NUMERIC,
    avg_completion NUMERIC,
    last_generated TIMESTAMP WITH TIME ZONE
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        COUNT(*)::BIGINT as total_manifests,
        AVG(file_count)::NUMERIC as avg_file_count,
        AVG(completion_percentage)::NUMERIC as avg_completion,
        MAX(created_at) as last_generated
    FROM public.dev_manifest_history;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ============================================
-- 4. SAMPLE DATA (Optional - Remove in production)
-- ============================================

-- Insert sample project standards
INSERT INTO public.dev_project_standards (
    document_title,
    document_content,
    version,
    category,
    tags
) VALUES 
(
    'Directive Block Contract v2025-08-1',
    '# Directive Block Contract

## Overview
All components must include a directive block at the top of the file...

## Required Fields
- purpose: Brief description of the component
- voice_considerations: How voice interaction is handled
- security_considerations: Security measures implemented
- performance_considerations: Performance optimizations',
    '2025.08.1',
    'architecture',
    ARRAY['directive', 'contract', 'standards']
),
(
    'Voice-First Development Guidelines',
    '# Voice-First Development Guidelines

## Core Principles
1. Every UI element must be voice-accessible
2. Provide voice feedback for all actions
3. Support voice navigation throughout the application',
    '1.0.0',
    'voice-first',
    ARRAY['voice', 'accessibility', 'guidelines']
);

-- ============================================
-- 5. GRANTS (If needed for specific roles)
-- ============================================

-- Grant usage on schema
GRANT USAGE ON SCHEMA public TO authenticated;

-- Grant access to tables
GRANT ALL ON public.dev_manifest_history TO authenticated;
GRANT ALL ON public.dev_project_standards TO authenticated;

-- Grant access to sequences
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO authenticated;

-- ============================================
-- 6. VERIFICATION QUERIES
-- ============================================

-- Run these to verify setup:
/*
-- Check tables exist
SELECT table_name 
FROM information_schema.tables 
WHERE table_schema = 'public' 
  AND table_name LIKE 'dev_%';

-- Check RLS is enabled
SELECT tablename, rowsecurity 
FROM pg_tables 
WHERE schemaname = 'public' 
  AND tablename LIKE 'dev_%';

-- Check policies
SELECT schemaname, tablename, policyname 
FROM pg_policies 
WHERE schemaname = 'public' 
  AND tablename LIKE 'dev_%';

-- Test developer check function
SELECT public.is_developer();
*/

-- ============================================
-- END OF CONTROL TOWER DATABASE SETUP
-- ============================================